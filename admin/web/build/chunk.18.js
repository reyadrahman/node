webpackJsonp([18],{50:/*!*******************************!*\
  !*** ./~/classnames/index.js ***!
  \*******************************/
function(n,e,r){var t,i;/*!
	  Copyright (c) 2016 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
!function(){"use strict";function r(){for(var n=[],e=0;e<arguments.length;e++){var t=arguments[e];if(t){var i=typeof t;if("string"===i||"number"===i)n.push(t);else if(Array.isArray(t))n.push(r.apply(null,t));else if("object"===i)for(var o in t)a.call(t,o)&&t[o]&&n.push(o)}}return n.join(" ")}var a={}.hasOwnProperty;"undefined"!=typeof n&&n.exports?n.exports=r:(t=[],i=function(){return r}.apply(e,t),!(void 0!==i&&(n.exports=i)))}()},56:/*!*******************************!*\
  !*** ./~/reflux/src/index.js ***!
  \*******************************/
function(n,e,r){var t=r(57);t.connect=r(70),t.connectFilter=r(72),t.ListenerMixin=r(71),t.listenTo=r(73),t.listenToMany=r(74),n.exports=t},57:/*!*********************************************!*\
  !*** ./~/reflux/~/reflux-core/lib/index.js ***!
  \*********************************************/
function(n,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var t={version:{"reflux-core":"0.3.0"}};t.ActionMethods=r(58),t.ListenerMethods=r(59),t.PublisherMethods=r(68),t.StoreMethods=r(67),t.createAction=r(69),t.createStore=r(63);var i=r(62).staticJoinCreator;t.joinTrailing=t.all=i("last"),t.joinLeading=i("first"),t.joinStrict=i("strict"),t.joinConcat=i("all");var a=t.utils=r(60);t.EventEmitter=a.EventEmitter,t.Promise=a.Promise,t.createActions=function(){var n=function(n,e){Object.keys(n).forEach(function(r){var i=n[r];e[r]=t.createAction(i)})};return function(e){var r={};return e instanceof Array?e.forEach(function(e){a.isObject(e)?n(e,r):r[e]=t.createAction(e)}):n(e,r),r}}(),t.setEventEmitter=function(n){t.EventEmitter=a.EventEmitter=n},t.nextTick=function(n){a.nextTick=n},t.use=function(n){n(t)},t.__keep=r(64),Function.prototype.bind||console.error("Function.prototype.bind not available. ES5 shim required. https://github.com/spoike/refluxjs#es5"),e["default"]=t,n.exports=e["default"]},58:/*!*****************************************************!*\
  !*** ./~/reflux/~/reflux-core/lib/ActionMethods.js ***!
  \*****************************************************/
function(n,e){"use strict";n.exports={}},59:/*!*******************************************************!*\
  !*** ./~/reflux/~/reflux-core/lib/ListenerMethods.js ***!
  \*******************************************************/
function(n,e,r){"use strict";var t=r(60),i=r(62).instanceJoinCreator,a=function(n){for(var e,r=0,t={};r<(n.children||[]).length;++r)e=n.children[r],n[e]&&(t[e]=n[e]);return t},o=function s(n){var e={};for(var r in n){var i=n[r],o=a(i),l=s(o);e[r]=i;for(var c in l){var d=l[c];e[r+t.capitalize(c)]=d}}return e};n.exports={hasListener:function(n){for(var e,r,t,i=0;i<(this.subscriptions||[]).length;++i)for(t=[].concat(this.subscriptions[i].listenable),e=0;e<t.length;e++)if(r=t[e],r===n||r.hasListener&&r.hasListener(n))return!0;return!1},listenToMany:function(n){var e=o(n);for(var r in e){var i=t.callbackName(r),a=this[i]?i:this[r]?r:void 0;a&&this.listenTo(e[r],a,this[i+"Default"]||this[a+"Default"]||a)}},validateListening:function(n){return n===this?"Listener is not able to listen to itself":t.isFunction(n.listen)?n.hasListener&&n.hasListener(this)?"Listener cannot listen to this listenable because of circular loop":void 0:n+" is missing a listen method"},listenTo:function(n,e,r){var i,a,o,s=this.subscriptions=this.subscriptions||[];return t.throwIf(this.validateListening(n)),this.fetchInitialState(n,r),i=n.listen(this[e]||e,this),a=function(){var n=s.indexOf(o);t.throwIf(-1===n,"Tried to remove listen already gone from subscriptions list!"),s.splice(n,1),i()},o={stop:a,listenable:n},s.push(o),o},stopListeningTo:function(n){for(var e,r=0,i=this.subscriptions||[];r<i.length;r++)if(e=i[r],e.listenable===n)return e.stop(),t.throwIf(-1!==i.indexOf(e),"Failed to remove listen from subscriptions list!"),!0;return!1},stopListeningToAll:function(){for(var n,e=this.subscriptions||[];n=e.length;)e[0].stop(),t.throwIf(e.length!==n-1,"Failed to remove listen from subscriptions list!")},fetchInitialState:function(n,e){e=e&&this[e]||e;var r=this;if(t.isFunction(e)&&t.isFunction(n.getInitialState)){var i=n.getInitialState();i&&t.isFunction(i.then)?i.then(function(){e.apply(r,arguments)}):e.call(this,i)}},joinTrailing:i("last"),joinLeading:i("first"),joinConcat:i("all"),joinStrict:i("strict")}},60:/*!*********************************************!*\
  !*** ./~/reflux/~/reflux-core/lib/utils.js ***!
  \*********************************************/
function(n,e,r){"use strict";function t(n){return n.charAt(0).toUpperCase()+n.slice(1)}function i(n,r){return r=r||"on",r+e.capitalize(n)}function a(n){var e=typeof n;return"function"===e||"object"===e&&!!n}function o(n){if(!a(n))return n;for(var e,r,t=1,i=arguments.length;i>t;t++){e=arguments[t];for(r in e)if(Object.getOwnPropertyDescriptor&&Object.defineProperty){var o=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(n,r,o)}else n[r]=e[r]}return n}function s(n){return"function"==typeof n}function l(n,e){for(var r={},t=0;t<n.length;t++)r[n[t]]=e[t];return r}function c(n){return"object"==typeof n&&"callee"in n&&"number"==typeof n.length}function d(n,e){if(n)throw Error(e||n)}Object.defineProperty(e,"__esModule",{value:!0}),e.capitalize=t,e.callbackName=i,e.isObject=a,e.extend=o,e.isFunction=s,e.object=l,e.isArguments=c,e.throwIf=d,e.EventEmitter=r(61),e.nextTick=function(n){setTimeout(n,0)}},61:/*!*******************************************!*\
  !*** ./~/reflux/~/eventemitter3/index.js ***!
  \*******************************************/
function(n,e,r){"use strict";function t(n,e,r){this.fn=n,this.context=e,this.once=r||!1}function i(){}var a=Object.prototype.hasOwnProperty,o="function"!=typeof Object.create?"~":!1;i.prototype._events=void 0,i.prototype.eventNames=function(){var n,e=this._events,r=[];if(!e)return r;for(n in e)a.call(e,n)&&r.push(o?n.slice(1):n);return Object.getOwnPropertySymbols?r.concat(Object.getOwnPropertySymbols(e)):r},i.prototype.listeners=function(n,e){var r=o?o+n:n,t=this._events&&this._events[r];if(e)return!!t;if(!t)return[];if(t.fn)return[t.fn];for(var i=0,a=t.length,s=new Array(a);a>i;i++)s[i]=t[i].fn;return s},i.prototype.emit=function(n,e,r,t,i,a){var s=o?o+n:n;if(!this._events||!this._events[s])return!1;var l,c,d=this._events[s],p=arguments.length;if("function"==typeof d.fn){switch(d.once&&this.removeListener(n,d.fn,void 0,!0),p){case 1:return d.fn.call(d.context),!0;case 2:return d.fn.call(d.context,e),!0;case 3:return d.fn.call(d.context,e,r),!0;case 4:return d.fn.call(d.context,e,r,t),!0;case 5:return d.fn.call(d.context,e,r,t,i),!0;case 6:return d.fn.call(d.context,e,r,t,i,a),!0}for(c=1,l=new Array(p-1);p>c;c++)l[c-1]=arguments[c];d.fn.apply(d.context,l)}else{var f,h=d.length;for(c=0;h>c;c++)switch(d[c].once&&this.removeListener(n,d[c].fn,void 0,!0),p){case 1:d[c].fn.call(d[c].context);break;case 2:d[c].fn.call(d[c].context,e);break;case 3:d[c].fn.call(d[c].context,e,r);break;default:if(!l)for(f=1,l=new Array(p-1);p>f;f++)l[f-1]=arguments[f];d[c].fn.apply(d[c].context,l)}}return!0},i.prototype.on=function(n,e,r){var i=new t(e,r||this),a=o?o+n:n;return this._events||(this._events=o?{}:Object.create(null)),this._events[a]?this._events[a].fn?this._events[a]=[this._events[a],i]:this._events[a].push(i):this._events[a]=i,this},i.prototype.once=function(n,e,r){var i=new t(e,r||this,!0),a=o?o+n:n;return this._events||(this._events=o?{}:Object.create(null)),this._events[a]?this._events[a].fn?this._events[a]=[this._events[a],i]:this._events[a].push(i):this._events[a]=i,this},i.prototype.removeListener=function(n,e,r,t){var i=o?o+n:n;if(!this._events||!this._events[i])return this;var a=this._events[i],s=[];if(e)if(a.fn)(a.fn!==e||t&&!a.once||r&&a.context!==r)&&s.push(a);else for(var l=0,c=a.length;c>l;l++)(a[l].fn!==e||t&&!a[l].once||r&&a[l].context!==r)&&s.push(a[l]);return s.length?this._events[i]=1===s.length?s[0]:s:delete this._events[i],this},i.prototype.removeAllListeners=function(n){return this._events?(n?delete this._events[o?o+n:n]:this._events=o?{}:Object.create(null),this):this},i.prototype.off=i.prototype.removeListener,i.prototype.addListener=i.prototype.on,i.prototype.setMaxListeners=function(){return this},i.prefixed=o,n.exports=i},62:/*!*********************************************!*\
  !*** ./~/reflux/~/reflux-core/lib/joins.js ***!
  \*********************************************/
function(n,e,r){"use strict";function t(n,e,r){return function(){var t,i=r.subscriptions,a=i?i.indexOf(n):-1;for(l.throwIf(-1===a,"Tried to remove join already gone from subscriptions list!"),t=0;t<e.length;t++)e[t]();i.splice(a,1)}}function i(n){n.listenablesEmitted=new Array(n.numberOfListenables),n.args=new Array(n.numberOfListenables)}function a(n,e){return function(){var r=c.call(arguments);if(e.listenablesEmitted[n])switch(e.strategy){case"strict":throw new Error("Strict join failed because listener triggered twice.");case"last":e.args[n]=r;break;case"all":e.args[n].push(r)}else e.listenablesEmitted[n]=!0,e.args[n]="all"===e.strategy?[r]:r;o(e)}}function o(n){for(var e=0;e<n.numberOfListenables;e++)if(!n.listenablesEmitted[e])return;n.callback.apply(n.listener,n.args),i(n)}var s=r(63),l=r(60),c=Array.prototype.slice,d={strict:"joinStrict",first:"joinLeading",last:"joinTrailing",all:"joinConcat"};e.staticJoinCreator=function(n){return function(){var e=c.call(arguments);return s({init:function(){this[d[n]].apply(this,e.concat("triggerAsync"))}})}},e.instanceJoinCreator=function(n){return function(){l.throwIf(arguments.length<2,"Cannot create a join with less than 2 listenables!");var e,r,o=c.call(arguments),s=o.pop(),d=o.length,p={numberOfListenables:d,callback:this[s]||s,listener:this,strategy:n},f=[];for(e=0;d>e;e++)l.throwIf(this.validateListening(o[e]));for(e=0;d>e;e++)f.push(o[e].listen(a(e,p),this));return i(p),r={listenable:o},r.stop=t(r,f,this),this.subscriptions=(this.subscriptions||[]).concat(r),r}}},63:/*!***************************************************!*\
  !*** ./~/reflux/~/reflux-core/lib/createStore.js ***!
  \***************************************************/
function(n,e,r){"use strict";var t=r(60),i=r(64),a=r(65),o=r(66),s={preEmit:1,shouldEmit:1};n.exports=function(n){function e(){var e,r=0;if(this.subscriptions=[],this.emitter=new t.EventEmitter,this.eventLabel="change",o(this,n),this.init&&t.isFunction(this.init)&&this.init(),this.listenables)for(e=[].concat(this.listenables);r<e.length;r++)this.listenToMany(e[r])}var l=r(67),c=r(68),d=r(59);n=n||{};for(var p in l)if(!s[p]&&(c[p]||d[p]))throw new Error("Cannot override API method "+p+" in Reflux.StoreMethods. Use another method name or override it on Reflux.PublisherMethods / Reflux.ListenerMethods instead.");for(var f in n)if(!s[f]&&(c[f]||d[f]))throw new Error("Cannot override API method "+f+" in store creation. Use another method name or override it on Reflux.PublisherMethods / Reflux.ListenerMethods instead.");n=a(n),t.extend(e.prototype,d,c,l,n);var h=new e;return i.createdStores.push(h),h}},64:/*!********************************************!*\
  !*** ./~/reflux/~/reflux-core/lib/Keep.js ***!
  \********************************************/
function(n,e){"use strict";e.createdStores=[],e.createdActions=[],e.reset=function(){for(;e.createdStores.length;)e.createdStores.pop();for(;e.createdActions.length;)e.createdActions.pop()}},65:/*!*********************************************!*\
  !*** ./~/reflux/~/reflux-core/lib/mixer.js ***!
  \*********************************************/
function(n,e,r){"use strict";var t=r(60);n.exports=function(n){var e={init:[],preEmit:[],shouldEmit:[]},r=function i(n){var r={};return n.mixins&&n.mixins.forEach(function(n){t.extend(r,i(n))}),t.extend(r,n),Object.keys(e).forEach(function(r){n.hasOwnProperty(r)&&e[r].push(n[r])}),r}(n);return e.init.length>1&&(r.init=function(){var n=arguments;e.init.forEach(function(e){e.apply(this,n)},this)}),e.preEmit.length>1&&(r.preEmit=function(){return e.preEmit.reduce(function(n,e){var r=e.apply(this,n);return void 0===r?n:[r]}.bind(this),arguments)}),e.shouldEmit.length>1&&(r.shouldEmit=function(){var n=arguments;return!e.shouldEmit.some(function(e){return!e.apply(this,n)},this)}),Object.keys(e).forEach(function(n){1===e[n].length&&(r[n]=e[n][0])}),r}},66:/*!***************************************************!*\
  !*** ./~/reflux/~/reflux-core/lib/bindMethods.js ***!
  \***************************************************/
function(n,e){"use strict";n.exports=function(n,e){for(var r in e)if(Object.getOwnPropertyDescriptor&&Object.defineProperty){var t=Object.getOwnPropertyDescriptor(e,r);if(!t.value||"function"!=typeof t.value||!e.hasOwnProperty(r))continue;n[r]=e[r].bind(n)}else{var i=e[r];if("function"!=typeof i||!e.hasOwnProperty(r))continue;n[r]=i.bind(n)}return n}},67:/*!****************************************************!*\
  !*** ./~/reflux/~/reflux-core/lib/StoreMethods.js ***!
  \****************************************************/
function(n,e){"use strict";n.exports={}},68:/*!********************************************************!*\
  !*** ./~/reflux/~/reflux-core/lib/PublisherMethods.js ***!
  \********************************************************/
function(n,e,r){"use strict";var t=r(60);n.exports={preEmit:function(){},shouldEmit:function(){return!0},listen:function(n,e){e=e||this;var r=function(r){i||n.apply(e,r)},t=this,i=!1;return this.emitter.addListener(this.eventLabel,r),function(){i=!0,t.emitter.removeListener(t.eventLabel,r)}},trigger:function(){var n=arguments,e=this.preEmit.apply(this,n);n=void 0===e?n:t.isArguments(e)?e:[].concat(e),this.shouldEmit.apply(this,n)&&this.emitter.emit(this.eventLabel,n)},triggerAsync:function(){var n=arguments,e=this;t.nextTick(function(){e.trigger.apply(e,n)})},deferWith:function(n){var e=this.trigger,r=this,t=function(){e.apply(r,arguments)};this.trigger=function(){n.apply(r,[t].concat([].splice.call(arguments,0)))}}}},69:/*!****************************************************!*\
  !*** ./~/reflux/~/reflux-core/lib/createAction.js ***!
  \****************************************************/
function(n,e,r){"use strict";var t=r(60),i=r(58),a=r(68),o=r(64),s={preEmit:1,shouldEmit:1},l=function c(n){n=n||{},t.isObject(n)||(n={actionName:n});for(var e in i)if(!s[e]&&a[e])throw new Error("Cannot override API method "+e+" in Reflux.ActionMethods. Use another method name or override it on Reflux.PublisherMethods instead.");for(var r in n)if(!s[r]&&a[r])throw new Error("Cannot override API method "+r+" in action creation. Use another method name or override it on Reflux.PublisherMethods instead.");n.children=n.children||[],n.asyncResult&&(n.children=n.children.concat(["completed","failed"]));for(var l=0,d={};l<n.children.length;l++){var p=n.children[l];d[p]=c(p)}var f=t.extend({eventLabel:"action",emitter:new t.EventEmitter,_isAction:!0},a,i,n),h=function u(){var n=u.sync?"trigger":"triggerAsync";return u[n].apply(u,arguments)};return t.extend(h,d,f),o.createdActions.push(h),h};n.exports=l},70:/*!*********************************!*\
  !*** ./~/reflux/src/connect.js ***!
  \*********************************/
function(n,e,r){var t=r(59),i=r(71),a=r(60);n.exports=function(n,e){return{getInitialState:function(){return a.isFunction(n.getInitialState)?void 0===e?n.getInitialState():a.object([e],[n.getInitialState()]):{}},componentDidMount:function(){a.extend(this,t);var r=this,i=void 0===e?this.setState:function(n){"undefined"!=typeof r.isMounted&&r.isMounted()!==!0||r.setState(a.object([e],[n]))};this.listenTo(n,i)},componentWillUnmount:i.componentWillUnmount}}},71:/*!***************************************!*\
  !*** ./~/reflux/src/ListenerMixin.js ***!
  \***************************************/
function(n,e,r){var t=r(60),i=r(59);n.exports=t.extend({componentWillUnmount:i.stopListeningToAll},i)},72:/*!***************************************!*\
  !*** ./~/reflux/src/connectFilter.js ***!
  \***************************************/
function(n,e,r){var t=r(59),i=r(71),a=r(60);n.exports=function(n,e,r){return r=a.isFunction(e)?e:r,{getInitialState:function(){if(a.isFunction(n.getInitialState)){if(a.isFunction(e))return r.call(this,n.getInitialState());var t=r.call(this,n.getInitialState());return"undefined"!=typeof t?a.object([e],[t]):{}}return{}},componentDidMount:function(){a.extend(this,t);var i=this,o=function(n){if(a.isFunction(e))i.setState(r.call(i,n));else{var t=r.call(i,n);i.setState(a.object([e],[t]))}};this.listenTo(n,o)},componentWillUnmount:i.componentWillUnmount}}},73:/*!**********************************!*\
  !*** ./~/reflux/src/listenTo.js ***!
  \**********************************/
function(n,e,r){var t=r(59);n.exports=function(n,e,r){return{componentDidMount:function(){for(var i in t)if(this[i]!==t[i]){if(this[i])throw"Can't have other property '"+i+"' when using Reflux.listenTo!";this[i]=t[i]}this.listenTo(n,e,r)},componentWillUnmount:t.stopListeningToAll}}},74:/*!**************************************!*\
  !*** ./~/reflux/src/listenToMany.js ***!
  \**************************************/
function(n,e,r){var t=r(59);n.exports=function(n){return{componentDidMount:function(){for(var e in t)if(this[e]!==t[e]){if(this[e])throw"Can't have other property '"+e+"' when using Reflux.listenToMany!";this[e]=t[e]}this.listenToMany(n)},componentWillUnmount:t.stopListeningToAll}}},83:/*!***********************************************************************!*\
  !*** ./src/components/layout/navigation/actions/NavigationActions.js ***!
  \***********************************************************************/
function(n,e,r){"use strict";function t(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(e,"__esModule",{value:!0});var i=r(56),a=t(i),o=a["default"].createActions({activate:{},getItems:{asyncResult:!0},fromMap:{}});o.getItems.listen(function(){$.getJSON("api/menu-items.json").then(this.completed,this.failed)}),e["default"]=o},84:/*!********************************************************************!*\
  !*** ./src/components/layout/navigation/stores/NavigationStore.js ***!
  \********************************************************************/
function(n,e,r){"use strict";function t(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(e,"__esModule",{value:!0});var i=r(56),a=t(i),o=r(83),s=t(o),l=r(85),c=t(l),d=r(22),p=t(d),f={item:void 0,items:[]},h=a["default"].createStore({initRawItems:function(n){f.items=this.normalize(n),this._setInitialItem(f.items)},_setInitialItem:function(n){n.forEach(function(n){n.isActive&&(f.item=n),n.items&&this._setInitialItem(n.items)}.bind(this))},listenables:s["default"],onGetItemsCompleted:function(n){f.items=this.normalize(n.items),this.trigger(f)},onActivate:function(n){f.item=n,n.route&&p["default"].pushState(null,n.route),this.trigger({item:n})},normalize:function(n){return _.map(n,function(n){return new c["default"](n)})},getData:function(){return f}});e["default"]=h},85:/*!*************************************************************!*\
  !*** ./src/components/layout/navigation/stores/MenuItem.js ***!
  \*************************************************************/
function(n,e){"use strict";function r(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var t=function(){function n(n,e){for(var r=0;r<e.length;r++){var t=e[r];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}return function(e,r,t){return r&&n(e.prototype,r),t&&n(e,t),e}}(),i=function(){function n(e,t){return r(this,n),this._id=_.uniqueId("nav-store-"),this.title=e.title,this.route=e.route,this.icon=e.icon,this.badge=e.badge,this.counter=e.counter,this.parent=t,e.items&&(this.items=_.map(e.items,function(e){return new n(e,this)}.bind(this))),this.isOpen=this._isOpen(),this.isActive=this._isActive(),this}return t(n,[{key:"_isOpen",value:function(){return _.startsWith(n.getRoute(),this.route)||this._hasOpenChildren()}},{key:"_hasOpenChildren",value:function(){return _.some(this.items,function(n){return n._isOpen()})}},{key:"_isActive",value:function(){return n.getRoute()==this.route||this._isOpen()&&!this.parent}},{key:"updateActive",value:function(){this.isActive=this._isActive()}},{key:"isSibling",value:function(n){return this._id!=n._id&&this.parent&&_.some(this.parent.items,function(e){return e._id==n._id&&e._id!=this._id})}},{key:"isParentOf",value:function(n){return this.items&&_.some(this.items,function(e){return e._id==n._id||e.isParentOf(n)})}}],[{key:"getRoute",value:function(){return location.hash.replace(/#/,"")}}]),n}();e["default"]=i},267:/*!********************************************!*\
  !*** ./src/app/pages/layout/SubHeader.jsx ***!
  \********************************************/
function(n,e,r){"use strict";function t(n){return n&&n.__esModule?n:{"default":n}}function i(n,e){var r={};for(var t in n)e.indexOf(t)>=0||Object.prototype.hasOwnProperty.call(n,t)&&(r[t]=n[t]);return r}Object.defineProperty(e,"__esModule",{value:!0});var a=r(19),o=t(a),s=r(268),l=t(s),c=o["default"].createClass({displayName:"SubHeader",render:function(){var n=this.props,e=n.className;i(n,["className"]);return o["default"].createElement(l["default"],{className:"col-xs-12 col-sm-5 col-md-5 col-lg-8"},o["default"].createElement("ul",{id:"sparks",className:e},o["default"].createElement("li",{className:"sparks-info"},o["default"].createElement("h5",null," My Income ",o["default"].createElement("span",{className:"txt-color-blue"},"$47,171")),o["default"].createElement("div",{className:"sparkline txt-color-blue hidden-mobile hidden-md hidden-sm"},"1300, 1877, 2500, 2577, 2000, 2100, 3000, 2700, 3631, 2471, 2700, 3631, 2471")),o["default"].createElement("li",{className:"sparks-info"},o["default"].createElement("h5",null," Site Traffic ",o["default"].createElement("span",{className:"txt-color-purple"},o["default"].createElement("i",{className:"fa fa-arrow-circle-up"})," 45%")),o["default"].createElement("div",{className:"sparkline txt-color-purple hidden-mobile hidden-md hidden-sm"},"110,150,300,130,400,240,220,310,220,300, 270, 210")),o["default"].createElement("li",{className:"sparks-info"},o["default"].createElement("h5",null," Site Orders ",o["default"].createElement("span",{className:"txt-color-greenDark"},o["default"].createElement("i",{className:"fa fa-shopping-cart"})," 2447")),o["default"].createElement("div",{className:"sparkline txt-color-greenDark hidden-mobile hidden-md hidden-sm"},"110,150,300,130,400,240,220,310,220,300, 270, 210"))))}});e["default"]=c},268:/*!*************************************************************!*\
  !*** ./src/components/graphs/inline/SparklineContainer.jsx ***!
  \*************************************************************/
function(n,e,r){"use strict";function t(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(e,"__esModule",{value:!0});var i=r(19),a=t(i),o=r(20),s=r(56),l=t(s),c=r(269),d=t(c),p=a["default"].createClass({displayName:"SparklineContainer",mixins:[l["default"].listenTo(d["default"],"_drawSparklines")],componentDidUpdate:function(){this._drawSparklines()},componentDidMount:function(){this._drawSparklines()},_drawSparklines:function(){function n(){$(".sparkline:not(:has(>canvas))",En).each(function(n,o){var En=$(o),Pn=En.data("sparkline-type")||"bar";if("bar"==Pn&&(e=En.data("sparkline-bar-color")||En.css("color")||"#0000f0",r=En.data("sparkline-height")||"26px",t=En.data("sparkline-barwidth")||5,i=En.data("sparkline-barspacing")||2,a=En.data("sparkline-negbar-color")||"#A90329",s=En.data("sparkline-barstacked-color")||["#A90329","#0099c6","#98AA56","#da532c","#4490B1","#6E9461","#990099","#B4CAD3"],En.sparkline("html",{barColor:e,type:Pn,height:r,barWidth:t,barSpacing:i,stackedBarColor:s,negBarColor:a,zeroAxis:"false"})),"line"==Pn&&(r=En.data("sparkline-height")||"20px",rn=En.data("sparkline-width")||"90px",l=En.data("sparkline-line-color")||En.css("color")||"#0000f0",c=En.data("sparkline-line-width")||1,d=En.data("fill-color")||"#c0d0f0",p=En.data("sparkline-spot-color")||"#f08000",f=En.data("sparkline-minspot-color")||"#ed1c24",h=En.data("sparkline-maxspot-color")||"#f08000",u=En.data("sparkline-highlightspot-color")||"#50f050",x=En.data("sparkline-highlightline-color")||"f02020",m=En.data("sparkline-spotradius")||1.5,Cn=En.data("sparkline-min-y")||"undefined",Sn=En.data("sparkline-max-y")||"undefined",On=En.data("sparkline-min-x")||"undefined",Mn=En.data("sparkline-max-x")||"undefined",Tn=En.data("min-val")||"undefined",An=En.data("max-val")||"undefined",zn=En.data("norm-color")||"#c0c0c0",jn=En.data("draw-normal")||!1,En.sparkline("html",{type:"line",width:rn,height:r,lineWidth:c,lineColor:l,fillColor:d,spotColor:p,minSpotColor:f,maxSpotColor:h,highlightSpotColor:u,highlightLineColor:x,spotRadius:m,chartRangeMin:Cn,chartRangeMax:Sn,chartRangeMinX:On,chartRangeMaxX:Mn,normalRangeMin:Tn,normalRangeMax:An,normalRangeColor:zn,drawNormalOnTop:jn})),"pie"==Pn&&(g=En.data("sparkline-piecolor")||["#B4CAD3","#4490B1","#98AA56","#da532c","#6E9461","#0099c6","#990099","#717D8A"],b=En.data("sparkline-piesize")||90,y=En.data("border-color")||"#45494C",v=En.data("sparkline-offset")||0,En.sparkline("html",{type:"pie",width:b,height:b,tooltipFormat:'<span style="color: {{color}}">&#9679;</span> ({{percent.1}}%)',sliceColors:g,borderWidth:1,offset:v,borderColor:y})),"box"==Pn&&(w=En.data("sparkline-width")||"auto",k=En.data("sparkline-height")||"auto",C=En.data("sparkline-boxraw")||!1,S=En.data("sparkline-targetval")||"undefined",O=En.data("sparkline-min")||"undefined",M=En.data("sparkline-max")||"undefined",T=En.data("sparkline-showoutlier")||!0,A=En.data("sparkline-outlier-iqr")||1.5,z=En.data("sparkline-spotradius")||1.5,j=En.css("color")||"#000000",E=En.data("fill-color")||"#c0d0f0",P=En.data("sparkline-whis-color")||"#000000",I=En.data("sparkline-outline-color")||"#303030",L=En.data("sparkline-outlinefill-color")||"#f0f0f0",D=En.data("sparkline-outlinemedian-color")||"#f00000",W=En.data("sparkline-outlinetarget-color")||"#40a020",En.sparkline("html",{type:"box",width:w,height:k,raw:C,target:S,minValue:O,maxValue:M,showOutliers:T,outlierIQR:A,spotRadius:z,boxLineColor:j,boxFillColor:E,whiskerColor:P,outlierLineColor:I,outlierFillColor:L,medianColor:D,targetColor:W})),"bullet"==Pn){var In=En.data("sparkline-height")||"auto";R=En.data("sparkline-width")||2,N=En.data("sparkline-bullet-color")||"#ed1c24",F=En.data("sparkline-performance-color")||"#3030f0",_=En.data("sparkline-bulletrange-color")||["#d3dafe","#a8b6ff","#7f94ff"],En.sparkline("html",{type:"bullet",height:In,targetWidth:R,targetColor:N,performanceColor:F,rangeColors:_})}"discrete"==Pn&&(B=En.data("sparkline-height")||26,H=En.data("sparkline-width")||50,q=En.css("color"),X=En.data("sparkline-line-height")||5,U=En.data("sparkline-threshold")||"undefined",Y=En.data("sparkline-threshold-color")||"#ed1c24",En.sparkline("html",{type:"discrete",width:H,height:B,lineColor:q,lineHeight:X,thresholdValue:U,thresholdColor:Y})),"tristate"==Pn&&(G=En.data("sparkline-height")||26,Q=En.data("sparkline-posbar-color")||"#60f060",V=En.data("sparkline-negbar-color")||"#f04040",J=En.data("sparkline-zerobar-color")||"#909090",K=En.data("sparkline-barwidth")||5,Z=En.data("sparkline-barspacing")||2,nn=En.data("sparkline-zeroaxis")||!1,En.sparkline("html",{type:"tristate",height:G,posBarColor:en,negBarColor:V,zeroBarColor:J,barWidth:K,barSpacing:Z,zeroAxis:nn})),"compositebar"==Pn&&(r=En.data("sparkline-height")||"20px",rn=En.data("sparkline-width")||"100%",t=En.data("sparkline-barwidth")||3,c=En.data("sparkline-line-width")||1,l=En.data("sparkline-color-top")||"#ed1c24",en=En.data("sparkline-color-bottom")||"#333333",En.sparkline(En.data("sparkline-bar-val"),{type:"bar",width:rn,height:r,barColor:en,barWidth:t}),En.sparkline(En.data("sparkline-line-val"),{width:rn,height:r,lineColor:l,lineWidth:c,composite:!0,fillColor:!1})),"compositeline"==Pn&&(r=En.data("sparkline-height")||"20px",rn=En.data("sparkline-width")||"90px",tn=En.data("sparkline-bar-val"),an=En.data("sparkline-bar-val-spots-top")||null,on=En.data("sparkline-bar-val-spots-bottom")||null,sn=En.data("sparkline-line-width-top")||1,ln=En.data("sparkline-line-width-bottom")||1,cn=En.data("sparkline-color-top")||"#333333",dn=En.data("sparkline-color-bottom")||"#ed1c24",pn=En.data("sparkline-spotradius-top")||1.5,fn=En.data("sparkline-spotradius-bottom")||pn,p=En.data("sparkline-spot-color")||"#f08000",hn=En.data("sparkline-minspot-color-top")||"#ed1c24",un=En.data("sparkline-maxspot-color-top")||"#f08000",xn=En.data("sparkline-minspot-color-bottom")||hn,mn=En.data("sparkline-maxspot-color-bottom")||un,gn=En.data("sparkline-highlightspot-color-top")||"#50f050",bn=En.data("sparkline-highlightline-color-top")||"#f02020",yn=En.data("sparkline-highlightspot-color-bottom")||gn,vn=En.data("sparkline-highlightline-color-bottom")||bn,wn=En.data("sparkline-fillcolor-top")||"transparent",kn=En.data("sparkline-fillcolor-bottom")||"transparent",En.sparkline(tn,{type:"line",spotRadius:pn,spotColor:p,minSpotColor:hn,maxSpotColor:un,highlightSpotColor:gn,highlightLineColor:bn,valueSpots:an,lineWidth:sn,width:rn,height:r,lineColor:cn,fillColor:wn}),En.sparkline(En.data("sparkline-line-val"),{type:"line",spotRadius:fn,spotColor:p,minSpotColor:xn,maxSpotColor:mn,highlightSpotColor:yn,highlightLineColor:vn,valueSpots:on,lineWidth:ln,width:rn,height:r,lineColor:dn,composite:!0,fillColor:kn})),En.find("canvas").attr("data-reactid",En.data("reactid")+".0.1")})}var e,r,t,i,a,s,l,c,d,p,f,h,u,x,m,g,b,y,v,w,k,C,S,O,M,T,A,z,j,E,P,I,L,D,W,R,N,F,_,B,H,q,X,U,Y,G,Q,V,J,K,Z,nn,en,rn,tn,an,on,sn,ln,cn,dn,pn,fn,hn,un,xn,mn,gn,bn,yn,vn,wn,kn,Cn,Sn,On,Mn,Tn,An,zn,jn,En=$((0,o.findDOMNode)(this));n()},render:function(){return a["default"].createElement("div",{className:this.props.className},this.props.children)}});e["default"]=p},269:/*!********************************************!*\
  !*** ./src/components/stores/AjaxStore.js ***!
  \********************************************/
function(n,e,r){"use strict";function t(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(e,"__esModule",{value:!0});var i=r(56),a=t(i),o=r(270),s=t(o),l=a["default"].createStore({listenables:[s["default"]],onContentLoaded:function(n){this.trigger()}});e["default"]=l},270:/*!***********************************************!*\
  !*** ./src/components/actions/AjaxActions.js ***!
  \***********************************************/
function(n,e,r){"use strict";function t(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(e,"__esModule",{value:!0});var i=r(56),a=t(i),o=a["default"].createActions({contentLoaded:{}});e["default"]=o},271:/*!******************************************************!*\
  !*** ./src/components/layout/widgets/WidgetGrid.jsx ***!
  \******************************************************/
function(n,e,r){"use strict";function t(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(e,"__esModule",{value:!0});var i=r(19),a=t(i),o=r(272),s=t(o),l=r(273),c=t(l),d=a["default"].createClass({displayName:"WidgetGrid",mixins:[s["default"]],render:function(){return a["default"].createElement("section",{id:"widget-grid"},this.props.children)},componentDidMount:function(){$(this.getHold()).jarvisWidgets(c["default"])}});e["default"]=d},272:/*!*******************************************************!*\
  !*** ./src/components/utils/mixins/ElementHolder.jsx ***!
  \*******************************************************/
function(n,e,r){"use strict";function t(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(e,"__esModule",{value:!0});var i=r(20),a=t(i),o=0,s={},l={instances:{},setHold:function(n){s[this.instanceId]=n},getHold:function(){return s[this.instanceId]},componentWillMount:function(){this.instanceId="ref"+o++},componentDidMount:function(){var n=a["default"].findDOMNode(this);this.setHold(n)},componentWillUnmount:function(){delete s[this.instanceId]}};e["default"]=l},273:/*!*********************************************************!*\
  !*** ./src/components/layout/widgets/WidgetDefaults.js ***!
  \*********************************************************/
function(n,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e["default"]={grid:"article",widgets:".jarviswidget",localStorage:!0,deleteSettingsKey:"#deletesettingskey-options",settingsKeyLabel:"Reset settings?",deletePositionKey:"#deletepositionkey-options",positionKeyLabel:"Reset position?",sortable:!0,buttonsHidden:!1,toggleButton:!0,toggleClass:"fa fa-minus | fa fa-plus",toggleSpeed:200,onToggle:function(){},deleteButton:!0,deleteMsg:"Warning: This action cannot be undone!",deleteClass:"fa fa-times",deleteSpeed:200,onDelete:function(){},editButton:!0,editPlaceholder:".jarviswidget-editbox",editClass:"fa fa-cog | fa fa-save",editSpeed:200,onEdit:function(){},colorButton:!0,fullscreenButton:!0,fullscreenClass:"fa fa-expand | fa fa-compress",fullscreenDiff:3,onFullscreen:function(){},customButton:!1,customClass:"folder-10 | next-10",customStart:function(){alert("Hello you, this is a custom button...")},customEnd:function(){alert("bye, till next time...")},buttonOrder:"%refresh% %custom% %edit% %toggle% %fullscreen% %delete%",opacity:1,dragHandle:"> header",placeholderClass:"jarviswidget-placeholder",indicator:!0,indicatorTime:600,ajax:!0,timestampPlaceholder:".jarviswidget-timestamp",timestampFormat:"Last update: %m%/%d%/%y% %h%:%i%:%s%",refreshButton:!0,refreshButtonClass:"fa fa-refresh",labelError:"Sorry but there was a error:",labelUpdated:"Last Update:",labelRefresh:"Refresh",labelDelete:"Delete widget:",afterLoad:function(){},rtl:!1,onChange:function(){},onSave:function(){},ajaxnav:!0}},274:/*!********************************************************!*\
  !*** ./src/components/layout/widgets/JarvisWidget.jsx ***!
  \********************************************************/
function(n,e,r){"use strict";function t(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(e,"__esModule",{value:!0});var i=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(n[t]=r[t])}return n},a=r(19),o=t(a),s=r(2),l=t(s),c=r(50),d=t(c),p=o["default"].createClass({displayName:"JarvisWidget",getDefaultProps:function(){return{colorbutton:!0,editbutton:!0,togglebutton:!0,deletebutton:!0,fullscreenbutton:!0,custombutton:!1,collapsed:!1,sortable:!0,hidden:!1,color:!1,load:!1,refresh:!1}},render:function(){var n=this.props.color?"jarviswidget-color-"+this.props.color:"",e=(0,d["default"])("jarviswidget",n,{"jarviswidget-sortable":1==this.props.sortable}),r={};return this.widgetId=l["default"].uniqueId("jarviswidget-"),["colorbutton","editbutton","togglebutton","deletebutton","fullscreenbutton","custombutton","sortable"].forEach(function(n){this.props[n]||(r["data-widget-"+n]=!1)}.bind(this)),["hidden","collapsed"].forEach(function(n){this.props[n]&&(r["data-widget-"+n]=!0)}.bind(this)),["refresh","load"].forEach(function(n){this.props[n]&&(r["data-widget-"+n]=this.props[n])}.bind(this)),o["default"].createElement("div",i({className:e,id:this.widgetId,ref:this.widgetId},r),this.props.children)},componentDidMount:function(){$(this.refs[this.widgetId]).find(".widget-body").prepend('<div class="jarviswidget-editbox"><input class="form-control" type="text"></div>')}});p.Body=o["default"].createClass({displayName:"Body",render:function(){var n=i({},this.props),e=n.children,r=n.props;return o["default"].createElement("div",r,o["default"].createElement("div",{className:"widget-body"},e))}}),e["default"]=p},275:/*!************************************************************************!*\
  !*** ./src/components/layout/navigation/components/BigBreadcrumbs.jsx ***!
  \************************************************************************/
function(n,e,r){"use strict";function t(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(e,"__esModule",{value:!0});var i=r(19),a=t(i),o=r(56),s=t(o),l=r(84),c=t(l),d=a["default"].createClass({displayName:"BigBreadcrumbs",mixins:[s["default"].listenTo(c["default"],"onNavigationChange")],getInitialState:function(){return{items:this.props.items||[],icon:this.props.icon||"fa fa-fw fa-home"}},componentWillMount:function(){!this.props.items&&c["default"].getData().item&&this.onNavigationChange({item:c["default"].getData().item})},onNavigationChange:function(n){var e=n.item;e.route&&(this.state.items=[],this.state.icon="",this._addCrumb(e),this.forceUpdate())},_addCrumb:function(n){this.state.items.unshift(n.title),!this.state.icon&&n.icon&&(this.state.icon=n.icon),n.parent&&this._addCrumb(n.parent)},render:function(){var n=_.head(this.state.items);return a["default"].createElement("div",{className:this.props.className+" big-breadcrumbs"},a["default"].createElement("h1",{className:"page-title txt-color-blueDark"},a["default"].createElement("i",{className:this.state.icon})," "+n,_.tail(this.state.items).map(function(n){return a["default"].createElement("span",{key:_.uniqueId("big-breadcrumb-")},a["default"].createElement("span",{className:"page-title-separator"},">"),n)})))}});e["default"]=d},283:/*!**************************************************!*\
  !*** ./src/components/graphs/flot/FlotChart.jsx ***!
  \**************************************************/
function(n,e,r){"use strict";function t(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(e,"__esModule",{value:!0});var i=r(19),a=t(i),o=r(2),s=(t(o),r(272)),l=t(s);r(284),r(287),r(289),r(291),r(293),r(295),r(297);var c=a["default"].createClass({displayName:"FlotChart",mixins:[l["default"]],componentDidMount:function(){this._renderChart(this.props.data)},componentWillReceiveProps:function(n){JSON.stringify(n.data)!==JSON.stringify(this.props.data)&&this._renderChart(n.data)},_renderChart:function(n){n&&$.plot(this.getHold(),n,this.props.options)},shouldComponentUpdate:function(n,e){return JSON.stringify(n.data)!==JSON.stringify(this.props.data)},render:function(){var n=this.props.className||"chart";return a["default"].createElement("div",{className:n})}});e["default"]=c},284:/*!****************************************************************!*\
  !*** ./~/script-loader!./bower_components/Flot/jquery.flot.js ***!
  \****************************************************************/
function(n,e,r){r(285)(r(286))},285:/*!**************************************!*\
  !*** ./~/script-loader/addScript.js ***!
  \**************************************/
function(n,e){n.exports=function(n){"function"==typeof execScript?execScript(n):eval.call(null,n)}},286:/*!*****************************************************************************!*\
  !*** ./~/script-loader/~/raw-loader!./bower_components/Flot/jquery.flot.js ***!
  \*****************************************************************************/
function(n,e){n.exports='/* Javascript plotting library for jQuery, version 0.8.3.\r\n\r\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\r\nLicensed under the MIT license.\r\n\r\n*/\r\n\r\n// first an inline dependency, jquery.colorhelpers.js, we inline it here\r\n// for convenience\r\n\r\n/* Plugin for jQuery for working with colors.\r\n *\r\n * Version 1.1.\r\n *\r\n * Inspiration from jQuery color animation plugin by John Resig.\r\n *\r\n * Released under the MIT license by Ole Laursen, October 2009.\r\n *\r\n * Examples:\r\n *\r\n *   $.color.parse("#fff").scale(\'rgb\', 0.25).add(\'a\', -0.5).toString()\r\n *   var c = $.color.extract($("#mydiv"), \'background-color\');\r\n *   console.log(c.r, c.g, c.b, c.a);\r\n *   $.color.make(100, 50, 25, 0.4).toString() // returns "rgba(100,50,25,0.4)"\r\n *\r\n * Note that .scale() and .add() return the same modified object\r\n * instead of making a new one.\r\n *\r\n * V. 1.1: Fix error handling so e.g. parsing an empty string does\r\n * produce a color rather than just crashing.\r\n */\r\n(function($){$.color={};$.color.make=function(r,g,b,a){var o={};o.r=r||0;o.g=g||0;o.b=b||0;o.a=a!=null?a:1;o.add=function(c,d){for(var i=0;i<c.length;++i)o[c.charAt(i)]+=d;return o.normalize()};o.scale=function(c,f){for(var i=0;i<c.length;++i)o[c.charAt(i)]*=f;return o.normalize()};o.toString=function(){if(o.a>=1){return"rgb("+[o.r,o.g,o.b].join(",")+")"}else{return"rgba("+[o.r,o.g,o.b,o.a].join(",")+")"}};o.normalize=function(){function clamp(min,value,max){return value<min?min:value>max?max:value}o.r=clamp(0,parseInt(o.r),255);o.g=clamp(0,parseInt(o.g),255);o.b=clamp(0,parseInt(o.b),255);o.a=clamp(0,o.a,1);return o};o.clone=function(){return $.color.make(o.r,o.b,o.g,o.a)};return o.normalize()};$.color.extract=function(elem,css){var c;do{c=elem.css(css).toLowerCase();if(c!=""&&c!="transparent")break;elem=elem.parent()}while(elem.length&&!$.nodeName(elem.get(0),"body"));if(c=="rgba(0, 0, 0, 0)")c="transparent";return $.color.parse(c)};$.color.parse=function(str){var res,m=$.color.make;if(res=/rgb\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*\\)/.exec(str))return m(parseInt(res[1],10),parseInt(res[2],10),parseInt(res[3],10));if(res=/rgba\\(\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]{1,3})\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\s*\\)/.exec(str))return m(parseInt(res[1],10),parseInt(res[2],10),parseInt(res[3],10),parseFloat(res[4]));if(res=/rgb\\(\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*\\)/.exec(str))return m(parseFloat(res[1])*2.55,parseFloat(res[2])*2.55,parseFloat(res[3])*2.55);if(res=/rgba\\(\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\%\\s*,\\s*([0-9]+(?:\\.[0-9]+)?)\\s*\\)/.exec(str))return m(parseFloat(res[1])*2.55,parseFloat(res[2])*2.55,parseFloat(res[3])*2.55,parseFloat(res[4]));if(res=/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(str))return m(parseInt(res[1],16),parseInt(res[2],16),parseInt(res[3],16));if(res=/#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(str))return m(parseInt(res[1]+res[1],16),parseInt(res[2]+res[2],16),parseInt(res[3]+res[3],16));var name=$.trim(str).toLowerCase();if(name=="transparent")return m(255,255,255,0);else{res=lookupColors[name]||[0,0,0];return m(res[0],res[1],res[2])}};var lookupColors={aqua:[0,255,255],azure:[240,255,255],beige:[245,245,220],black:[0,0,0],blue:[0,0,255],brown:[165,42,42],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgrey:[169,169,169],darkgreen:[0,100,0],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkviolet:[148,0,211],fuchsia:[255,0,255],gold:[255,215,0],green:[0,128,0],indigo:[75,0,130],khaki:[240,230,140],lightblue:[173,216,230],lightcyan:[224,255,255],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightyellow:[255,255,224],lime:[0,255,0],magenta:[255,0,255],maroon:[128,0,0],navy:[0,0,128],olive:[128,128,0],orange:[255,165,0],pink:[255,192,203],purple:[128,0,128],violet:[128,0,128],red:[255,0,0],silver:[192,192,192],white:[255,255,255],yellow:[255,255,0]}})(jQuery);\r\n\r\n// the actual Flot code\r\n(function($) {\r\n\r\n	// Cache the prototype hasOwnProperty for faster access\r\n\r\n	var hasOwnProperty = Object.prototype.hasOwnProperty;\r\n\r\n    // A shim to provide \'detach\' to jQuery versions prior to 1.4.  Using a DOM\r\n    // operation produces the same effect as detach, i.e. removing the element\r\n    // without touching its jQuery data.\r\n\r\n    // Do not merge this into Flot 0.9, since it requires jQuery 1.4.4+.\r\n\r\n    if (!$.fn.detach) {\r\n        $.fn.detach = function() {\r\n            return this.each(function() {\r\n                if (this.parentNode) {\r\n                    this.parentNode.removeChild( this );\r\n                }\r\n            });\r\n        };\r\n    }\r\n\r\n	///////////////////////////////////////////////////////////////////////////\r\n	// The Canvas object is a wrapper around an HTML5 <canvas> tag.\r\n	//\r\n	// @constructor\r\n	// @param {string} cls List of classes to apply to the canvas.\r\n	// @param {element} container Element onto which to append the canvas.\r\n	//\r\n	// Requiring a container is a little iffy, but unfortunately canvas\r\n	// operations don\'t work unless the canvas is attached to the DOM.\r\n\r\n	function Canvas(cls, container) {\r\n\r\n		var element = container.children("." + cls)[0];\r\n\r\n		if (element == null) {\r\n\r\n			element = document.createElement("canvas");\r\n			element.className = cls;\r\n\r\n			$(element).css({ direction: "ltr", position: "absolute", left: 0, top: 0 })\r\n				.appendTo(container);\r\n\r\n			// If HTML5 Canvas isn\'t available, fall back to [Ex|Flash]canvas\r\n\r\n			if (!element.getContext) {\r\n				if (window.G_vmlCanvasManager) {\r\n					element = window.G_vmlCanvasManager.initElement(element);\r\n				} else {\r\n					throw new Error("Canvas is not available. If you\'re using IE with a fall-back such as Excanvas, then there\'s either a mistake in your conditional include, or the page has no DOCTYPE and is rendering in Quirks Mode.");\r\n				}\r\n			}\r\n		}\r\n\r\n		this.element = element;\r\n\r\n		var context = this.context = element.getContext("2d");\r\n\r\n		// Determine the screen\'s ratio of physical to device-independent\r\n		// pixels.  This is the ratio between the canvas width that the browser\r\n		// advertises and the number of pixels actually present in that space.\r\n\r\n		// The iPhone 4, for example, has a device-independent width of 320px,\r\n		// but its screen is actually 640px wide.  It therefore has a pixel\r\n		// ratio of 2, while most normal devices have a ratio of 1.\r\n\r\n		var devicePixelRatio = window.devicePixelRatio || 1,\r\n			backingStoreRatio =\r\n				context.webkitBackingStorePixelRatio ||\r\n				context.mozBackingStorePixelRatio ||\r\n				context.msBackingStorePixelRatio ||\r\n				context.oBackingStorePixelRatio ||\r\n				context.backingStorePixelRatio || 1;\r\n\r\n		this.pixelRatio = devicePixelRatio / backingStoreRatio;\r\n\r\n		// Size the canvas to match the internal dimensions of its container\r\n\r\n		this.resize(container.width(), container.height());\r\n\r\n		// Collection of HTML div layers for text overlaid onto the canvas\r\n\r\n		this.textContainer = null;\r\n		this.text = {};\r\n\r\n		// Cache of text fragments and metrics, so we can avoid expensively\r\n		// re-calculating them when the plot is re-rendered in a loop.\r\n\r\n		this._textCache = {};\r\n	}\r\n\r\n	// Resizes the canvas to the given dimensions.\r\n	//\r\n	// @param {number} width New width of the canvas, in pixels.\r\n	// @param {number} width New height of the canvas, in pixels.\r\n\r\n	Canvas.prototype.resize = function(width, height) {\r\n\r\n		if (width <= 0 || height <= 0) {\r\n			throw new Error("Invalid dimensions for plot, width = " + width + ", height = " + height);\r\n		}\r\n\r\n		var element = this.element,\r\n			context = this.context,\r\n			pixelRatio = this.pixelRatio;\r\n\r\n		// Resize the canvas, increasing its density based on the display\'s\r\n		// pixel ratio; basically giving it more pixels without increasing the\r\n		// size of its element, to take advantage of the fact that retina\r\n		// displays have that many more pixels in the same advertised space.\r\n\r\n		// Resizing should reset the state (excanvas seems to be buggy though)\r\n\r\n		if (this.width != width) {\r\n			element.width = width * pixelRatio;\r\n			element.style.width = width + "px";\r\n			this.width = width;\r\n		}\r\n\r\n		if (this.height != height) {\r\n			element.height = height * pixelRatio;\r\n			element.style.height = height + "px";\r\n			this.height = height;\r\n		}\r\n\r\n		// Save the context, so we can reset in case we get replotted.  The\r\n		// restore ensure that we\'re really back at the initial state, and\r\n		// should be safe even if we haven\'t saved the initial state yet.\r\n\r\n		context.restore();\r\n		context.save();\r\n\r\n		// Scale the coordinate space to match the display density; so even though we\r\n		// may have twice as many pixels, we still want lines and other drawing to\r\n		// appear at the same size; the extra pixels will just make them crisper.\r\n\r\n		context.scale(pixelRatio, pixelRatio);\r\n	};\r\n\r\n	// Clears the entire canvas area, not including any overlaid HTML text\r\n\r\n	Canvas.prototype.clear = function() {\r\n		this.context.clearRect(0, 0, this.width, this.height);\r\n	};\r\n\r\n	// Finishes rendering the canvas, including managing the text overlay.\r\n\r\n	Canvas.prototype.render = function() {\r\n\r\n		var cache = this._textCache;\r\n\r\n		// For each text layer, add elements marked as active that haven\'t\r\n		// already been rendered, and remove those that are no longer active.\r\n\r\n		for (var layerKey in cache) {\r\n			if (hasOwnProperty.call(cache, layerKey)) {\r\n\r\n				var layer = this.getTextLayer(layerKey),\r\n					layerCache = cache[layerKey];\r\n\r\n				layer.hide();\r\n\r\n				for (var styleKey in layerCache) {\r\n					if (hasOwnProperty.call(layerCache, styleKey)) {\r\n						var styleCache = layerCache[styleKey];\r\n						for (var key in styleCache) {\r\n							if (hasOwnProperty.call(styleCache, key)) {\r\n\r\n								var positions = styleCache[key].positions;\r\n\r\n								for (var i = 0, position; position = positions[i]; i++) {\r\n									if (position.active) {\r\n										if (!position.rendered) {\r\n											layer.append(position.element);\r\n											position.rendered = true;\r\n										}\r\n									} else {\r\n										positions.splice(i--, 1);\r\n										if (position.rendered) {\r\n											position.element.detach();\r\n										}\r\n									}\r\n								}\r\n\r\n								if (positions.length == 0) {\r\n									delete styleCache[key];\r\n								}\r\n							}\r\n						}\r\n					}\r\n				}\r\n\r\n				layer.show();\r\n			}\r\n		}\r\n	};\r\n\r\n	// Creates (if necessary) and returns the text overlay container.\r\n	//\r\n	// @param {string} classes String of space-separated CSS classes used to\r\n	//     uniquely identify the text layer.\r\n	// @return {object} The jQuery-wrapped text-layer div.\r\n\r\n	Canvas.prototype.getTextLayer = function(classes) {\r\n\r\n		var layer = this.text[classes];\r\n\r\n		// Create the text layer if it doesn\'t exist\r\n\r\n		if (layer == null) {\r\n\r\n			// Create the text layer container, if it doesn\'t exist\r\n\r\n			if (this.textContainer == null) {\r\n				this.textContainer = $("<div class=\'flot-text\'></div>")\r\n					.css({\r\n						position: "absolute",\r\n						top: 0,\r\n						left: 0,\r\n						bottom: 0,\r\n						right: 0,\r\n						\'font-size\': "smaller",\r\n						color: "#545454"\r\n					})\r\n					.insertAfter(this.element);\r\n			}\r\n\r\n			layer = this.text[classes] = $("<div></div>")\r\n				.addClass(classes)\r\n				.css({\r\n					position: "absolute",\r\n					top: 0,\r\n					left: 0,\r\n					bottom: 0,\r\n					right: 0\r\n				})\r\n				.appendTo(this.textContainer);\r\n		}\r\n\r\n		return layer;\r\n	};\r\n\r\n	// Creates (if necessary) and returns a text info object.\r\n	//\r\n	// The object looks like this:\r\n	//\r\n	// {\r\n	//     width: Width of the text\'s wrapper div.\r\n	//     height: Height of the text\'s wrapper div.\r\n	//     element: The jQuery-wrapped HTML div containing the text.\r\n	//     positions: Array of positions at which this text is drawn.\r\n	// }\r\n	//\r\n	// The positions array contains objects that look like this:\r\n	//\r\n	// {\r\n	//     active: Flag indicating whether the text should be visible.\r\n	//     rendered: Flag indicating whether the text is currently visible.\r\n	//     element: The jQuery-wrapped HTML div containing the text.\r\n	//     x: X coordinate at which to draw the text.\r\n	//     y: Y coordinate at which to draw the text.\r\n	// }\r\n	//\r\n	// Each position after the first receives a clone of the original element.\r\n	//\r\n	// The idea is that that the width, height, and general \'identity\' of the\r\n	// text is constant no matter where it is placed; the placements are a\r\n	// secondary property.\r\n	//\r\n	// Canvas maintains a cache of recently-used text info objects; getTextInfo\r\n	// either returns the cached element or creates a new entry.\r\n	//\r\n	// @param {string} layer A string of space-separated CSS classes uniquely\r\n	//     identifying the layer containing this text.\r\n	// @param {string} text Text string to retrieve info for.\r\n	// @param {(string|object)=} font Either a string of space-separated CSS\r\n	//     classes or a font-spec object, defining the text\'s font and style.\r\n	// @param {number=} angle Angle at which to rotate the text, in degrees.\r\n	//     Angle is currently unused, it will be implemented in the future.\r\n	// @param {number=} width Maximum width of the text before it wraps.\r\n	// @return {object} a text info object.\r\n\r\n	Canvas.prototype.getTextInfo = function(layer, text, font, angle, width) {\r\n\r\n		var textStyle, layerCache, styleCache, info;\r\n\r\n		// Cast the value to a string, in case we were given a number or such\r\n\r\n		text = "" + text;\r\n\r\n		// If the font is a font-spec object, generate a CSS font definition\r\n\r\n		if (typeof font === "object") {\r\n			textStyle = font.style + " " + font.variant + " " + font.weight + " " + font.size + "px/" + font.lineHeight + "px " + font.family;\r\n		} else {\r\n			textStyle = font;\r\n		}\r\n\r\n		// Retrieve (or create) the cache for the text\'s layer and styles\r\n\r\n		layerCache = this._textCache[layer];\r\n\r\n		if (layerCache == null) {\r\n			layerCache = this._textCache[layer] = {};\r\n		}\r\n\r\n		styleCache = layerCache[textStyle];\r\n\r\n		if (styleCache == null) {\r\n			styleCache = layerCache[textStyle] = {};\r\n		}\r\n\r\n		info = styleCache[text];\r\n\r\n		// If we can\'t find a matching element in our cache, create a new one\r\n\r\n		if (info == null) {\r\n\r\n			var element = $("<div></div>").html(text)\r\n				.css({\r\n					position: "absolute",\r\n					\'max-width\': width,\r\n					top: -9999\r\n				})\r\n				.appendTo(this.getTextLayer(layer));\r\n\r\n			if (typeof font === "object") {\r\n				element.css({\r\n					font: textStyle,\r\n					color: font.color\r\n				});\r\n			} else if (typeof font === "string") {\r\n				element.addClass(font);\r\n			}\r\n\r\n			info = styleCache[text] = {\r\n				width: element.outerWidth(true),\r\n				height: element.outerHeight(true),\r\n				element: element,\r\n				positions: []\r\n			};\r\n\r\n			element.detach();\r\n		}\r\n\r\n		return info;\r\n	};\r\n\r\n	// Adds a text string to the canvas text overlay.\r\n	//\r\n	// The text isn\'t drawn immediately; it is marked as rendering, which will\r\n	// result in its addition to the canvas on the next render pass.\r\n	//\r\n	// @param {string} layer A string of space-separated CSS classes uniquely\r\n	//     identifying the layer containing this text.\r\n	// @param {number} x X coordinate at which to draw the text.\r\n	// @param {number} y Y coordinate at which to draw the text.\r\n	// @param {string} text Text string to draw.\r\n	// @param {(string|object)=} font Either a string of space-separated CSS\r\n	//     classes or a font-spec object, defining the text\'s font and style.\r\n	// @param {number=} angle Angle at which to rotate the text, in degrees.\r\n	//     Angle is currently unused, it will be implemented in the future.\r\n	// @param {number=} width Maximum width of the text before it wraps.\r\n	// @param {string=} halign Horizontal alignment of the text; either "left",\r\n	//     "center" or "right".\r\n	// @param {string=} valign Vertical alignment of the text; either "top",\r\n	//     "middle" or "bottom".\r\n\r\n	Canvas.prototype.addText = function(layer, x, y, text, font, angle, width, halign, valign) {\r\n\r\n		var info = this.getTextInfo(layer, text, font, angle, width),\r\n			positions = info.positions;\r\n\r\n		// Tweak the div\'s position to match the text\'s alignment\r\n\r\n		if (halign == "center") {\r\n			x -= info.width / 2;\r\n		} else if (halign == "right") {\r\n			x -= info.width;\r\n		}\r\n\r\n		if (valign == "middle") {\r\n			y -= info.height / 2;\r\n		} else if (valign == "bottom") {\r\n			y -= info.height;\r\n		}\r\n\r\n		// Determine whether this text already exists at this position.\r\n		// If so, mark it for inclusion in the next render pass.\r\n\r\n		for (var i = 0, position; position = positions[i]; i++) {\r\n			if (position.x == x && position.y == y) {\r\n				position.active = true;\r\n				return;\r\n			}\r\n		}\r\n\r\n		// If the text doesn\'t exist at this position, create a new entry\r\n\r\n		// For the very first position we\'ll re-use the original element,\r\n		// while for subsequent ones we\'ll clone it.\r\n\r\n		position = {\r\n			active: true,\r\n			rendered: false,\r\n			element: positions.length ? info.element.clone() : info.element,\r\n			x: x,\r\n			y: y\r\n		};\r\n\r\n		positions.push(position);\r\n\r\n		// Move the element to its final position within the container\r\n\r\n		position.element.css({\r\n			top: Math.round(y),\r\n			left: Math.round(x),\r\n			\'text-align\': halign	// In case the text wraps\r\n		});\r\n	};\r\n\r\n	// Removes one or more text strings from the canvas text overlay.\r\n	//\r\n	// If no parameters are given, all text within the layer is removed.\r\n	//\r\n	// Note that the text is not immediately removed; it is simply marked as\r\n	// inactive, which will result in its removal on the next render pass.\r\n	// This avoids the performance penalty for \'clear and redraw\' behavior,\r\n	// where we potentially get rid of all text on a layer, but will likely\r\n	// add back most or all of it later, as when redrawing axes, for example.\r\n	//\r\n	// @param {string} layer A string of space-separated CSS classes uniquely\r\n	//     identifying the layer containing this text.\r\n	// @param {number=} x X coordinate of the text.\r\n	// @param {number=} y Y coordinate of the text.\r\n	// @param {string=} text Text string to remove.\r\n	// @param {(string|object)=} font Either a string of space-separated CSS\r\n	//     classes or a font-spec object, defining the text\'s font and style.\r\n	// @param {number=} angle Angle at which the text is rotated, in degrees.\r\n	//     Angle is currently unused, it will be implemented in the future.\r\n\r\n	Canvas.prototype.removeText = function(layer, x, y, text, font, angle) {\r\n		if (text == null) {\r\n			var layerCache = this._textCache[layer];\r\n			if (layerCache != null) {\r\n				for (var styleKey in layerCache) {\r\n					if (hasOwnProperty.call(layerCache, styleKey)) {\r\n						var styleCache = layerCache[styleKey];\r\n						for (var key in styleCache) {\r\n							if (hasOwnProperty.call(styleCache, key)) {\r\n								var positions = styleCache[key].positions;\r\n								for (var i = 0, position; position = positions[i]; i++) {\r\n									position.active = false;\r\n								}\r\n							}\r\n						}\r\n					}\r\n				}\r\n			}\r\n		} else {\r\n			var positions = this.getTextInfo(layer, text, font, angle).positions;\r\n			for (var i = 0, position; position = positions[i]; i++) {\r\n				if (position.x == x && position.y == y) {\r\n					position.active = false;\r\n				}\r\n			}\r\n		}\r\n	};\r\n\r\n	///////////////////////////////////////////////////////////////////////////\r\n	// The top-level container for the entire plot.\r\n\r\n    function Plot(placeholder, data_, options_, plugins) {\r\n        // data is on the form:\r\n        //   [ series1, series2 ... ]\r\n        // where series is either just the data as [ [x1, y1], [x2, y2], ... ]\r\n        // or { data: [ [x1, y1], [x2, y2], ... ], label: "some label", ... }\r\n\r\n        var series = [],\r\n            options = {\r\n                // the color theme used for graphs\r\n                colors: ["#edc240", "#afd8f8", "#cb4b4b", "#4da74d", "#9440ed"],\r\n                legend: {\r\n                    show: true,\r\n                    noColumns: 1, // number of colums in legend table\r\n                    labelFormatter: null, // fn: string -> string\r\n                    labelBoxBorderColor: "#ccc", // border color for the little label boxes\r\n                    container: null, // container (as jQuery object) to put legend in, null means default on top of graph\r\n                    position: "ne", // position of default legend container within plot\r\n                    margin: 5, // distance from grid edge to default legend container within plot\r\n                    backgroundColor: null, // null means auto-detect\r\n                    backgroundOpacity: 0.85, // set to 0 to avoid background\r\n                    sorted: null    // default to no legend sorting\r\n                },\r\n                xaxis: {\r\n                    show: null, // null = auto-detect, true = always, false = never\r\n                    position: "bottom", // or "top"\r\n                    mode: null, // null or "time"\r\n                    font: null, // null (derived from CSS in placeholder) or object like { size: 11, lineHeight: 13, style: "italic", weight: "bold", family: "sans-serif", variant: "small-caps" }\r\n                    color: null, // base color, labels, ticks\r\n                    tickColor: null, // possibly different color of ticks, e.g. "rgba(0,0,0,0.15)"\r\n                    transform: null, // null or f: number -> number to transform axis\r\n                    inverseTransform: null, // if transform is set, this should be the inverse function\r\n                    min: null, // min. value to show, null means set automatically\r\n                    max: null, // max. value to show, null means set automatically\r\n                    autoscaleMargin: null, // margin in % to add if auto-setting min/max\r\n                    ticks: null, // either [1, 3] or [[1, "a"], 3] or (fn: axis info -> ticks) or app. number of ticks for auto-ticks\r\n                    tickFormatter: null, // fn: number -> string\r\n                    labelWidth: null, // size of tick labels in pixels\r\n                    labelHeight: null,\r\n                    reserveSpace: null, // whether to reserve space even if axis isn\'t shown\r\n                    tickLength: null, // size in pixels of ticks, or "full" for whole line\r\n                    alignTicksWithAxis: null, // axis number or null for no sync\r\n                    tickDecimals: null, // no. of decimals, null means auto\r\n                    tickSize: null, // number or [number, "unit"]\r\n                    minTickSize: null // number or [number, "unit"]\r\n                },\r\n                yaxis: {\r\n                    autoscaleMargin: 0.02,\r\n                    position: "left" // or "right"\r\n                },\r\n                xaxes: [],\r\n                yaxes: [],\r\n                series: {\r\n                    points: {\r\n                        show: false,\r\n                        radius: 3,\r\n                        lineWidth: 2, // in pixels\r\n                        fill: true,\r\n                        fillColor: "#ffffff",\r\n                        symbol: "circle" // or callback\r\n                    },\r\n                    lines: {\r\n                        // we don\'t put in show: false so we can see\r\n                        // whether lines were actively disabled\r\n                        lineWidth: 2, // in pixels\r\n                        fill: false,\r\n                        fillColor: null,\r\n                        steps: false\r\n                        // Omit \'zero\', so we can later default its value to\r\n                        // match that of the \'fill\' option.\r\n                    },\r\n                    bars: {\r\n                        show: false,\r\n                        lineWidth: 2, // in pixels\r\n                        barWidth: 1, // in units of the x axis\r\n                        fill: true,\r\n                        fillColor: null,\r\n                        align: "left", // "left", "right", or "center"\r\n                        horizontal: false,\r\n                        zero: true\r\n                    },\r\n                    shadowSize: 3,\r\n                    highlightColor: null\r\n                },\r\n                grid: {\r\n                    show: true,\r\n                    aboveData: false,\r\n                    color: "#545454", // primary color used for outline and labels\r\n                    backgroundColor: null, // null for transparent, else color\r\n                    borderColor: null, // set if different from the grid color\r\n                    tickColor: null, // color for the ticks, e.g. "rgba(0,0,0,0.15)"\r\n                    margin: 0, // distance from the canvas edge to the grid\r\n                    labelMargin: 5, // in pixels\r\n                    axisMargin: 8, // in pixels\r\n                    borderWidth: 2, // in pixels\r\n                    minBorderMargin: null, // in pixels, null means taken from points radius\r\n                    markings: null, // array of ranges or fn: axes -> array of ranges\r\n                    markingsColor: "#f4f4f4",\r\n                    markingsLineWidth: 2,\r\n                    // interactive stuff\r\n                    clickable: false,\r\n                    hoverable: false,\r\n                    autoHighlight: true, // highlight in case mouse is near\r\n                    mouseActiveRadius: 10 // how far the mouse can be away to activate an item\r\n                },\r\n                interaction: {\r\n                    redrawOverlayInterval: 1000/60 // time between updates, -1 means in same flow\r\n                },\r\n                hooks: {}\r\n            },\r\n        surface = null,     // the canvas for the plot itself\r\n        overlay = null,     // canvas for interactive stuff on top of plot\r\n        eventHolder = null, // jQuery object that events should be bound to\r\n        ctx = null, octx = null,\r\n        xaxes = [], yaxes = [],\r\n        plotOffset = { left: 0, right: 0, top: 0, bottom: 0},\r\n        plotWidth = 0, plotHeight = 0,\r\n        hooks = {\r\n            processOptions: [],\r\n            processRawData: [],\r\n            processDatapoints: [],\r\n            processOffset: [],\r\n            drawBackground: [],\r\n            drawSeries: [],\r\n            draw: [],\r\n            bindEvents: [],\r\n            drawOverlay: [],\r\n            shutdown: []\r\n        },\r\n        plot = this;\r\n\r\n        // public functions\r\n        plot.setData = setData;\r\n        plot.setupGrid = setupGrid;\r\n        plot.draw = draw;\r\n        plot.getPlaceholder = function() { return placeholder; };\r\n        plot.getCanvas = function() { return surface.element; };\r\n        plot.getPlotOffset = function() { return plotOffset; };\r\n        plot.width = function () { return plotWidth; };\r\n        plot.height = function () { return plotHeight; };\r\n        plot.offset = function () {\r\n            var o = eventHolder.offset();\r\n            o.left += plotOffset.left;\r\n            o.top += plotOffset.top;\r\n            return o;\r\n        };\r\n        plot.getData = function () { return series; };\r\n        plot.getAxes = function () {\r\n            var res = {}, i;\r\n            $.each(xaxes.concat(yaxes), function (_, axis) {\r\n                if (axis)\r\n                    res[axis.direction + (axis.n != 1 ? axis.n : "") + "axis"] = axis;\r\n            });\r\n            return res;\r\n        };\r\n        plot.getXAxes = function () { return xaxes; };\r\n        plot.getYAxes = function () { return yaxes; };\r\n        plot.c2p = canvasToAxisCoords;\r\n        plot.p2c = axisToCanvasCoords;\r\n        plot.getOptions = function () { return options; };\r\n        plot.highlight = highlight;\r\n        plot.unhighlight = unhighlight;\r\n        plot.triggerRedrawOverlay = triggerRedrawOverlay;\r\n        plot.pointOffset = function(point) {\r\n            return {\r\n                left: parseInt(xaxes[axisNumber(point, "x") - 1].p2c(+point.x) + plotOffset.left, 10),\r\n                top: parseInt(yaxes[axisNumber(point, "y") - 1].p2c(+point.y) + plotOffset.top, 10)\r\n            };\r\n        };\r\n        plot.shutdown = shutdown;\r\n        plot.destroy = function () {\r\n            shutdown();\r\n            placeholder.removeData("plot").empty();\r\n\r\n            series = [];\r\n            options = null;\r\n            surface = null;\r\n            overlay = null;\r\n            eventHolder = null;\r\n            ctx = null;\r\n            octx = null;\r\n            xaxes = [];\r\n            yaxes = [];\r\n            hooks = null;\r\n            highlights = [];\r\n            plot = null;\r\n        };\r\n        plot.resize = function () {\r\n        	var width = placeholder.width(),\r\n        		height = placeholder.height();\r\n            surface.resize(width, height);\r\n            overlay.resize(width, height);\r\n        };\r\n\r\n        // public attributes\r\n        plot.hooks = hooks;\r\n\r\n        // initialize\r\n        initPlugins(plot);\r\n        parseOptions(options_);\r\n        setupCanvases();\r\n        setData(data_);\r\n        setupGrid();\r\n        draw();\r\n        bindEvents();\r\n\r\n\r\n        function executeHooks(hook, args) {\r\n            args = [plot].concat(args);\r\n            for (var i = 0; i < hook.length; ++i)\r\n                hook[i].apply(this, args);\r\n        }\r\n\r\n        function initPlugins() {\r\n\r\n            // References to key classes, allowing plugins to modify them\r\n\r\n            var classes = {\r\n                Canvas: Canvas\r\n            };\r\n\r\n            for (var i = 0; i < plugins.length; ++i) {\r\n                var p = plugins[i];\r\n                p.init(plot, classes);\r\n                if (p.options)\r\n                    $.extend(true, options, p.options);\r\n            }\r\n        }\r\n\r\n        function parseOptions(opts) {\r\n\r\n            $.extend(true, options, opts);\r\n\r\n            // $.extend merges arrays, rather than replacing them.  When less\r\n            // colors are provided than the size of the default palette, we\r\n            // end up with those colors plus the remaining defaults, which is\r\n            // not expected behavior; avoid it by replacing them here.\r\n\r\n            if (opts && opts.colors) {\r\n            	options.colors = opts.colors;\r\n            }\r\n\r\n            if (options.xaxis.color == null)\r\n                options.xaxis.color = $.color.parse(options.grid.color).scale(\'a\', 0.22).toString();\r\n            if (options.yaxis.color == null)\r\n                options.yaxis.color = $.color.parse(options.grid.color).scale(\'a\', 0.22).toString();\r\n\r\n            if (options.xaxis.tickColor == null) // grid.tickColor for back-compatibility\r\n                options.xaxis.tickColor = options.grid.tickColor || options.xaxis.color;\r\n            if (options.yaxis.tickColor == null) // grid.tickColor for back-compatibility\r\n                options.yaxis.tickColor = options.grid.tickColor || options.yaxis.color;\r\n\r\n            if (options.grid.borderColor == null)\r\n                options.grid.borderColor = options.grid.color;\r\n            if (options.grid.tickColor == null)\r\n                options.grid.tickColor = $.color.parse(options.grid.color).scale(\'a\', 0.22).toString();\r\n\r\n            // Fill in defaults for axis options, including any unspecified\r\n            // font-spec fields, if a font-spec was provided.\r\n\r\n            // If no x/y axis options were provided, create one of each anyway,\r\n            // since the rest of the code assumes that they exist.\r\n\r\n            var i, axisOptions, axisCount,\r\n                fontSize = placeholder.css("font-size"),\r\n                fontSizeDefault = fontSize ? +fontSize.replace("px", "") : 13,\r\n                fontDefaults = {\r\n                    style: placeholder.css("font-style"),\r\n                    size: Math.round(0.8 * fontSizeDefault),\r\n                    variant: placeholder.css("font-variant"),\r\n                    weight: placeholder.css("font-weight"),\r\n                    family: placeholder.css("font-family")\r\n                };\r\n\r\n            axisCount = options.xaxes.length || 1;\r\n            for (i = 0; i < axisCount; ++i) {\r\n\r\n                axisOptions = options.xaxes[i];\r\n                if (axisOptions && !axisOptions.tickColor) {\r\n                    axisOptions.tickColor = axisOptions.color;\r\n                }\r\n\r\n                axisOptions = $.extend(true, {}, options.xaxis, axisOptions);\r\n                options.xaxes[i] = axisOptions;\r\n\r\n                if (axisOptions.font) {\r\n                    axisOptions.font = $.extend({}, fontDefaults, axisOptions.font);\r\n                    if (!axisOptions.font.color) {\r\n                        axisOptions.font.color = axisOptions.color;\r\n                    }\r\n                    if (!axisOptions.font.lineHeight) {\r\n                        axisOptions.font.lineHeight = Math.round(axisOptions.font.size * 1.15);\r\n                    }\r\n                }\r\n            }\r\n\r\n            axisCount = options.yaxes.length || 1;\r\n            for (i = 0; i < axisCount; ++i) {\r\n\r\n                axisOptions = options.yaxes[i];\r\n                if (axisOptions && !axisOptions.tickColor) {\r\n                    axisOptions.tickColor = axisOptions.color;\r\n                }\r\n\r\n                axisOptions = $.extend(true, {}, options.yaxis, axisOptions);\r\n                options.yaxes[i] = axisOptions;\r\n\r\n                if (axisOptions.font) {\r\n                    axisOptions.font = $.extend({}, fontDefaults, axisOptions.font);\r\n                    if (!axisOptions.font.color) {\r\n                        axisOptions.font.color = axisOptions.color;\r\n                    }\r\n                    if (!axisOptions.font.lineHeight) {\r\n                        axisOptions.font.lineHeight = Math.round(axisOptions.font.size * 1.15);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // backwards compatibility, to be removed in future\r\n            if (options.xaxis.noTicks && options.xaxis.ticks == null)\r\n                options.xaxis.ticks = options.xaxis.noTicks;\r\n            if (options.yaxis.noTicks && options.yaxis.ticks == null)\r\n                options.yaxis.ticks = options.yaxis.noTicks;\r\n            if (options.x2axis) {\r\n                options.xaxes[1] = $.extend(true, {}, options.xaxis, options.x2axis);\r\n                options.xaxes[1].position = "top";\r\n                // Override the inherit to allow the axis to auto-scale\r\n                if (options.x2axis.min == null) {\r\n                    options.xaxes[1].min = null;\r\n                }\r\n                if (options.x2axis.max == null) {\r\n                    options.xaxes[1].max = null;\r\n                }\r\n            }\r\n            if (options.y2axis) {\r\n                options.yaxes[1] = $.extend(true, {}, options.yaxis, options.y2axis);\r\n                options.yaxes[1].position = "right";\r\n                // Override the inherit to allow the axis to auto-scale\r\n                if (options.y2axis.min == null) {\r\n                    options.yaxes[1].min = null;\r\n                }\r\n                if (options.y2axis.max == null) {\r\n                    options.yaxes[1].max = null;\r\n                }\r\n            }\r\n            if (options.grid.coloredAreas)\r\n                options.grid.markings = options.grid.coloredAreas;\r\n            if (options.grid.coloredAreasColor)\r\n                options.grid.markingsColor = options.grid.coloredAreasColor;\r\n            if (options.lines)\r\n                $.extend(true, options.series.lines, options.lines);\r\n            if (options.points)\r\n                $.extend(true, options.series.points, options.points);\r\n            if (options.bars)\r\n                $.extend(true, options.series.bars, options.bars);\r\n            if (options.shadowSize != null)\r\n                options.series.shadowSize = options.shadowSize;\r\n            if (options.highlightColor != null)\r\n                options.series.highlightColor = options.highlightColor;\r\n\r\n            // save options on axes for future reference\r\n            for (i = 0; i < options.xaxes.length; ++i)\r\n                getOrCreateAxis(xaxes, i + 1).options = options.xaxes[i];\r\n            for (i = 0; i < options.yaxes.length; ++i)\r\n                getOrCreateAxis(yaxes, i + 1).options = options.yaxes[i];\r\n\r\n            // add hooks from options\r\n            for (var n in hooks)\r\n                if (options.hooks[n] && options.hooks[n].length)\r\n                    hooks[n] = hooks[n].concat(options.hooks[n]);\r\n\r\n            executeHooks(hooks.processOptions, [options]);\r\n        }\r\n\r\n        function setData(d) {\r\n            series = parseData(d);\r\n            fillInSeriesOptions();\r\n            processData();\r\n        }\r\n\r\n        function parseData(d) {\r\n            var res = [];\r\n            for (var i = 0; i < d.length; ++i) {\r\n                var s = $.extend(true, {}, options.series);\r\n\r\n                if (d[i].data != null) {\r\n                    s.data = d[i].data; // move the data instead of deep-copy\r\n                    delete d[i].data;\r\n\r\n                    $.extend(true, s, d[i]);\r\n\r\n                    d[i].data = s.data;\r\n                }\r\n                else\r\n                    s.data = d[i];\r\n                res.push(s);\r\n            }\r\n\r\n            return res;\r\n        }\r\n\r\n        function axisNumber(obj, coord) {\r\n            var a = obj[coord + "axis"];\r\n            if (typeof a == "object") // if we got a real axis, extract number\r\n                a = a.n;\r\n            if (typeof a != "number")\r\n                a = 1; // default to first axis\r\n            return a;\r\n        }\r\n\r\n        function allAxes() {\r\n            // return flat array without annoying null entries\r\n            return $.grep(xaxes.concat(yaxes), function (a) { return a; });\r\n        }\r\n\r\n        function canvasToAxisCoords(pos) {\r\n            // return an object with x/y corresponding to all used axes\r\n            var res = {}, i, axis;\r\n            for (i = 0; i < xaxes.length; ++i) {\r\n                axis = xaxes[i];\r\n                if (axis && axis.used)\r\n                    res["x" + axis.n] = axis.c2p(pos.left);\r\n            }\r\n\r\n            for (i = 0; i < yaxes.length; ++i) {\r\n                axis = yaxes[i];\r\n                if (axis && axis.used)\r\n                    res["y" + axis.n] = axis.c2p(pos.top);\r\n            }\r\n\r\n            if (res.x1 !== undefined)\r\n                res.x = res.x1;\r\n            if (res.y1 !== undefined)\r\n                res.y = res.y1;\r\n\r\n            return res;\r\n        }\r\n\r\n        function axisToCanvasCoords(pos) {\r\n            // get canvas coords from the first pair of x/y found in pos\r\n            var res = {}, i, axis, key;\r\n\r\n            for (i = 0; i < xaxes.length; ++i) {\r\n                axis = xaxes[i];\r\n                if (axis && axis.used) {\r\n                    key = "x" + axis.n;\r\n                    if (pos[key] == null && axis.n == 1)\r\n                        key = "x";\r\n\r\n                    if (pos[key] != null) {\r\n                        res.left = axis.p2c(pos[key]);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (i = 0; i < yaxes.length; ++i) {\r\n                axis = yaxes[i];\r\n                if (axis && axis.used) {\r\n                    key = "y" + axis.n;\r\n                    if (pos[key] == null && axis.n == 1)\r\n                        key = "y";\r\n\r\n                    if (pos[key] != null) {\r\n                        res.top = axis.p2c(pos[key]);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return res;\r\n        }\r\n\r\n        function getOrCreateAxis(axes, number) {\r\n            if (!axes[number - 1])\r\n                axes[number - 1] = {\r\n                    n: number, // save the number for future reference\r\n                    direction: axes == xaxes ? "x" : "y",\r\n                    options: $.extend(true, {}, axes == xaxes ? options.xaxis : options.yaxis)\r\n                };\r\n\r\n            return axes[number - 1];\r\n        }\r\n\r\n        function fillInSeriesOptions() {\r\n\r\n            var neededColors = series.length, maxIndex = -1, i;\r\n\r\n            // Subtract the number of series that already have fixed colors or\r\n            // color indexes from the number that we still need to generate.\r\n\r\n            for (i = 0; i < series.length; ++i) {\r\n                var sc = series[i].color;\r\n                if (sc != null) {\r\n                    neededColors--;\r\n                    if (typeof sc == "number" && sc > maxIndex) {\r\n                        maxIndex = sc;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // If any of the series have fixed color indexes, then we need to\r\n            // generate at least as many colors as the highest index.\r\n\r\n            if (neededColors <= maxIndex) {\r\n                neededColors = maxIndex + 1;\r\n            }\r\n\r\n            // Generate all the colors, using first the option colors and then\r\n            // variations on those colors once they\'re exhausted.\r\n\r\n            var c, colors = [], colorPool = options.colors,\r\n                colorPoolSize = colorPool.length, variation = 0;\r\n\r\n            for (i = 0; i < neededColors; i++) {\r\n\r\n                c = $.color.parse(colorPool[i % colorPoolSize] || "#666");\r\n\r\n                // Each time we exhaust the colors in the pool we adjust\r\n                // a scaling factor used to produce more variations on\r\n                // those colors. The factor alternates negative/positive\r\n                // to produce lighter/darker colors.\r\n\r\n                // Reset the variation after every few cycles, or else\r\n                // it will end up producing only white or black colors.\r\n\r\n                if (i % colorPoolSize == 0 && i) {\r\n                    if (variation >= 0) {\r\n                        if (variation < 0.5) {\r\n                            variation = -variation - 0.2;\r\n                        } else variation = 0;\r\n                    } else variation = -variation;\r\n                }\r\n\r\n                colors[i] = c.scale(\'rgb\', 1 + variation);\r\n            }\r\n\r\n            // Finalize the series options, filling in their colors\r\n\r\n            var colori = 0, s;\r\n            for (i = 0; i < series.length; ++i) {\r\n                s = series[i];\r\n\r\n                // assign colors\r\n                if (s.color == null) {\r\n                    s.color = colors[colori].toString();\r\n                    ++colori;\r\n                }\r\n                else if (typeof s.color == "number")\r\n                    s.color = colors[s.color].toString();\r\n\r\n                // turn on lines automatically in case nothing is set\r\n                if (s.lines.show == null) {\r\n                    var v, show = true;\r\n                    for (v in s)\r\n                        if (s[v] && s[v].show) {\r\n                            show = false;\r\n                            break;\r\n                        }\r\n                    if (show)\r\n                        s.lines.show = true;\r\n                }\r\n\r\n                // If nothing was provided for lines.zero, default it to match\r\n                // lines.fill, since areas by default should extend to zero.\r\n\r\n                if (s.lines.zero == null) {\r\n                    s.lines.zero = !!s.lines.fill;\r\n                }\r\n\r\n                // setup axes\r\n                s.xaxis = getOrCreateAxis(xaxes, axisNumber(s, "x"));\r\n                s.yaxis = getOrCreateAxis(yaxes, axisNumber(s, "y"));\r\n            }\r\n        }\r\n\r\n        function processData() {\r\n            var topSentry = Number.POSITIVE_INFINITY,\r\n                bottomSentry = Number.NEGATIVE_INFINITY,\r\n                fakeInfinity = Number.MAX_VALUE,\r\n                i, j, k, m, length,\r\n                s, points, ps, x, y, axis, val, f, p,\r\n                data, format;\r\n\r\n            function updateAxis(axis, min, max) {\r\n                if (min < axis.datamin && min != -fakeInfinity)\r\n                    axis.datamin = min;\r\n                if (max > axis.datamax && max != fakeInfinity)\r\n                    axis.datamax = max;\r\n            }\r\n\r\n            $.each(allAxes(), function (_, axis) {\r\n                // init axis\r\n                axis.datamin = topSentry;\r\n                axis.datamax = bottomSentry;\r\n                axis.used = false;\r\n            });\r\n\r\n            for (i = 0; i < series.length; ++i) {\r\n                s = series[i];\r\n                s.datapoints = { points: [] };\r\n\r\n                executeHooks(hooks.processRawData, [ s, s.data, s.datapoints ]);\r\n            }\r\n\r\n            // first pass: clean and copy data\r\n            for (i = 0; i < series.length; ++i) {\r\n                s = series[i];\r\n\r\n                data = s.data;\r\n                format = s.datapoints.format;\r\n\r\n                if (!format) {\r\n                    format = [];\r\n                    // find out how to copy\r\n                    format.push({ x: true, number: true, required: true });\r\n                    format.push({ y: true, number: true, required: true });\r\n\r\n                    if (s.bars.show || (s.lines.show && s.lines.fill)) {\r\n                        var autoscale = !!((s.bars.show && s.bars.zero) || (s.lines.show && s.lines.zero));\r\n                        format.push({ y: true, number: true, required: false, defaultValue: 0, autoscale: autoscale });\r\n                        if (s.bars.horizontal) {\r\n                            delete format[format.length - 1].y;\r\n                            format[format.length - 1].x = true;\r\n                        }\r\n                    }\r\n\r\n                    s.datapoints.format = format;\r\n                }\r\n\r\n                if (s.datapoints.pointsize != null)\r\n                    continue; // already filled in\r\n\r\n                s.datapoints.pointsize = format.length;\r\n\r\n                ps = s.datapoints.pointsize;\r\n                points = s.datapoints.points;\r\n\r\n                var insertSteps = s.lines.show && s.lines.steps;\r\n                s.xaxis.used = s.yaxis.used = true;\r\n\r\n                for (j = k = 0; j < data.length; ++j, k += ps) {\r\n                    p = data[j];\r\n\r\n                    var nullify = p == null;\r\n                    if (!nullify) {\r\n                        for (m = 0; m < ps; ++m) {\r\n                            val = p[m];\r\n                            f = format[m];\r\n\r\n                            if (f) {\r\n                                if (f.number && val != null) {\r\n                                    val = +val; // convert to number\r\n                                    if (isNaN(val))\r\n                                        val = null;\r\n                                    else if (val == Infinity)\r\n                                        val = fakeInfinity;\r\n                                    else if (val == -Infinity)\r\n                                        val = -fakeInfinity;\r\n                                }\r\n\r\n                                if (val == null) {\r\n                                    if (f.required)\r\n                                        nullify = true;\r\n\r\n                                    if (f.defaultValue != null)\r\n                                        val = f.defaultValue;\r\n                                }\r\n                            }\r\n\r\n                            points[k + m] = val;\r\n                        }\r\n                    }\r\n\r\n                    if (nullify) {\r\n                        for (m = 0; m < ps; ++m) {\r\n                            val = points[k + m];\r\n                            if (val != null) {\r\n                                f = format[m];\r\n                                // extract min/max info\r\n                                if (f.autoscale !== false) {\r\n                                    if (f.x) {\r\n                                        updateAxis(s.xaxis, val, val);\r\n                                    }\r\n                                    if (f.y) {\r\n                                        updateAxis(s.yaxis, val, val);\r\n                                    }\r\n                                }\r\n                            }\r\n                            points[k + m] = null;\r\n                        }\r\n                    }\r\n                    else {\r\n                        // a little bit of line specific stuff that\r\n                        // perhaps shouldn\'t be here, but lacking\r\n                        // better means...\r\n                        if (insertSteps && k > 0\r\n                            && points[k - ps] != null\r\n                            && points[k - ps] != points[k]\r\n                            && points[k - ps + 1] != points[k + 1]) {\r\n                            // copy the point to make room for a middle point\r\n                            for (m = 0; m < ps; ++m)\r\n                                points[k + ps + m] = points[k + m];\r\n\r\n                            // middle point has same y\r\n                            points[k + 1] = points[k - ps + 1];\r\n\r\n                            // we\'ve added a point, better reflect that\r\n                            k += ps;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // give the hooks a chance to run\r\n            for (i = 0; i < series.length; ++i) {\r\n                s = series[i];\r\n\r\n                executeHooks(hooks.processDatapoints, [ s, s.datapoints]);\r\n            }\r\n\r\n            // second pass: find datamax/datamin for auto-scaling\r\n            for (i = 0; i < series.length; ++i) {\r\n                s = series[i];\r\n                points = s.datapoints.points;\r\n                ps = s.datapoints.pointsize;\r\n                format = s.datapoints.format;\r\n\r\n                var xmin = topSentry, ymin = topSentry,\r\n                    xmax = bottomSentry, ymax = bottomSentry;\r\n\r\n                for (j = 0; j < points.length; j += ps) {\r\n                    if (points[j] == null)\r\n                        continue;\r\n\r\n                    for (m = 0; m < ps; ++m) {\r\n                        val = points[j + m];\r\n                        f = format[m];\r\n                        if (!f || f.autoscale === false || val == fakeInfinity || val == -fakeInfinity)\r\n                            continue;\r\n\r\n                        if (f.x) {\r\n                            if (val < xmin)\r\n                                xmin = val;\r\n                            if (val > xmax)\r\n                                xmax = val;\r\n                        }\r\n                        if (f.y) {\r\n                            if (val < ymin)\r\n                                ymin = val;\r\n                            if (val > ymax)\r\n                                ymax = val;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (s.bars.show) {\r\n                    // make sure we got room for the bar on the dancing floor\r\n                    var delta;\r\n\r\n                    switch (s.bars.align) {\r\n                        case "left":\r\n                            delta = 0;\r\n                            break;\r\n                        case "right":\r\n                            delta = -s.bars.barWidth;\r\n                            break;\r\n                        default:\r\n                            delta = -s.bars.barWidth / 2;\r\n                    }\r\n\r\n                    if (s.bars.horizontal) {\r\n                        ymin += delta;\r\n                        ymax += delta + s.bars.barWidth;\r\n                    }\r\n                    else {\r\n                        xmin += delta;\r\n                        xmax += delta + s.bars.barWidth;\r\n                    }\r\n                }\r\n\r\n                updateAxis(s.xaxis, xmin, xmax);\r\n                updateAxis(s.yaxis, ymin, ymax);\r\n            }\r\n\r\n            $.each(allAxes(), function (_, axis) {\r\n                if (axis.datamin == topSentry)\r\n                    axis.datamin = null;\r\n                if (axis.datamax == bottomSentry)\r\n                    axis.datamax = null;\r\n            });\r\n        }\r\n\r\n        function setupCanvases() {\r\n\r\n            // Make sure the placeholder is clear of everything except canvases\r\n            // from a previous plot in this container that we\'ll try to re-use.\r\n\r\n            placeholder.css("padding", 0) // padding messes up the positioning\r\n                .children().filter(function(){\r\n                    return !$(this).hasClass("flot-overlay") && !$(this).hasClass(\'flot-base\');\r\n                }).remove();\r\n\r\n            if (placeholder.css("position") == \'static\')\r\n                placeholder.css("position", "relative"); // for positioning labels and overlay\r\n\r\n            surface = new Canvas("flot-base", placeholder);\r\n            overlay = new Canvas("flot-overlay", placeholder); // overlay canvas for interactive features\r\n\r\n            ctx = surface.context;\r\n            octx = overlay.context;\r\n\r\n            // define which element we\'re listening for events on\r\n            eventHolder = $(overlay.element).unbind();\r\n\r\n            // If we\'re re-using a plot object, shut down the old one\r\n\r\n            var existing = placeholder.data("plot");\r\n\r\n            if (existing) {\r\n                existing.shutdown();\r\n                overlay.clear();\r\n            }\r\n\r\n            // save in case we get replotted\r\n            placeholder.data("plot", plot);\r\n        }\r\n\r\n        function bindEvents() {\r\n            // bind events\r\n            if (options.grid.hoverable) {\r\n                eventHolder.mousemove(onMouseMove);\r\n\r\n                // Use bind, rather than .mouseleave, because we officially\r\n                // still support jQuery 1.2.6, which doesn\'t define a shortcut\r\n                // for mouseenter or mouseleave.  This was a bug/oversight that\r\n                // was fixed somewhere around 1.3.x.  We can return to using\r\n                // .mouseleave when we drop support for 1.2.6.\r\n\r\n                eventHolder.bind("mouseleave", onMouseLeave);\r\n            }\r\n\r\n            if (options.grid.clickable)\r\n                eventHolder.click(onClick);\r\n\r\n            executeHooks(hooks.bindEvents, [eventHolder]);\r\n        }\r\n\r\n        function shutdown() {\r\n            if (redrawTimeout)\r\n                clearTimeout(redrawTimeout);\r\n\r\n            eventHolder.unbind("mousemove", onMouseMove);\r\n            eventHolder.unbind("mouseleave", onMouseLeave);\r\n            eventHolder.unbind("click", onClick);\r\n\r\n            executeHooks(hooks.shutdown, [eventHolder]);\r\n        }\r\n\r\n        function setTransformationHelpers(axis) {\r\n            // set helper functions on the axis, assumes plot area\r\n            // has been computed already\r\n\r\n            function identity(x) { return x; }\r\n\r\n            var s, m, t = axis.options.transform || identity,\r\n                it = axis.options.inverseTransform;\r\n\r\n            // precompute how much the axis is scaling a point\r\n            // in canvas space\r\n            if (axis.direction == "x") {\r\n                s = axis.scale = plotWidth / Math.abs(t(axis.max) - t(axis.min));\r\n                m = Math.min(t(axis.max), t(axis.min));\r\n            }\r\n            else {\r\n                s = axis.scale = plotHeight / Math.abs(t(axis.max) - t(axis.min));\r\n                s = -s;\r\n                m = Math.max(t(axis.max), t(axis.min));\r\n            }\r\n\r\n            // data point to canvas coordinate\r\n            if (t == identity) // slight optimization\r\n                axis.p2c = function (p) { return (p - m) * s; };\r\n            else\r\n                axis.p2c = function (p) { return (t(p) - m) * s; };\r\n            // canvas coordinate to data point\r\n            if (!it)\r\n                axis.c2p = function (c) { return m + c / s; };\r\n            else\r\n                axis.c2p = function (c) { return it(m + c / s); };\r\n        }\r\n\r\n        function measureTickLabels(axis) {\r\n\r\n            var opts = axis.options,\r\n                ticks = axis.ticks || [],\r\n                labelWidth = opts.labelWidth || 0,\r\n                labelHeight = opts.labelHeight || 0,\r\n                maxWidth = labelWidth || (axis.direction == "x" ? Math.floor(surface.width / (ticks.length || 1)) : null),\r\n                legacyStyles = axis.direction + "Axis " + axis.direction + axis.n + "Axis",\r\n                layer = "flot-" + axis.direction + "-axis flot-" + axis.direction + axis.n + "-axis " + legacyStyles,\r\n                font = opts.font || "flot-tick-label tickLabel";\r\n\r\n            for (var i = 0; i < ticks.length; ++i) {\r\n\r\n                var t = ticks[i];\r\n\r\n                if (!t.label)\r\n                    continue;\r\n\r\n                var info = surface.getTextInfo(layer, t.label, font, null, maxWidth);\r\n\r\n                labelWidth = Math.max(labelWidth, info.width);\r\n                labelHeight = Math.max(labelHeight, info.height);\r\n            }\r\n\r\n            axis.labelWidth = opts.labelWidth || labelWidth;\r\n            axis.labelHeight = opts.labelHeight || labelHeight;\r\n        }\r\n\r\n        function allocateAxisBoxFirstPhase(axis) {\r\n            // find the bounding box of the axis by looking at label\r\n            // widths/heights and ticks, make room by diminishing the\r\n            // plotOffset; this first phase only looks at one\r\n            // dimension per axis, the other dimension depends on the\r\n            // other axes so will have to wait\r\n\r\n            var lw = axis.labelWidth,\r\n                lh = axis.labelHeight,\r\n                pos = axis.options.position,\r\n                isXAxis = axis.direction === "x",\r\n                tickLength = axis.options.tickLength,\r\n                axisMargin = options.grid.axisMargin,\r\n                padding = options.grid.labelMargin,\r\n                innermost = true,\r\n                outermost = true,\r\n                first = true,\r\n                found = false;\r\n\r\n            // Determine the axis\'s position in its direction and on its side\r\n\r\n            $.each(isXAxis ? xaxes : yaxes, function(i, a) {\r\n                if (a && (a.show || a.reserveSpace)) {\r\n                    if (a === axis) {\r\n                        found = true;\r\n                    } else if (a.options.position === pos) {\r\n                        if (found) {\r\n                            outermost = false;\r\n                        } else {\r\n                            innermost = false;\r\n                        }\r\n                    }\r\n                    if (!found) {\r\n                        first = false;\r\n                    }\r\n                }\r\n            });\r\n\r\n            // The outermost axis on each side has no margin\r\n\r\n            if (outermost) {\r\n                axisMargin = 0;\r\n            }\r\n\r\n            // The ticks for the first axis in each direction stretch across\r\n\r\n            if (tickLength == null) {\r\n                tickLength = first ? "full" : 5;\r\n            }\r\n\r\n            if (!isNaN(+tickLength))\r\n                padding += +tickLength;\r\n\r\n            if (isXAxis) {\r\n                lh += padding;\r\n\r\n                if (pos == "bottom") {\r\n                    plotOffset.bottom += lh + axisMargin;\r\n                    axis.box = { top: surface.height - plotOffset.bottom, height: lh };\r\n                }\r\n                else {\r\n                    axis.box = { top: plotOffset.top + axisMargin, height: lh };\r\n                    plotOffset.top += lh + axisMargin;\r\n                }\r\n            }\r\n            else {\r\n                lw += padding;\r\n\r\n                if (pos == "left") {\r\n                    axis.box = { left: plotOffset.left + axisMargin, width: lw };\r\n                    plotOffset.left += lw + axisMargin;\r\n                }\r\n                else {\r\n                    plotOffset.right += lw + axisMargin;\r\n                    axis.box = { left: surface.width - plotOffset.right, width: lw };\r\n                }\r\n            }\r\n\r\n             // save for future reference\r\n            axis.position = pos;\r\n            axis.tickLength = tickLength;\r\n            axis.box.padding = padding;\r\n            axis.innermost = innermost;\r\n        }\r\n\r\n        function allocateAxisBoxSecondPhase(axis) {\r\n            // now that all axis boxes have been placed in one\r\n            // dimension, we can set the remaining dimension coordinates\r\n            if (axis.direction == "x") {\r\n                axis.box.left = plotOffset.left - axis.labelWidth / 2;\r\n                axis.box.width = surface.width - plotOffset.left - plotOffset.right + axis.labelWidth;\r\n            }\r\n            else {\r\n                axis.box.top = plotOffset.top - axis.labelHeight / 2;\r\n                axis.box.height = surface.height - plotOffset.bottom - plotOffset.top + axis.labelHeight;\r\n            }\r\n        }\r\n\r\n        function adjustLayoutForThingsStickingOut() {\r\n            // possibly adjust plot offset to ensure everything stays\r\n            // inside the canvas and isn\'t clipped off\r\n\r\n            var minMargin = options.grid.minBorderMargin,\r\n                axis, i;\r\n\r\n            // check stuff from the plot (FIXME: this should just read\r\n            // a value from the series, otherwise it\'s impossible to\r\n            // customize)\r\n            if (minMargin == null) {\r\n                minMargin = 0;\r\n                for (i = 0; i < series.length; ++i)\r\n                    minMargin = Math.max(minMargin, 2 * (series[i].points.radius + series[i].points.lineWidth/2));\r\n            }\r\n\r\n            var margins = {\r\n                left: minMargin,\r\n                right: minMargin,\r\n                top: minMargin,\r\n                bottom: minMargin\r\n            };\r\n\r\n            // check axis labels, note we don\'t check the actual\r\n            // labels but instead use the overall width/height to not\r\n            // jump as much around with replots\r\n            $.each(allAxes(), function (_, axis) {\r\n                if (axis.reserveSpace && axis.ticks && axis.ticks.length) {\r\n                    if (axis.direction === "x") {\r\n                        margins.left = Math.max(margins.left, axis.labelWidth / 2);\r\n                        margins.right = Math.max(margins.right, axis.labelWidth / 2);\r\n                    } else {\r\n                        margins.bottom = Math.max(margins.bottom, axis.labelHeight / 2);\r\n                        margins.top = Math.max(margins.top, axis.labelHeight / 2);\r\n                    }\r\n                }\r\n            });\r\n\r\n            plotOffset.left = Math.ceil(Math.max(margins.left, plotOffset.left));\r\n            plotOffset.right = Math.ceil(Math.max(margins.right, plotOffset.right));\r\n            plotOffset.top = Math.ceil(Math.max(margins.top, plotOffset.top));\r\n            plotOffset.bottom = Math.ceil(Math.max(margins.bottom, plotOffset.bottom));\r\n        }\r\n\r\n        function setupGrid() {\r\n            var i, axes = allAxes(), showGrid = options.grid.show;\r\n\r\n            // Initialize the plot\'s offset from the edge of the canvas\r\n\r\n            for (var a in plotOffset) {\r\n                var margin = options.grid.margin || 0;\r\n                plotOffset[a] = typeof margin == "number" ? margin : margin[a] || 0;\r\n            }\r\n\r\n            executeHooks(hooks.processOffset, [plotOffset]);\r\n\r\n            // If the grid is visible, add its border width to the offset\r\n\r\n            for (var a in plotOffset) {\r\n                if(typeof(options.grid.borderWidth) == "object") {\r\n                    plotOffset[a] += showGrid ? options.grid.borderWidth[a] : 0;\r\n                }\r\n                else {\r\n                    plotOffset[a] += showGrid ? options.grid.borderWidth : 0;\r\n                }\r\n            }\r\n\r\n            $.each(axes, function (_, axis) {\r\n                var axisOpts = axis.options;\r\n                axis.show = axisOpts.show == null ? axis.used : axisOpts.show;\r\n                axis.reserveSpace = axisOpts.reserveSpace == null ? axis.show : axisOpts.reserveSpace;\r\n                setRange(axis);\r\n            });\r\n\r\n            if (showGrid) {\r\n\r\n                var allocatedAxes = $.grep(axes, function (axis) {\r\n                    return axis.show || axis.reserveSpace;\r\n                });\r\n\r\n                $.each(allocatedAxes, function (_, axis) {\r\n                    // make the ticks\r\n                    setupTickGeneration(axis);\r\n                    setTicks(axis);\r\n                    snapRangeToTicks(axis, axis.ticks);\r\n                    // find labelWidth/Height for axis\r\n                    measureTickLabels(axis);\r\n                });\r\n\r\n                // with all dimensions calculated, we can compute the\r\n                // axis bounding boxes, start from the outside\r\n                // (reverse order)\r\n                for (i = allocatedAxes.length - 1; i >= 0; --i)\r\n                    allocateAxisBoxFirstPhase(allocatedAxes[i]);\r\n\r\n                // make sure we\'ve got enough space for things that\r\n                // might stick out\r\n                adjustLayoutForThingsStickingOut();\r\n\r\n                $.each(allocatedAxes, function (_, axis) {\r\n                    allocateAxisBoxSecondPhase(axis);\r\n                });\r\n            }\r\n\r\n            plotWidth = surface.width - plotOffset.left - plotOffset.right;\r\n            plotHeight = surface.height - plotOffset.bottom - plotOffset.top;\r\n\r\n            // now we got the proper plot dimensions, we can compute the scaling\r\n            $.each(axes, function (_, axis) {\r\n                setTransformationHelpers(axis);\r\n            });\r\n\r\n            if (showGrid) {\r\n                drawAxisLabels();\r\n            }\r\n\r\n            insertLegend();\r\n        }\r\n\r\n        function setRange(axis) {\r\n            var opts = axis.options,\r\n                min = +(opts.min != null ? opts.min : axis.datamin),\r\n                max = +(opts.max != null ? opts.max : axis.datamax),\r\n                delta = max - min;\r\n\r\n            if (delta == 0.0) {\r\n                // degenerate case\r\n                var widen = max == 0 ? 1 : 0.01;\r\n\r\n                if (opts.min == null)\r\n                    min -= widen;\r\n                // always widen max if we couldn\'t widen min to ensure we\r\n                // don\'t fall into min == max which doesn\'t work\r\n                if (opts.max == null || opts.min != null)\r\n                    max += widen;\r\n            }\r\n            else {\r\n                // consider autoscaling\r\n                var margin = opts.autoscaleMargin;\r\n                if (margin != null) {\r\n                    if (opts.min == null) {\r\n                        min -= delta * margin;\r\n                        // make sure we don\'t go below zero if all values\r\n                        // are positive\r\n                        if (min < 0 && axis.datamin != null && axis.datamin >= 0)\r\n                            min = 0;\r\n                    }\r\n                    if (opts.max == null) {\r\n                        max += delta * margin;\r\n                        if (max > 0 && axis.datamax != null && axis.datamax <= 0)\r\n                            max = 0;\r\n                    }\r\n                }\r\n            }\r\n            axis.min = min;\r\n            axis.max = max;\r\n        }\r\n\r\n        function setupTickGeneration(axis) {\r\n            var opts = axis.options;\r\n\r\n            // estimate number of ticks\r\n            var noTicks;\r\n            if (typeof opts.ticks == "number" && opts.ticks > 0)\r\n                noTicks = opts.ticks;\r\n            else\r\n                // heuristic based on the model a*sqrt(x) fitted to\r\n                // some data points that seemed reasonable\r\n                noTicks = 0.3 * Math.sqrt(axis.direction == "x" ? surface.width : surface.height);\r\n\r\n            var delta = (axis.max - axis.min) / noTicks,\r\n                dec = -Math.floor(Math.log(delta) / Math.LN10),\r\n                maxDec = opts.tickDecimals;\r\n\r\n            if (maxDec != null && dec > maxDec) {\r\n                dec = maxDec;\r\n            }\r\n\r\n            var magn = Math.pow(10, -dec),\r\n                norm = delta / magn, // norm is between 1.0 and 10.0\r\n                size;\r\n\r\n            if (norm < 1.5) {\r\n                size = 1;\r\n            } else if (norm < 3) {\r\n                size = 2;\r\n                // special case for 2.5, requires an extra decimal\r\n                if (norm > 2.25 && (maxDec == null || dec + 1 <= maxDec)) {\r\n                    size = 2.5;\r\n                    ++dec;\r\n                }\r\n            } else if (norm < 7.5) {\r\n                size = 5;\r\n            } else {\r\n                size = 10;\r\n            }\r\n\r\n            size *= magn;\r\n\r\n            if (opts.minTickSize != null && size < opts.minTickSize) {\r\n                size = opts.minTickSize;\r\n            }\r\n\r\n            axis.delta = delta;\r\n            axis.tickDecimals = Math.max(0, maxDec != null ? maxDec : dec);\r\n            axis.tickSize = opts.tickSize || size;\r\n\r\n            // Time mode was moved to a plug-in in 0.8, and since so many people use it\r\n            // we\'ll add an especially friendly reminder to make sure they included it.\r\n\r\n            if (opts.mode == "time" && !axis.tickGenerator) {\r\n                throw new Error("Time mode requires the flot.time plugin.");\r\n            }\r\n\r\n            // Flot supports base-10 axes; any other mode else is handled by a plug-in,\r\n            // like flot.time.js.\r\n\r\n            if (!axis.tickGenerator) {\r\n\r\n                axis.tickGenerator = function (axis) {\r\n\r\n                    var ticks = [],\r\n                        start = floorInBase(axis.min, axis.tickSize),\r\n                        i = 0,\r\n                        v = Number.NaN,\r\n                        prev;\r\n\r\n                    do {\r\n                        prev = v;\r\n                        v = start + i * axis.tickSize;\r\n                        ticks.push(v);\r\n                        ++i;\r\n                    } while (v < axis.max && v != prev);\r\n                    return ticks;\r\n                };\r\n\r\n				axis.tickFormatter = function (value, axis) {\r\n\r\n					var factor = axis.tickDecimals ? Math.pow(10, axis.tickDecimals) : 1;\r\n					var formatted = "" + Math.round(value * factor) / factor;\r\n\r\n					// If tickDecimals was specified, ensure that we have exactly that\r\n					// much precision; otherwise default to the value\'s own precision.\r\n\r\n					if (axis.tickDecimals != null) {\r\n						var decimal = formatted.indexOf(".");\r\n						var precision = decimal == -1 ? 0 : formatted.length - decimal - 1;\r\n						if (precision < axis.tickDecimals) {\r\n							return (precision ? formatted : formatted + ".") + ("" + factor).substr(1, axis.tickDecimals - precision);\r\n						}\r\n					}\r\n\r\n                    return formatted;\r\n                };\r\n            }\r\n\r\n            if ($.isFunction(opts.tickFormatter))\r\n                axis.tickFormatter = function (v, axis) { return "" + opts.tickFormatter(v, axis); };\r\n\r\n            if (opts.alignTicksWithAxis != null) {\r\n                var otherAxis = (axis.direction == "x" ? xaxes : yaxes)[opts.alignTicksWithAxis - 1];\r\n                if (otherAxis && otherAxis.used && otherAxis != axis) {\r\n                    // consider snapping min/max to outermost nice ticks\r\n                    var niceTicks = axis.tickGenerator(axis);\r\n                    if (niceTicks.length > 0) {\r\n                        if (opts.min == null)\r\n                            axis.min = Math.min(axis.min, niceTicks[0]);\r\n                        if (opts.max == null && niceTicks.length > 1)\r\n                            axis.max = Math.max(axis.max, niceTicks[niceTicks.length - 1]);\r\n                    }\r\n\r\n                    axis.tickGenerator = function (axis) {\r\n                        // copy ticks, scaled to this axis\r\n                        var ticks = [], v, i;\r\n                        for (i = 0; i < otherAxis.ticks.length; ++i) {\r\n                            v = (otherAxis.ticks[i].v - otherAxis.min) / (otherAxis.max - otherAxis.min);\r\n                            v = axis.min + v * (axis.max - axis.min);\r\n                            ticks.push(v);\r\n                        }\r\n                        return ticks;\r\n                    };\r\n\r\n                    // we might need an extra decimal since forced\r\n                    // ticks don\'t necessarily fit naturally\r\n                    if (!axis.mode && opts.tickDecimals == null) {\r\n                        var extraDec = Math.max(0, -Math.floor(Math.log(axis.delta) / Math.LN10) + 1),\r\n                            ts = axis.tickGenerator(axis);\r\n\r\n                        // only proceed if the tick interval rounded\r\n                        // with an extra decimal doesn\'t give us a\r\n                        // zero at end\r\n                        if (!(ts.length > 1 && /\\..*0$/.test((ts[1] - ts[0]).toFixed(extraDec))))\r\n                            axis.tickDecimals = extraDec;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function setTicks(axis) {\r\n            var oticks = axis.options.ticks, ticks = [];\r\n            if (oticks == null || (typeof oticks == "number" && oticks > 0))\r\n                ticks = axis.tickGenerator(axis);\r\n            else if (oticks) {\r\n                if ($.isFunction(oticks))\r\n                    // generate the ticks\r\n                    ticks = oticks(axis);\r\n                else\r\n                    ticks = oticks;\r\n            }\r\n\r\n            // clean up/labelify the supplied ticks, copy them over\r\n            var i, v;\r\n            axis.ticks = [];\r\n            for (i = 0; i < ticks.length; ++i) {\r\n                var label = null;\r\n                var t = ticks[i];\r\n                if (typeof t == "object") {\r\n                    v = +t[0];\r\n                    if (t.length > 1)\r\n                        label = t[1];\r\n                }\r\n                else\r\n                    v = +t;\r\n                if (label == null)\r\n                    label = axis.tickFormatter(v, axis);\r\n                if (!isNaN(v))\r\n                    axis.ticks.push({ v: v, label: label });\r\n            }\r\n        }\r\n\r\n        function snapRangeToTicks(axis, ticks) {\r\n            if (axis.options.autoscaleMargin && ticks.length > 0) {\r\n                // snap to ticks\r\n                if (axis.options.min == null)\r\n                    axis.min = Math.min(axis.min, ticks[0].v);\r\n                if (axis.options.max == null && ticks.length > 1)\r\n                    axis.max = Math.max(axis.max, ticks[ticks.length - 1].v);\r\n            }\r\n        }\r\n\r\n        function draw() {\r\n\r\n            surface.clear();\r\n\r\n            executeHooks(hooks.drawBackground, [ctx]);\r\n\r\n            var grid = options.grid;\r\n\r\n            // draw background, if any\r\n            if (grid.show && grid.backgroundColor)\r\n                drawBackground();\r\n\r\n            if (grid.show && !grid.aboveData) {\r\n                drawGrid();\r\n            }\r\n\r\n            for (var i = 0; i < series.length; ++i) {\r\n                executeHooks(hooks.drawSeries, [ctx, series[i]]);\r\n                drawSeries(series[i]);\r\n            }\r\n\r\n            executeHooks(hooks.draw, [ctx]);\r\n\r\n            if (grid.show && grid.aboveData) {\r\n                drawGrid();\r\n            }\r\n\r\n            surface.render();\r\n\r\n            // A draw implies that either the axes or data have changed, so we\r\n            // should probably update the overlay highlights as well.\r\n\r\n            triggerRedrawOverlay();\r\n        }\r\n\r\n        function extractRange(ranges, coord) {\r\n            var axis, from, to, key, axes = allAxes();\r\n\r\n            for (var i = 0; i < axes.length; ++i) {\r\n                axis = axes[i];\r\n                if (axis.direction == coord) {\r\n                    key = coord + axis.n + "axis";\r\n                    if (!ranges[key] && axis.n == 1)\r\n                        key = coord + "axis"; // support x1axis as xaxis\r\n                    if (ranges[key]) {\r\n                        from = ranges[key].from;\r\n                        to = ranges[key].to;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // backwards-compat stuff - to be removed in future\r\n            if (!ranges[key]) {\r\n                axis = coord == "x" ? xaxes[0] : yaxes[0];\r\n                from = ranges[coord + "1"];\r\n                to = ranges[coord + "2"];\r\n            }\r\n\r\n            // auto-reverse as an added bonus\r\n            if (from != null && to != null && from > to) {\r\n                var tmp = from;\r\n                from = to;\r\n                to = tmp;\r\n            }\r\n\r\n            return { from: from, to: to, axis: axis };\r\n        }\r\n\r\n        function drawBackground() {\r\n            ctx.save();\r\n            ctx.translate(plotOffset.left, plotOffset.top);\r\n\r\n            ctx.fillStyle = getColorOrGradient(options.grid.backgroundColor, plotHeight, 0, "rgba(255, 255, 255, 0)");\r\n            ctx.fillRect(0, 0, plotWidth, plotHeight);\r\n            ctx.restore();\r\n        }\r\n\r\n        function drawGrid() {\r\n            var i, axes, bw, bc;\r\n\r\n            ctx.save();\r\n            ctx.translate(plotOffset.left, plotOffset.top);\r\n\r\n            // draw markings\r\n            var markings = options.grid.markings;\r\n            if (markings) {\r\n                if ($.isFunction(markings)) {\r\n                    axes = plot.getAxes();\r\n                    // xmin etc. is backwards compatibility, to be\r\n                    // removed in the future\r\n                    axes.xmin = axes.xaxis.min;\r\n                    axes.xmax = axes.xaxis.max;\r\n                    axes.ymin = axes.yaxis.min;\r\n                    axes.ymax = axes.yaxis.max;\r\n\r\n                    markings = markings(axes);\r\n                }\r\n\r\n                for (i = 0; i < markings.length; ++i) {\r\n                    var m = markings[i],\r\n                        xrange = extractRange(m, "x"),\r\n                        yrange = extractRange(m, "y");\r\n\r\n                    // fill in missing\r\n                    if (xrange.from == null)\r\n                        xrange.from = xrange.axis.min;\r\n                    if (xrange.to == null)\r\n                        xrange.to = xrange.axis.max;\r\n                    if (yrange.from == null)\r\n                        yrange.from = yrange.axis.min;\r\n                    if (yrange.to == null)\r\n                        yrange.to = yrange.axis.max;\r\n\r\n                    // clip\r\n                    if (xrange.to < xrange.axis.min || xrange.from > xrange.axis.max ||\r\n                        yrange.to < yrange.axis.min || yrange.from > yrange.axis.max)\r\n                        continue;\r\n\r\n                    xrange.from = Math.max(xrange.from, xrange.axis.min);\r\n                    xrange.to = Math.min(xrange.to, xrange.axis.max);\r\n                    yrange.from = Math.max(yrange.from, yrange.axis.min);\r\n                    yrange.to = Math.min(yrange.to, yrange.axis.max);\r\n\r\n                    var xequal = xrange.from === xrange.to,\r\n                        yequal = yrange.from === yrange.to;\r\n\r\n                    if (xequal && yequal) {\r\n                        continue;\r\n                    }\r\n\r\n                    // then draw\r\n                    xrange.from = Math.floor(xrange.axis.p2c(xrange.from));\r\n                    xrange.to = Math.floor(xrange.axis.p2c(xrange.to));\r\n                    yrange.from = Math.floor(yrange.axis.p2c(yrange.from));\r\n                    yrange.to = Math.floor(yrange.axis.p2c(yrange.to));\r\n\r\n                    if (xequal || yequal) {\r\n                        var lineWidth = m.lineWidth || options.grid.markingsLineWidth,\r\n                            subPixel = lineWidth % 2 ? 0.5 : 0;\r\n                        ctx.beginPath();\r\n                        ctx.strokeStyle = m.color || options.grid.markingsColor;\r\n                        ctx.lineWidth = lineWidth;\r\n                        if (xequal) {\r\n                            ctx.moveTo(xrange.to + subPixel, yrange.from);\r\n                            ctx.lineTo(xrange.to + subPixel, yrange.to);\r\n                        } else {\r\n                            ctx.moveTo(xrange.from, yrange.to + subPixel);\r\n                            ctx.lineTo(xrange.to, yrange.to + subPixel);                            \r\n                        }\r\n                        ctx.stroke();\r\n                    } else {\r\n                        ctx.fillStyle = m.color || options.grid.markingsColor;\r\n                        ctx.fillRect(xrange.from, yrange.to,\r\n                                     xrange.to - xrange.from,\r\n                                     yrange.from - yrange.to);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // draw the ticks\r\n            axes = allAxes();\r\n            bw = options.grid.borderWidth;\r\n\r\n            for (var j = 0; j < axes.length; ++j) {\r\n                var axis = axes[j], box = axis.box,\r\n                    t = axis.tickLength, x, y, xoff, yoff;\r\n                if (!axis.show || axis.ticks.length == 0)\r\n                    continue;\r\n\r\n                ctx.lineWidth = 1;\r\n\r\n                // find the edges\r\n                if (axis.direction == "x") {\r\n                    x = 0;\r\n                    if (t == "full")\r\n                        y = (axis.position == "top" ? 0 : plotHeight);\r\n                    else\r\n                        y = box.top - plotOffset.top + (axis.position == "top" ? box.height : 0);\r\n                }\r\n                else {\r\n                    y = 0;\r\n                    if (t == "full")\r\n                        x = (axis.position == "left" ? 0 : plotWidth);\r\n                    else\r\n                        x = box.left - plotOffset.left + (axis.position == "left" ? box.width : 0);\r\n                }\r\n\r\n                // draw tick bar\r\n                if (!axis.innermost) {\r\n                    ctx.strokeStyle = axis.options.color;\r\n                    ctx.beginPath();\r\n                    xoff = yoff = 0;\r\n                    if (axis.direction == "x")\r\n                        xoff = plotWidth + 1;\r\n                    else\r\n                        yoff = plotHeight + 1;\r\n\r\n                    if (ctx.lineWidth == 1) {\r\n                        if (axis.direction == "x") {\r\n                            y = Math.floor(y) + 0.5;\r\n                        } else {\r\n                            x = Math.floor(x) + 0.5;\r\n                        }\r\n                    }\r\n\r\n                    ctx.moveTo(x, y);\r\n                    ctx.lineTo(x + xoff, y + yoff);\r\n                    ctx.stroke();\r\n                }\r\n\r\n                // draw ticks\r\n\r\n                ctx.strokeStyle = axis.options.tickColor;\r\n\r\n                ctx.beginPath();\r\n                for (i = 0; i < axis.ticks.length; ++i) {\r\n                    var v = axis.ticks[i].v;\r\n\r\n                    xoff = yoff = 0;\r\n\r\n                    if (isNaN(v) || v < axis.min || v > axis.max\r\n                        // skip those lying on the axes if we got a border\r\n                        || (t == "full"\r\n                            && ((typeof bw == "object" && bw[axis.position] > 0) || bw > 0)\r\n                            && (v == axis.min || v == axis.max)))\r\n                        continue;\r\n\r\n                    if (axis.direction == "x") {\r\n                        x = axis.p2c(v);\r\n                        yoff = t == "full" ? -plotHeight : t;\r\n\r\n                        if (axis.position == "top")\r\n                            yoff = -yoff;\r\n                    }\r\n                    else {\r\n                        y = axis.p2c(v);\r\n                        xoff = t == "full" ? -plotWidth : t;\r\n\r\n                        if (axis.position == "left")\r\n                            xoff = -xoff;\r\n                    }\r\n\r\n                    if (ctx.lineWidth == 1) {\r\n                        if (axis.direction == "x")\r\n                            x = Math.floor(x) + 0.5;\r\n                        else\r\n                            y = Math.floor(y) + 0.5;\r\n                    }\r\n\r\n                    ctx.moveTo(x, y);\r\n                    ctx.lineTo(x + xoff, y + yoff);\r\n                }\r\n\r\n                ctx.stroke();\r\n            }\r\n\r\n\r\n            // draw border\r\n            if (bw) {\r\n                // If either borderWidth or borderColor is an object, then draw the border\r\n                // line by line instead of as one rectangle\r\n                bc = options.grid.borderColor;\r\n                if(typeof bw == "object" || typeof bc == "object") {\r\n                    if (typeof bw !== "object") {\r\n                        bw = {top: bw, right: bw, bottom: bw, left: bw};\r\n                    }\r\n                    if (typeof bc !== "object") {\r\n                        bc = {top: bc, right: bc, bottom: bc, left: bc};\r\n                    }\r\n\r\n                    if (bw.top > 0) {\r\n                        ctx.strokeStyle = bc.top;\r\n                        ctx.lineWidth = bw.top;\r\n                        ctx.beginPath();\r\n                        ctx.moveTo(0 - bw.left, 0 - bw.top/2);\r\n                        ctx.lineTo(plotWidth, 0 - bw.top/2);\r\n                        ctx.stroke();\r\n                    }\r\n\r\n                    if (bw.right > 0) {\r\n                        ctx.strokeStyle = bc.right;\r\n                        ctx.lineWidth = bw.right;\r\n                        ctx.beginPath();\r\n                        ctx.moveTo(plotWidth + bw.right / 2, 0 - bw.top);\r\n                        ctx.lineTo(plotWidth + bw.right / 2, plotHeight);\r\n                        ctx.stroke();\r\n                    }\r\n\r\n                    if (bw.bottom > 0) {\r\n                        ctx.strokeStyle = bc.bottom;\r\n                        ctx.lineWidth = bw.bottom;\r\n                        ctx.beginPath();\r\n                        ctx.moveTo(plotWidth + bw.right, plotHeight + bw.bottom / 2);\r\n                        ctx.lineTo(0, plotHeight + bw.bottom / 2);\r\n                        ctx.stroke();\r\n                    }\r\n\r\n                    if (bw.left > 0) {\r\n                        ctx.strokeStyle = bc.left;\r\n                        ctx.lineWidth = bw.left;\r\n                        ctx.beginPath();\r\n                        ctx.moveTo(0 - bw.left/2, plotHeight + bw.bottom);\r\n                        ctx.lineTo(0- bw.left/2, 0);\r\n                        ctx.stroke();\r\n                    }\r\n                }\r\n                else {\r\n                    ctx.lineWidth = bw;\r\n                    ctx.strokeStyle = options.grid.borderColor;\r\n                    ctx.strokeRect(-bw/2, -bw/2, plotWidth + bw, plotHeight + bw);\r\n                }\r\n            }\r\n\r\n            ctx.restore();\r\n        }\r\n\r\n        function drawAxisLabels() {\r\n\r\n            $.each(allAxes(), function (_, axis) {\r\n                var box = axis.box,\r\n                    legacyStyles = axis.direction + "Axis " + axis.direction + axis.n + "Axis",\r\n                    layer = "flot-" + axis.direction + "-axis flot-" + axis.direction + axis.n + "-axis " + legacyStyles,\r\n                    font = axis.options.font || "flot-tick-label tickLabel",\r\n                    tick, x, y, halign, valign;\r\n\r\n                // Remove text before checking for axis.show and ticks.length;\r\n                // otherwise plugins, like flot-tickrotor, that draw their own\r\n                // tick labels will end up with both theirs and the defaults.\r\n\r\n                surface.removeText(layer);\r\n\r\n                if (!axis.show || axis.ticks.length == 0)\r\n                    return;\r\n\r\n                for (var i = 0; i < axis.ticks.length; ++i) {\r\n\r\n                    tick = axis.ticks[i];\r\n                    if (!tick.label || tick.v < axis.min || tick.v > axis.max)\r\n                        continue;\r\n\r\n                    if (axis.direction == "x") {\r\n                        halign = "center";\r\n                        x = plotOffset.left + axis.p2c(tick.v);\r\n                        if (axis.position == "bottom") {\r\n                            y = box.top + box.padding;\r\n                        } else {\r\n                            y = box.top + box.height - box.padding;\r\n                            valign = "bottom";\r\n                        }\r\n                    } else {\r\n                        valign = "middle";\r\n                        y = plotOffset.top + axis.p2c(tick.v);\r\n                        if (axis.position == "left") {\r\n                            x = box.left + box.width - box.padding;\r\n                            halign = "right";\r\n                        } else {\r\n                            x = box.left + box.padding;\r\n                        }\r\n                    }\r\n\r\n                    surface.addText(layer, x, y, tick.label, font, null, null, halign, valign);\r\n                }\r\n            });\r\n        }\r\n\r\n        function drawSeries(series) {\r\n            if (series.lines.show)\r\n                drawSeriesLines(series);\r\n            if (series.bars.show)\r\n                drawSeriesBars(series);\r\n            if (series.points.show)\r\n                drawSeriesPoints(series);\r\n        }\r\n\r\n        function drawSeriesLines(series) {\r\n            function plotLine(datapoints, xoffset, yoffset, axisx, axisy) {\r\n                var points = datapoints.points,\r\n                    ps = datapoints.pointsize,\r\n                    prevx = null, prevy = null;\r\n\r\n                ctx.beginPath();\r\n                for (var i = ps; i < points.length; i += ps) {\r\n                    var x1 = points[i - ps], y1 = points[i - ps + 1],\r\n                        x2 = points[i], y2 = points[i + 1];\r\n\r\n                    if (x1 == null || x2 == null)\r\n                        continue;\r\n\r\n                    // clip with ymin\r\n                    if (y1 <= y2 && y1 < axisy.min) {\r\n                        if (y2 < axisy.min)\r\n                            continue;   // line segment is outside\r\n                        // compute new intersection point\r\n                        x1 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\r\n                        y1 = axisy.min;\r\n                    }\r\n                    else if (y2 <= y1 && y2 < axisy.min) {\r\n                        if (y1 < axisy.min)\r\n                            continue;\r\n                        x2 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\r\n                        y2 = axisy.min;\r\n                    }\r\n\r\n                    // clip with ymax\r\n                    if (y1 >= y2 && y1 > axisy.max) {\r\n                        if (y2 > axisy.max)\r\n                            continue;\r\n                        x1 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\r\n                        y1 = axisy.max;\r\n                    }\r\n                    else if (y2 >= y1 && y2 > axisy.max) {\r\n                        if (y1 > axisy.max)\r\n                            continue;\r\n                        x2 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\r\n                        y2 = axisy.max;\r\n                    }\r\n\r\n                    // clip with xmin\r\n                    if (x1 <= x2 && x1 < axisx.min) {\r\n                        if (x2 < axisx.min)\r\n                            continue;\r\n                        y1 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\r\n                        x1 = axisx.min;\r\n                    }\r\n                    else if (x2 <= x1 && x2 < axisx.min) {\r\n                        if (x1 < axisx.min)\r\n                            continue;\r\n                        y2 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\r\n                        x2 = axisx.min;\r\n                    }\r\n\r\n                    // clip with xmax\r\n                    if (x1 >= x2 && x1 > axisx.max) {\r\n                        if (x2 > axisx.max)\r\n                            continue;\r\n                        y1 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\r\n                        x1 = axisx.max;\r\n                    }\r\n                    else if (x2 >= x1 && x2 > axisx.max) {\r\n                        if (x1 > axisx.max)\r\n                            continue;\r\n                        y2 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\r\n                        x2 = axisx.max;\r\n                    }\r\n\r\n                    if (x1 != prevx || y1 != prevy)\r\n                        ctx.moveTo(axisx.p2c(x1) + xoffset, axisy.p2c(y1) + yoffset);\r\n\r\n                    prevx = x2;\r\n                    prevy = y2;\r\n                    ctx.lineTo(axisx.p2c(x2) + xoffset, axisy.p2c(y2) + yoffset);\r\n                }\r\n                ctx.stroke();\r\n            }\r\n\r\n            function plotLineArea(datapoints, axisx, axisy) {\r\n                var points = datapoints.points,\r\n                    ps = datapoints.pointsize,\r\n                    bottom = Math.min(Math.max(0, axisy.min), axisy.max),\r\n                    i = 0, top, areaOpen = false,\r\n                    ypos = 1, segmentStart = 0, segmentEnd = 0;\r\n\r\n                // we process each segment in two turns, first forward\r\n                // direction to sketch out top, then once we hit the\r\n                // end we go backwards to sketch the bottom\r\n                while (true) {\r\n                    if (ps > 0 && i > points.length + ps)\r\n                        break;\r\n\r\n                    i += ps; // ps is negative if going backwards\r\n\r\n                    var x1 = points[i - ps],\r\n                        y1 = points[i - ps + ypos],\r\n                        x2 = points[i], y2 = points[i + ypos];\r\n\r\n                    if (areaOpen) {\r\n                        if (ps > 0 && x1 != null && x2 == null) {\r\n                            // at turning point\r\n                            segmentEnd = i;\r\n                            ps = -ps;\r\n                            ypos = 2;\r\n                            continue;\r\n                        }\r\n\r\n                        if (ps < 0 && i == segmentStart + ps) {\r\n                            // done with the reverse sweep\r\n                            ctx.fill();\r\n                            areaOpen = false;\r\n                            ps = -ps;\r\n                            ypos = 1;\r\n                            i = segmentStart = segmentEnd + ps;\r\n                            continue;\r\n                        }\r\n                    }\r\n\r\n                    if (x1 == null || x2 == null)\r\n                        continue;\r\n\r\n                    // clip x values\r\n\r\n                    // clip with xmin\r\n                    if (x1 <= x2 && x1 < axisx.min) {\r\n                        if (x2 < axisx.min)\r\n                            continue;\r\n                        y1 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\r\n                        x1 = axisx.min;\r\n                    }\r\n                    else if (x2 <= x1 && x2 < axisx.min) {\r\n                        if (x1 < axisx.min)\r\n                            continue;\r\n                        y2 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\r\n                        x2 = axisx.min;\r\n                    }\r\n\r\n                    // clip with xmax\r\n                    if (x1 >= x2 && x1 > axisx.max) {\r\n                        if (x2 > axisx.max)\r\n                            continue;\r\n                        y1 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\r\n                        x1 = axisx.max;\r\n                    }\r\n                    else if (x2 >= x1 && x2 > axisx.max) {\r\n                        if (x1 > axisx.max)\r\n                            continue;\r\n                        y2 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\r\n                        x2 = axisx.max;\r\n                    }\r\n\r\n                    if (!areaOpen) {\r\n                        // open area\r\n                        ctx.beginPath();\r\n                        ctx.moveTo(axisx.p2c(x1), axisy.p2c(bottom));\r\n                        areaOpen = true;\r\n                    }\r\n\r\n                    // now first check the case where both is outside\r\n                    if (y1 >= axisy.max && y2 >= axisy.max) {\r\n                        ctx.lineTo(axisx.p2c(x1), axisy.p2c(axisy.max));\r\n                        ctx.lineTo(axisx.p2c(x2), axisy.p2c(axisy.max));\r\n                        continue;\r\n                    }\r\n                    else if (y1 <= axisy.min && y2 <= axisy.min) {\r\n                        ctx.lineTo(axisx.p2c(x1), axisy.p2c(axisy.min));\r\n                        ctx.lineTo(axisx.p2c(x2), axisy.p2c(axisy.min));\r\n                        continue;\r\n                    }\r\n\r\n                    // else it\'s a bit more complicated, there might\r\n                    // be a flat maxed out rectangle first, then a\r\n                    // triangular cutout or reverse; to find these\r\n                    // keep track of the current x values\r\n                    var x1old = x1, x2old = x2;\r\n\r\n                    // clip the y values, without shortcutting, we\r\n                    // go through all cases in turn\r\n\r\n                    // clip with ymin\r\n                    if (y1 <= y2 && y1 < axisy.min && y2 >= axisy.min) {\r\n                        x1 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\r\n                        y1 = axisy.min;\r\n                    }\r\n                    else if (y2 <= y1 && y2 < axisy.min && y1 >= axisy.min) {\r\n                        x2 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\r\n                        y2 = axisy.min;\r\n                    }\r\n\r\n                    // clip with ymax\r\n                    if (y1 >= y2 && y1 > axisy.max && y2 <= axisy.max) {\r\n                        x1 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\r\n                        y1 = axisy.max;\r\n                    }\r\n                    else if (y2 >= y1 && y2 > axisy.max && y1 <= axisy.max) {\r\n                        x2 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\r\n                        y2 = axisy.max;\r\n                    }\r\n\r\n                    // if the x value was changed we got a rectangle\r\n                    // to fill\r\n                    if (x1 != x1old) {\r\n                        ctx.lineTo(axisx.p2c(x1old), axisy.p2c(y1));\r\n                        // it goes to (x1, y1), but we fill that below\r\n                    }\r\n\r\n                    // fill triangular section, this sometimes result\r\n                    // in redundant points if (x1, y1) hasn\'t changed\r\n                    // from previous line to, but we just ignore that\r\n                    ctx.lineTo(axisx.p2c(x1), axisy.p2c(y1));\r\n                    ctx.lineTo(axisx.p2c(x2), axisy.p2c(y2));\r\n\r\n                    // fill the other rectangle if it\'s there\r\n                    if (x2 != x2old) {\r\n                        ctx.lineTo(axisx.p2c(x2), axisy.p2c(y2));\r\n                        ctx.lineTo(axisx.p2c(x2old), axisy.p2c(y2));\r\n                    }\r\n                }\r\n            }\r\n\r\n            ctx.save();\r\n            ctx.translate(plotOffset.left, plotOffset.top);\r\n            ctx.lineJoin = "round";\r\n\r\n            var lw = series.lines.lineWidth,\r\n                sw = series.shadowSize;\r\n            // FIXME: consider another form of shadow when filling is turned on\r\n            if (lw > 0 && sw > 0) {\r\n                // draw shadow as a thick and thin line with transparency\r\n                ctx.lineWidth = sw;\r\n                ctx.strokeStyle = "rgba(0,0,0,0.1)";\r\n                // position shadow at angle from the mid of line\r\n                var angle = Math.PI/18;\r\n                plotLine(series.datapoints, Math.sin(angle) * (lw/2 + sw/2), Math.cos(angle) * (lw/2 + sw/2), series.xaxis, series.yaxis);\r\n                ctx.lineWidth = sw/2;\r\n                plotLine(series.datapoints, Math.sin(angle) * (lw/2 + sw/4), Math.cos(angle) * (lw/2 + sw/4), series.xaxis, series.yaxis);\r\n            }\r\n\r\n            ctx.lineWidth = lw;\r\n            ctx.strokeStyle = series.color;\r\n            var fillStyle = getFillStyle(series.lines, series.color, 0, plotHeight);\r\n            if (fillStyle) {\r\n                ctx.fillStyle = fillStyle;\r\n                plotLineArea(series.datapoints, series.xaxis, series.yaxis);\r\n            }\r\n\r\n            if (lw > 0)\r\n                plotLine(series.datapoints, 0, 0, series.xaxis, series.yaxis);\r\n            ctx.restore();\r\n        }\r\n\r\n        function drawSeriesPoints(series) {\r\n            function plotPoints(datapoints, radius, fillStyle, offset, shadow, axisx, axisy, symbol) {\r\n                var points = datapoints.points, ps = datapoints.pointsize;\r\n\r\n                for (var i = 0; i < points.length; i += ps) {\r\n                    var x = points[i], y = points[i + 1];\r\n                    if (x == null || x < axisx.min || x > axisx.max || y < axisy.min || y > axisy.max)\r\n                        continue;\r\n\r\n                    ctx.beginPath();\r\n                    x = axisx.p2c(x);\r\n                    y = axisy.p2c(y) + offset;\r\n                    if (symbol == "circle")\r\n                        ctx.arc(x, y, radius, 0, shadow ? Math.PI : Math.PI * 2, false);\r\n                    else\r\n                        symbol(ctx, x, y, radius, shadow);\r\n                    ctx.closePath();\r\n\r\n                    if (fillStyle) {\r\n                        ctx.fillStyle = fillStyle;\r\n                        ctx.fill();\r\n                    }\r\n                    ctx.stroke();\r\n                }\r\n            }\r\n\r\n            ctx.save();\r\n            ctx.translate(plotOffset.left, plotOffset.top);\r\n\r\n            var lw = series.points.lineWidth,\r\n                sw = series.shadowSize,\r\n                radius = series.points.radius,\r\n                symbol = series.points.symbol;\r\n\r\n            // If the user sets the line width to 0, we change it to a very \r\n            // small value. A line width of 0 seems to force the default of 1.\r\n            // Doing the conditional here allows the shadow setting to still be \r\n            // optional even with a lineWidth of 0.\r\n\r\n            if( lw == 0 )\r\n                lw = 0.0001;\r\n\r\n            if (lw > 0 && sw > 0) {\r\n                // draw shadow in two steps\r\n                var w = sw / 2;\r\n                ctx.lineWidth = w;\r\n                ctx.strokeStyle = "rgba(0,0,0,0.1)";\r\n                plotPoints(series.datapoints, radius, null, w + w/2, true,\r\n                           series.xaxis, series.yaxis, symbol);\r\n\r\n                ctx.strokeStyle = "rgba(0,0,0,0.2)";\r\n                plotPoints(series.datapoints, radius, null, w/2, true,\r\n                           series.xaxis, series.yaxis, symbol);\r\n            }\r\n\r\n            ctx.lineWidth = lw;\r\n            ctx.strokeStyle = series.color;\r\n            plotPoints(series.datapoints, radius,\r\n                       getFillStyle(series.points, series.color), 0, false,\r\n                       series.xaxis, series.yaxis, symbol);\r\n            ctx.restore();\r\n        }\r\n\r\n        function drawBar(x, y, b, barLeft, barRight, fillStyleCallback, axisx, axisy, c, horizontal, lineWidth) {\r\n            var left, right, bottom, top,\r\n                drawLeft, drawRight, drawTop, drawBottom,\r\n                tmp;\r\n\r\n            // in horizontal mode, we start the bar from the left\r\n            // instead of from the bottom so it appears to be\r\n            // horizontal rather than vertical\r\n            if (horizontal) {\r\n                drawBottom = drawRight = drawTop = true;\r\n                drawLeft = false;\r\n                left = b;\r\n                right = x;\r\n                top = y + barLeft;\r\n                bottom = y + barRight;\r\n\r\n                // account for negative bars\r\n                if (right < left) {\r\n                    tmp = right;\r\n                    right = left;\r\n                    left = tmp;\r\n                    drawLeft = true;\r\n                    drawRight = false;\r\n                }\r\n            }\r\n            else {\r\n                drawLeft = drawRight = drawTop = true;\r\n                drawBottom = false;\r\n                left = x + barLeft;\r\n                right = x + barRight;\r\n                bottom = b;\r\n                top = y;\r\n\r\n                // account for negative bars\r\n                if (top < bottom) {\r\n                    tmp = top;\r\n                    top = bottom;\r\n                    bottom = tmp;\r\n                    drawBottom = true;\r\n                    drawTop = false;\r\n                }\r\n            }\r\n\r\n            // clip\r\n            if (right < axisx.min || left > axisx.max ||\r\n                top < axisy.min || bottom > axisy.max)\r\n                return;\r\n\r\n            if (left < axisx.min) {\r\n                left = axisx.min;\r\n                drawLeft = false;\r\n            }\r\n\r\n            if (right > axisx.max) {\r\n                right = axisx.max;\r\n                drawRight = false;\r\n            }\r\n\r\n            if (bottom < axisy.min) {\r\n                bottom = axisy.min;\r\n                drawBottom = false;\r\n            }\r\n\r\n            if (top > axisy.max) {\r\n                top = axisy.max;\r\n                drawTop = false;\r\n            }\r\n\r\n            left = axisx.p2c(left);\r\n            bottom = axisy.p2c(bottom);\r\n            right = axisx.p2c(right);\r\n            top = axisy.p2c(top);\r\n\r\n            // fill the bar\r\n            if (fillStyleCallback) {\r\n                c.fillStyle = fillStyleCallback(bottom, top);\r\n                c.fillRect(left, top, right - left, bottom - top)\r\n            }\r\n\r\n            // draw outline\r\n            if (lineWidth > 0 && (drawLeft || drawRight || drawTop || drawBottom)) {\r\n                c.beginPath();\r\n\r\n                // FIXME: inline moveTo is buggy with excanvas\r\n                c.moveTo(left, bottom);\r\n                if (drawLeft)\r\n                    c.lineTo(left, top);\r\n                else\r\n                    c.moveTo(left, top);\r\n                if (drawTop)\r\n                    c.lineTo(right, top);\r\n                else\r\n                    c.moveTo(right, top);\r\n                if (drawRight)\r\n                    c.lineTo(right, bottom);\r\n                else\r\n                    c.moveTo(right, bottom);\r\n                if (drawBottom)\r\n                    c.lineTo(left, bottom);\r\n                else\r\n                    c.moveTo(left, bottom);\r\n                c.stroke();\r\n            }\r\n        }\r\n\r\n        function drawSeriesBars(series) {\r\n            function plotBars(datapoints, barLeft, barRight, fillStyleCallback, axisx, axisy) {\r\n                var points = datapoints.points, ps = datapoints.pointsize;\r\n\r\n                for (var i = 0; i < points.length; i += ps) {\r\n                    if (points[i] == null)\r\n                        continue;\r\n                    drawBar(points[i], points[i + 1], points[i + 2], barLeft, barRight, fillStyleCallback, axisx, axisy, ctx, series.bars.horizontal, series.bars.lineWidth);\r\n                }\r\n            }\r\n\r\n            ctx.save();\r\n            ctx.translate(plotOffset.left, plotOffset.top);\r\n\r\n            // FIXME: figure out a way to add shadows (for instance along the right edge)\r\n            ctx.lineWidth = series.bars.lineWidth;\r\n            ctx.strokeStyle = series.color;\r\n\r\n            var barLeft;\r\n\r\n            switch (series.bars.align) {\r\n                case "left":\r\n                    barLeft = 0;\r\n                    break;\r\n                case "right":\r\n                    barLeft = -series.bars.barWidth;\r\n                    break;\r\n                default:\r\n                    barLeft = -series.bars.barWidth / 2;\r\n            }\r\n\r\n            var fillStyleCallback = series.bars.fill ? function (bottom, top) { return getFillStyle(series.bars, series.color, bottom, top); } : null;\r\n            plotBars(series.datapoints, barLeft, barLeft + series.bars.barWidth, fillStyleCallback, series.xaxis, series.yaxis);\r\n            ctx.restore();\r\n        }\r\n\r\n        function getFillStyle(filloptions, seriesColor, bottom, top) {\r\n            var fill = filloptions.fill;\r\n            if (!fill)\r\n                return null;\r\n\r\n            if (filloptions.fillColor)\r\n                return getColorOrGradient(filloptions.fillColor, bottom, top, seriesColor);\r\n\r\n            var c = $.color.parse(seriesColor);\r\n            c.a = typeof fill == "number" ? fill : 0.4;\r\n            c.normalize();\r\n            return c.toString();\r\n        }\r\n\r\n        function insertLegend() {\r\n\r\n            if (options.legend.container != null) {\r\n                $(options.legend.container).html("");\r\n            } else {\r\n                placeholder.find(".legend").remove();\r\n            }\r\n\r\n            if (!options.legend.show) {\r\n                return;\r\n            }\r\n\r\n            var fragments = [], entries = [], rowStarted = false,\r\n                lf = options.legend.labelFormatter, s, label;\r\n\r\n            // Build a list of legend entries, with each having a label and a color\r\n\r\n            for (var i = 0; i < series.length; ++i) {\r\n                s = series[i];\r\n                if (s.label) {\r\n                    label = lf ? lf(s.label, s) : s.label;\r\n                    if (label) {\r\n                        entries.push({\r\n                            label: label,\r\n                            color: s.color\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Sort the legend using either the default or a custom comparator\r\n\r\n            if (options.legend.sorted) {\r\n                if ($.isFunction(options.legend.sorted)) {\r\n                    entries.sort(options.legend.sorted);\r\n                } else if (options.legend.sorted == "reverse") {\r\n                	entries.reverse();\r\n                } else {\r\n                    var ascending = options.legend.sorted != "descending";\r\n                    entries.sort(function(a, b) {\r\n                        return a.label == b.label ? 0 : (\r\n                            (a.label < b.label) != ascending ? 1 : -1   // Logical XOR\r\n                        );\r\n                    });\r\n                }\r\n            }\r\n\r\n            // Generate markup for the list of entries, in their final order\r\n\r\n            for (var i = 0; i < entries.length; ++i) {\r\n\r\n                var entry = entries[i];\r\n\r\n                if (i % options.legend.noColumns == 0) {\r\n                    if (rowStarted)\r\n                        fragments.push(\'</tr>\');\r\n                    fragments.push(\'<tr>\');\r\n                    rowStarted = true;\r\n                }\r\n\r\n                fragments.push(\r\n                    \'<td class="legendColorBox"><div style="border:1px solid \' + options.legend.labelBoxBorderColor + \';padding:1px"><div style="width:4px;height:0;border:5px solid \' + entry.color + \';overflow:hidden"></div></div></td>\' +\r\n                    \'<td class="legendLabel">\' + entry.label + \'</td>\'\r\n                );\r\n            }\r\n\r\n            if (rowStarted)\r\n                fragments.push(\'</tr>\');\r\n\r\n            if (fragments.length == 0)\r\n                return;\r\n\r\n            var table = \'<table style="font-size:smaller;color:\' + options.grid.color + \'">\' + fragments.join("") + \'</table>\';\r\n            if (options.legend.container != null)\r\n                $(options.legend.container).html(table);\r\n            else {\r\n                var pos = "",\r\n                    p = options.legend.position,\r\n                    m = options.legend.margin;\r\n                if (m[0] == null)\r\n                    m = [m, m];\r\n                if (p.charAt(0) == "n")\r\n                    pos += \'top:\' + (m[1] + plotOffset.top) + \'px;\';\r\n                else if (p.charAt(0) == "s")\r\n                    pos += \'bottom:\' + (m[1] + plotOffset.bottom) + \'px;\';\r\n                if (p.charAt(1) == "e")\r\n                    pos += \'right:\' + (m[0] + plotOffset.right) + \'px;\';\r\n                else if (p.charAt(1) == "w")\r\n                    pos += \'left:\' + (m[0] + plotOffset.left) + \'px;\';\r\n                var legend = $(\'<div class="legend">\' + table.replace(\'style="\', \'style="position:absolute;\' + pos +\';\') + \'</div>\').appendTo(placeholder);\r\n                if (options.legend.backgroundOpacity != 0.0) {\r\n                    // put in the transparent background\r\n                    // separately to avoid blended labels and\r\n                    // label boxes\r\n                    var c = options.legend.backgroundColor;\r\n                    if (c == null) {\r\n                        c = options.grid.backgroundColor;\r\n                        if (c && typeof c == "string")\r\n                            c = $.color.parse(c);\r\n                        else\r\n                            c = $.color.extract(legend, \'background-color\');\r\n                        c.a = 1;\r\n                        c = c.toString();\r\n                    }\r\n                    var div = legend.children();\r\n                    $(\'<div style="position:absolute;width:\' + div.width() + \'px;height:\' + div.height() + \'px;\' + pos +\'background-color:\' + c + \';"> </div>\').prependTo(legend).css(\'opacity\', options.legend.backgroundOpacity);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        // interactive features\r\n\r\n        var highlights = [],\r\n            redrawTimeout = null;\r\n\r\n        // returns the data item the mouse is over, or null if none is found\r\n        function findNearbyItem(mouseX, mouseY, seriesFilter) {\r\n            var maxDistance = options.grid.mouseActiveRadius,\r\n                smallestDistance = maxDistance * maxDistance + 1,\r\n                item = null, foundPoint = false, i, j, ps;\r\n\r\n            for (i = series.length - 1; i >= 0; --i) {\r\n                if (!seriesFilter(series[i]))\r\n                    continue;\r\n\r\n                var s = series[i],\r\n                    axisx = s.xaxis,\r\n                    axisy = s.yaxis,\r\n                    points = s.datapoints.points,\r\n                    mx = axisx.c2p(mouseX), // precompute some stuff to make the loop faster\r\n                    my = axisy.c2p(mouseY),\r\n                    maxx = maxDistance / axisx.scale,\r\n                    maxy = maxDistance / axisy.scale;\r\n\r\n                ps = s.datapoints.pointsize;\r\n                // with inverse transforms, we can\'t use the maxx/maxy\r\n                // optimization, sadly\r\n                if (axisx.options.inverseTransform)\r\n                    maxx = Number.MAX_VALUE;\r\n                if (axisy.options.inverseTransform)\r\n                    maxy = Number.MAX_VALUE;\r\n\r\n                if (s.lines.show || s.points.show) {\r\n                    for (j = 0; j < points.length; j += ps) {\r\n                        var x = points[j], y = points[j + 1];\r\n                        if (x == null)\r\n                            continue;\r\n\r\n                        // For points and lines, the cursor must be within a\r\n                        // certain distance to the data point\r\n                        if (x - mx > maxx || x - mx < -maxx ||\r\n                            y - my > maxy || y - my < -maxy)\r\n                            continue;\r\n\r\n                        // We have to calculate distances in pixels, not in\r\n                        // data units, because the scales of the axes may be different\r\n                        var dx = Math.abs(axisx.p2c(x) - mouseX),\r\n                            dy = Math.abs(axisy.p2c(y) - mouseY),\r\n                            dist = dx * dx + dy * dy; // we save the sqrt\r\n\r\n                        // use <= to ensure last point takes precedence\r\n                        // (last generally means on top of)\r\n                        if (dist < smallestDistance) {\r\n                            smallestDistance = dist;\r\n                            item = [i, j / ps];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (s.bars.show && !item) { // no other point can be nearby\r\n\r\n                    var barLeft, barRight;\r\n\r\n                    switch (s.bars.align) {\r\n                        case "left":\r\n                            barLeft = 0;\r\n                            break;\r\n                        case "right":\r\n                            barLeft = -s.bars.barWidth;\r\n                            break;\r\n                        default:\r\n                            barLeft = -s.bars.barWidth / 2;\r\n                    }\r\n\r\n                    barRight = barLeft + s.bars.barWidth;\r\n\r\n                    for (j = 0; j < points.length; j += ps) {\r\n                        var x = points[j], y = points[j + 1], b = points[j + 2];\r\n                        if (x == null)\r\n                            continue;\r\n\r\n                        // for a bar graph, the cursor must be inside the bar\r\n                        if (series[i].bars.horizontal ?\r\n                            (mx <= Math.max(b, x) && mx >= Math.min(b, x) &&\r\n                             my >= y + barLeft && my <= y + barRight) :\r\n                            (mx >= x + barLeft && mx <= x + barRight &&\r\n                             my >= Math.min(b, y) && my <= Math.max(b, y)))\r\n                                item = [i, j / ps];\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (item) {\r\n                i = item[0];\r\n                j = item[1];\r\n                ps = series[i].datapoints.pointsize;\r\n\r\n                return { datapoint: series[i].datapoints.points.slice(j * ps, (j + 1) * ps),\r\n                         dataIndex: j,\r\n                         series: series[i],\r\n                         seriesIndex: i };\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        function onMouseMove(e) {\r\n            if (options.grid.hoverable)\r\n                triggerClickHoverEvent("plothover", e,\r\n                                       function (s) { return s["hoverable"] != false; });\r\n        }\r\n\r\n        function onMouseLeave(e) {\r\n            if (options.grid.hoverable)\r\n                triggerClickHoverEvent("plothover", e,\r\n                                       function (s) { return false; });\r\n        }\r\n\r\n        function onClick(e) {\r\n            triggerClickHoverEvent("plotclick", e,\r\n                                   function (s) { return s["clickable"] != false; });\r\n        }\r\n\r\n        // trigger click or hover event (they send the same parameters\r\n        // so we share their code)\r\n        function triggerClickHoverEvent(eventname, event, seriesFilter) {\r\n            var offset = eventHolder.offset(),\r\n                canvasX = event.pageX - offset.left - plotOffset.left,\r\n                canvasY = event.pageY - offset.top - plotOffset.top,\r\n            pos = canvasToAxisCoords({ left: canvasX, top: canvasY });\r\n\r\n            pos.pageX = event.pageX;\r\n            pos.pageY = event.pageY;\r\n\r\n            var item = findNearbyItem(canvasX, canvasY, seriesFilter);\r\n\r\n            if (item) {\r\n                // fill in mouse pos for any listeners out there\r\n                item.pageX = parseInt(item.series.xaxis.p2c(item.datapoint[0]) + offset.left + plotOffset.left, 10);\r\n                item.pageY = parseInt(item.series.yaxis.p2c(item.datapoint[1]) + offset.top + plotOffset.top, 10);\r\n            }\r\n\r\n            if (options.grid.autoHighlight) {\r\n                // clear auto-highlights\r\n                for (var i = 0; i < highlights.length; ++i) {\r\n                    var h = highlights[i];\r\n                    if (h.auto == eventname &&\r\n                        !(item && h.series == item.series &&\r\n                          h.point[0] == item.datapoint[0] &&\r\n                          h.point[1] == item.datapoint[1]))\r\n                        unhighlight(h.series, h.point);\r\n                }\r\n\r\n                if (item)\r\n                    highlight(item.series, item.datapoint, eventname);\r\n            }\r\n\r\n            placeholder.trigger(eventname, [ pos, item ]);\r\n        }\r\n\r\n        function triggerRedrawOverlay() {\r\n            var t = options.interaction.redrawOverlayInterval;\r\n            if (t == -1) {      // skip event queue\r\n                drawOverlay();\r\n                return;\r\n            }\r\n\r\n            if (!redrawTimeout)\r\n                redrawTimeout = setTimeout(drawOverlay, t);\r\n        }\r\n\r\n        function drawOverlay() {\r\n            redrawTimeout = null;\r\n\r\n            // draw highlights\r\n            octx.save();\r\n            overlay.clear();\r\n            octx.translate(plotOffset.left, plotOffset.top);\r\n\r\n            var i, hi;\r\n            for (i = 0; i < highlights.length; ++i) {\r\n                hi = highlights[i];\r\n\r\n                if (hi.series.bars.show)\r\n                    drawBarHighlight(hi.series, hi.point);\r\n                else\r\n                    drawPointHighlight(hi.series, hi.point);\r\n            }\r\n            octx.restore();\r\n\r\n            executeHooks(hooks.drawOverlay, [octx]);\r\n        }\r\n\r\n        function highlight(s, point, auto) {\r\n            if (typeof s == "number")\r\n                s = series[s];\r\n\r\n            if (typeof point == "number") {\r\n                var ps = s.datapoints.pointsize;\r\n                point = s.datapoints.points.slice(ps * point, ps * (point + 1));\r\n            }\r\n\r\n            var i = indexOfHighlight(s, point);\r\n            if (i == -1) {\r\n                highlights.push({ series: s, point: point, auto: auto });\r\n\r\n                triggerRedrawOverlay();\r\n            }\r\n            else if (!auto)\r\n                highlights[i].auto = false;\r\n        }\r\n\r\n        function unhighlight(s, point) {\r\n            if (s == null && point == null) {\r\n                highlights = [];\r\n                triggerRedrawOverlay();\r\n                return;\r\n            }\r\n\r\n            if (typeof s == "number")\r\n                s = series[s];\r\n\r\n            if (typeof point == "number") {\r\n                var ps = s.datapoints.pointsize;\r\n                point = s.datapoints.points.slice(ps * point, ps * (point + 1));\r\n            }\r\n\r\n            var i = indexOfHighlight(s, point);\r\n            if (i != -1) {\r\n                highlights.splice(i, 1);\r\n\r\n                triggerRedrawOverlay();\r\n            }\r\n        }\r\n\r\n        function indexOfHighlight(s, p) {\r\n            for (var i = 0; i < highlights.length; ++i) {\r\n                var h = highlights[i];\r\n                if (h.series == s && h.point[0] == p[0]\r\n                    && h.point[1] == p[1])\r\n                    return i;\r\n            }\r\n            return -1;\r\n        }\r\n\r\n        function drawPointHighlight(series, point) {\r\n            var x = point[0], y = point[1],\r\n                axisx = series.xaxis, axisy = series.yaxis,\r\n                highlightColor = (typeof series.highlightColor === "string") ? series.highlightColor : $.color.parse(series.color).scale(\'a\', 0.5).toString();\r\n\r\n            if (x < axisx.min || x > axisx.max || y < axisy.min || y > axisy.max)\r\n                return;\r\n\r\n            var pointRadius = series.points.radius + series.points.lineWidth / 2;\r\n            octx.lineWidth = pointRadius;\r\n            octx.strokeStyle = highlightColor;\r\n            var radius = 1.5 * pointRadius;\r\n            x = axisx.p2c(x);\r\n            y = axisy.p2c(y);\r\n\r\n            octx.beginPath();\r\n            if (series.points.symbol == "circle")\r\n                octx.arc(x, y, radius, 0, 2 * Math.PI, false);\r\n            else\r\n                series.points.symbol(octx, x, y, radius, false);\r\n            octx.closePath();\r\n            octx.stroke();\r\n        }\r\n\r\n        function drawBarHighlight(series, point) {\r\n            var highlightColor = (typeof series.highlightColor === "string") ? series.highlightColor : $.color.parse(series.color).scale(\'a\', 0.5).toString(),\r\n                fillStyle = highlightColor,\r\n                barLeft;\r\n\r\n            switch (series.bars.align) {\r\n                case "left":\r\n                    barLeft = 0;\r\n                    break;\r\n                case "right":\r\n                    barLeft = -series.bars.barWidth;\r\n                    break;\r\n                default:\r\n                    barLeft = -series.bars.barWidth / 2;\r\n            }\r\n\r\n            octx.lineWidth = series.bars.lineWidth;\r\n            octx.strokeStyle = highlightColor;\r\n\r\n            drawBar(point[0], point[1], point[2] || 0, barLeft, barLeft + series.bars.barWidth,\r\n                    function () { return fillStyle; }, series.xaxis, series.yaxis, octx, series.bars.horizontal, series.bars.lineWidth);\r\n        }\r\n\r\n        function getColorOrGradient(spec, bottom, top, defaultColor) {\r\n            if (typeof spec == "string")\r\n                return spec;\r\n            else {\r\n                // assume this is a gradient spec; IE currently only\r\n                // supports a simple vertical gradient properly, so that\'s\r\n                // what we support too\r\n                var gradient = ctx.createLinearGradient(0, top, 0, bottom);\r\n\r\n                for (var i = 0, l = spec.colors.length; i < l; ++i) {\r\n                    var c = spec.colors[i];\r\n                    if (typeof c != "string") {\r\n                        var co = $.color.parse(defaultColor);\r\n                        if (c.brightness != null)\r\n                            co = co.scale(\'rgb\', c.brightness);\r\n                        if (c.opacity != null)\r\n                            co.a *= c.opacity;\r\n                        c = co.toString();\r\n                    }\r\n                    gradient.addColorStop(i / (l - 1), c);\r\n                }\r\n\r\n                return gradient;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Add the plot function to the top level of the jQuery object\r\n\r\n    $.plot = function(placeholder, data, options) {\r\n        //var t0 = new Date();\r\n        var plot = new Plot($(placeholder), data, options, $.plot.plugins);\r\n        //(window.console ? console.log : alert)("time used (msecs): " + ((new Date()).getTime() - t0.getTime()));\r\n        return plot;\r\n    };\r\n\r\n    $.plot.version = "0.8.3";\r\n\r\n    $.plot.plugins = [];\r\n\r\n    // Also add the plot function as a chainable property\r\n\r\n    $.fn.plot = function(data, options) {\r\n        return this.each(function() {\r\n            $.plot(this, data, options);\r\n        });\r\n    };\r\n\r\n    // round to nearby lower multiple of base\r\n    function floorInBase(n, base) {\r\n        return base * Math.floor(n / base);\r\n    }\r\n\r\n})(jQuery);\r\n';
},287:/*!***********************************************************************!*\
  !*** ./~/script-loader!./bower_components/Flot/jquery.flot.resize.js ***!
  \***********************************************************************/
function(n,e,r){r(285)(r(288))},288:/*!************************************************************************************!*\
  !*** ./~/script-loader/~/raw-loader!./bower_components/Flot/jquery.flot.resize.js ***!
  \************************************************************************************/
function(n,e){n.exports='/* Flot plugin for automatically redrawing plots as the placeholder resizes.\r\n\r\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\r\nLicensed under the MIT license.\r\n\r\nIt works by listening for changes on the placeholder div (through the jQuery\r\nresize event plugin) - if the size changes, it will redraw the plot.\r\n\r\nThere are no options. If you need to disable the plugin for some plots, you\r\ncan just fix the size of their placeholders.\r\n\r\n*/\r\n\r\n/* Inline dependency:\r\n * jQuery resize event - v1.1 - 3/14/2010\r\n * http://benalman.com/projects/jquery-resize-plugin/\r\n *\r\n * Copyright (c) 2010 "Cowboy" Ben Alman\r\n * Dual licensed under the MIT and GPL licenses.\r\n * http://benalman.com/about/license/\r\n */\r\n(function($,e,t){"$:nomunge";var i=[],n=$.resize=$.extend($.resize,{}),a,r=false,s="setTimeout",u="resize",m=u+"-special-event",o="pendingDelay",l="activeDelay",f="throttleWindow";n[o]=200;n[l]=20;n[f]=true;$.event.special[u]={setup:function(){if(!n[f]&&this[s]){return false}var e=$(this);i.push(this);e.data(m,{w:e.width(),h:e.height()});if(i.length===1){a=t;h()}},teardown:function(){if(!n[f]&&this[s]){return false}var e=$(this);for(var t=i.length-1;t>=0;t--){if(i[t]==this){i.splice(t,1);break}}e.removeData(m);if(!i.length){if(r){cancelAnimationFrame(a)}else{clearTimeout(a)}a=null}},add:function(e){if(!n[f]&&this[s]){return false}var i;function a(e,n,a){var r=$(this),s=r.data(m)||{};s.w=n!==t?n:r.width();s.h=a!==t?a:r.height();i.apply(this,arguments)}if($.isFunction(e)){i=e;return a}else{i=e.handler;e.handler=a}}};function h(t){if(r===true){r=t||1}for(var s=i.length-1;s>=0;s--){var l=$(i[s]);if(l[0]==e||l.is(":visible")){var f=l.width(),c=l.height(),d=l.data(m);if(d&&(f!==d.w||c!==d.h)){l.trigger(u,[d.w=f,d.h=c]);r=t||true}}else{d=l.data(m);d.w=0;d.h=0}}if(a!==null){if(r&&(t==null||t-r<1e3)){a=e.requestAnimationFrame(h)}else{a=setTimeout(h,n[o]);r=false}}}if(!e.requestAnimationFrame){e.requestAnimationFrame=function(){return e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(t,i){return e.setTimeout(function(){t((new Date).getTime())},n[l])}}()}if(!e.cancelAnimationFrame){e.cancelAnimationFrame=function(){return e.webkitCancelRequestAnimationFrame||e.mozCancelRequestAnimationFrame||e.oCancelRequestAnimationFrame||e.msCancelRequestAnimationFrame||clearTimeout}()}})(jQuery,this);\r\n\r\n(function ($) {\r\n    var options = { }; // no options\r\n\r\n    function init(plot) {\r\n        function onResize() {\r\n            var placeholder = plot.getPlaceholder();\r\n\r\n            // somebody might have hidden us and we can\'t plot\r\n            // when we don\'t have the dimensions\r\n            if (placeholder.width() == 0 || placeholder.height() == 0)\r\n                return;\r\n\r\n            plot.resize();\r\n            plot.setupGrid();\r\n            plot.draw();\r\n        }\r\n        \r\n        function bindEvents(plot, eventHolder) {\r\n            plot.getPlaceholder().resize(onResize);\r\n        }\r\n\r\n        function shutdown(plot, eventHolder) {\r\n            plot.getPlaceholder().unbind("resize", onResize);\r\n        }\r\n        \r\n        plot.hooks.bindEvents.push(bindEvents);\r\n        plot.hooks.shutdown.push(shutdown);\r\n    }\r\n    \r\n    $.plot.plugins.push({\r\n        init: init,\r\n        options: options,\r\n        name: \'resize\',\r\n        version: \'1.0\'\r\n    });\r\n})(jQuery);\r\n'},289:/*!****************************************************************************!*\
  !*** ./~/script-loader!./bower_components/Flot/jquery.flot.fillbetween.js ***!
  \****************************************************************************/
function(n,e,r){r(285)(r(290))},290:/*!*****************************************************************************************!*\
  !*** ./~/script-loader/~/raw-loader!./bower_components/Flot/jquery.flot.fillbetween.js ***!
  \*****************************************************************************************/
function(n,e){n.exports='/* Flot plugin for computing bottoms for filled line and bar charts.\r\n\r\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\r\nLicensed under the MIT license.\r\n\r\nThe case: you\'ve got two series that you want to fill the area between. In Flot\r\nterms, you need to use one as the fill bottom of the other. You can specify the\r\nbottom of each data point as the third coordinate manually, or you can use this\r\nplugin to compute it for you.\r\n\r\nIn order to name the other series, you need to give it an id, like this:\r\n\r\n	var dataset = [\r\n		{ data: [ ... ], id: "foo" } ,         // use default bottom\r\n		{ data: [ ... ], fillBetween: "foo" }, // use first dataset as bottom\r\n	];\r\n\r\n	$.plot($("#placeholder"), dataset, { lines: { show: true, fill: true }});\r\n\r\nAs a convenience, if the id given is a number that doesn\'t appear as an id in\r\nthe series, it is interpreted as the index in the array instead (so fillBetween:\r\n0 can also mean the first series).\r\n\r\nInternally, the plugin modifies the datapoints in each series. For line series,\r\nextra data points might be inserted through interpolation. Note that at points\r\nwhere the bottom line is not defined (due to a null point or start/end of line),\r\nthe current line will show a gap too. The algorithm comes from the\r\njquery.flot.stack.js plugin, possibly some code could be shared.\r\n\r\n*/\r\n\r\n(function ( $ ) {\r\n\r\n	var options = {\r\n		series: {\r\n			fillBetween: null	// or number\r\n		}\r\n	};\r\n\r\n	function init( plot ) {\r\n\r\n		function findBottomSeries( s, allseries ) {\r\n\r\n			var i;\r\n\r\n			for ( i = 0; i < allseries.length; ++i ) {\r\n				if ( allseries[ i ].id === s.fillBetween ) {\r\n					return allseries[ i ];\r\n				}\r\n			}\r\n\r\n			if ( typeof s.fillBetween === "number" ) {\r\n				if ( s.fillBetween < 0 || s.fillBetween >= allseries.length ) {\r\n					return null;\r\n				}\r\n				return allseries[ s.fillBetween ];\r\n			}\r\n\r\n			return null;\r\n		}\r\n\r\n		function computeFillBottoms( plot, s, datapoints ) {\r\n\r\n			if ( s.fillBetween == null ) {\r\n				return;\r\n			}\r\n\r\n			var other = findBottomSeries( s, plot.getData() );\r\n\r\n			if ( !other ) {\r\n				return;\r\n			}\r\n\r\n			var ps = datapoints.pointsize,\r\n				points = datapoints.points,\r\n				otherps = other.datapoints.pointsize,\r\n				otherpoints = other.datapoints.points,\r\n				newpoints = [],\r\n				px, py, intery, qx, qy, bottom,\r\n				withlines = s.lines.show,\r\n				withbottom = ps > 2 && datapoints.format[2].y,\r\n				withsteps = withlines && s.lines.steps,\r\n				fromgap = true,\r\n				i = 0,\r\n				j = 0,\r\n				l, m;\r\n\r\n			while ( true ) {\r\n\r\n				if ( i >= points.length ) {\r\n					break;\r\n				}\r\n\r\n				l = newpoints.length;\r\n\r\n				if ( points[ i ] == null ) {\r\n\r\n					// copy gaps\r\n\r\n					for ( m = 0; m < ps; ++m ) {\r\n						newpoints.push( points[ i + m ] );\r\n					}\r\n\r\n					i += ps;\r\n\r\n				} else if ( j >= otherpoints.length ) {\r\n\r\n					// for lines, we can\'t use the rest of the points\r\n\r\n					if ( !withlines ) {\r\n						for ( m = 0; m < ps; ++m ) {\r\n							newpoints.push( points[ i + m ] );\r\n						}\r\n					}\r\n\r\n					i += ps;\r\n\r\n				} else if ( otherpoints[ j ] == null ) {\r\n\r\n					// oops, got a gap\r\n\r\n					for ( m = 0; m < ps; ++m ) {\r\n						newpoints.push( null );\r\n					}\r\n\r\n					fromgap = true;\r\n					j += otherps;\r\n\r\n				} else {\r\n\r\n					// cases where we actually got two points\r\n\r\n					px = points[ i ];\r\n					py = points[ i + 1 ];\r\n					qx = otherpoints[ j ];\r\n					qy = otherpoints[ j + 1 ];\r\n					bottom = 0;\r\n\r\n					if ( px === qx ) {\r\n\r\n						for ( m = 0; m < ps; ++m ) {\r\n							newpoints.push( points[ i + m ] );\r\n						}\r\n\r\n						//newpoints[ l + 1 ] += qy;\r\n						bottom = qy;\r\n\r\n						i += ps;\r\n						j += otherps;\r\n\r\n					} else if ( px > qx ) {\r\n\r\n						// we got past point below, might need to\r\n						// insert interpolated extra point\r\n\r\n						if ( withlines && i > 0 && points[ i - ps ] != null ) {\r\n							intery = py + ( points[ i - ps + 1 ] - py ) * ( qx - px ) / ( points[ i - ps ] - px );\r\n							newpoints.push( qx );\r\n							newpoints.push( intery );\r\n							for ( m = 2; m < ps; ++m ) {\r\n								newpoints.push( points[ i + m ] );\r\n							}\r\n							bottom = qy;\r\n						}\r\n\r\n						j += otherps;\r\n\r\n					} else { // px < qx\r\n\r\n						// if we come from a gap, we just skip this point\r\n\r\n						if ( fromgap && withlines ) {\r\n							i += ps;\r\n							continue;\r\n						}\r\n\r\n						for ( m = 0; m < ps; ++m ) {\r\n							newpoints.push( points[ i + m ] );\r\n						}\r\n\r\n						// we might be able to interpolate a point below,\r\n						// this can give us a better y\r\n\r\n						if ( withlines && j > 0 && otherpoints[ j - otherps ] != null ) {\r\n							bottom = qy + ( otherpoints[ j - otherps + 1 ] - qy ) * ( px - qx ) / ( otherpoints[ j - otherps ] - qx );\r\n						}\r\n\r\n						//newpoints[l + 1] += bottom;\r\n\r\n						i += ps;\r\n					}\r\n\r\n					fromgap = false;\r\n\r\n					if ( l !== newpoints.length && withbottom ) {\r\n						newpoints[ l + 2 ] = bottom;\r\n					}\r\n				}\r\n\r\n				// maintain the line steps invariant\r\n\r\n				if ( withsteps && l !== newpoints.length && l > 0 &&\r\n					newpoints[ l ] !== null &&\r\n					newpoints[ l ] !== newpoints[ l - ps ] &&\r\n					newpoints[ l + 1 ] !== newpoints[ l - ps + 1 ] ) {\r\n					for (m = 0; m < ps; ++m) {\r\n						newpoints[ l + ps + m ] = newpoints[ l + m ];\r\n					}\r\n					newpoints[ l + 1 ] = newpoints[ l - ps + 1 ];\r\n				}\r\n			}\r\n\r\n			datapoints.points = newpoints;\r\n		}\r\n\r\n		plot.hooks.processDatapoints.push( computeFillBottoms );\r\n	}\r\n\r\n	$.plot.plugins.push({\r\n		init: init,\r\n		options: options,\r\n		name: "fillbetween",\r\n		version: "1.0"\r\n	});\r\n\r\n})(jQuery);\r\n'},291:/*!***************************************************************************************!*\
  !*** ./~/script-loader!./bower_components/flot.orderbars/js/jquery.flot.orderBars.js ***!
  \***************************************************************************************/
function(n,e,r){r(285)(r(292))},292:/*!****************************************************************************************************!*\
  !*** ./~/script-loader/~/raw-loader!./bower_components/flot.orderbars/js/jquery.flot.orderBars.js ***!
  \****************************************************************************************************/
function(n,e){n.exports='/*\r\n * Flot plugin to order bars side by side.\r\n *\r\n * Released under the MIT license by Benjamin BUFFET, 20-Sep-2010.\r\n * Modifications made by Steven Hall <github.com/emmerich>, 01-May-2013.\r\n *\r\n * This plugin is an alpha version.\r\n *\r\n * To activate the plugin you must specify the parameter "order" for the specific serie :\r\n *\r\n *  $.plot($("#placeholder"), [{ data: [ ... ], bars :{ order = null or integer }])\r\n *\r\n * If 2 series have the same order param, they are ordered by the position in the array;\r\n *\r\n * The plugin adjust the point by adding a value depanding of the barwidth\r\n * Exemple for 3 series (barwidth : 0.1) :\r\n *\r\n *          first bar décalage : -0.15\r\n *          second bar décalage : -0.05\r\n *          third bar décalage : 0.05\r\n *\r\n */\r\n\r\n// INFO: decalage/decallage is French for gap. It\'s used to denote the spacing applied to each\r\n// bar.\r\n(function($){\r\n    function init(plot){\r\n        var orderedBarSeries;\r\n        var nbOfBarsToOrder;\r\n        var borderWidth;\r\n        var borderWidthInXabsWidth;\r\n        var pixelInXWidthEquivalent = 1;\r\n        var isHorizontal = false;\r\n\r\n        // A mapping of order integers to decallage.\r\n        var decallageByOrder = {};\r\n\r\n        /*\r\n         * This method add shift to x values\r\n         */\r\n        function reOrderBars(plot, serie, datapoints){\r\n            var shiftedPoints = null;\r\n\r\n            if(serieNeedToBeReordered(serie)){\r\n                checkIfGraphIsHorizontal(serie);\r\n                calculPixel2XWidthConvert(plot);\r\n                retrieveBarSeries(plot);\r\n                calculBorderAndBarWidth(serie);\r\n\r\n                if(nbOfBarsToOrder >= 2){\r\n                    var position = findPosition(serie);\r\n                    var decallage = 0;\r\n\r\n                    var centerBarShift = calculCenterBarShift();\r\n\r\n                    // If we haven\'t already calculated the decallage for this order value, do it.\r\n                    if(typeof decallageByOrder[serie.bars.order] === \'undefined\') {\r\n                        if (isBarAtLeftOfCenter(position)){\r\n                            decallageByOrder[serie.bars.order] = -1*(sumWidth(orderedBarSeries,position-1,Math.floor(nbOfBarsToOrder / 2)-1)) - centerBarShift;\r\n                        }else{\r\n                            decallageByOrder[serie.bars.order] = sumWidth(orderedBarSeries,Math.ceil(nbOfBarsToOrder / 2),position-2) + centerBarShift + borderWidthInXabsWidth*2;\r\n                        }\r\n                    }\r\n\r\n                    // Lookup the decallage based on the series\' order value.\r\n                    decallage = decallageByOrder[serie.bars.order];\r\n\r\n                    shiftedPoints = shiftPoints(datapoints,serie,decallage);\r\n                    datapoints.points = shiftedPoints;\r\n                }\r\n            }\r\n            return shiftedPoints;\r\n        }\r\n\r\n        function serieNeedToBeReordered(serie){\r\n            return serie.bars != null\r\n                && serie.bars.show\r\n                && serie.bars.order != null;\r\n        }\r\n\r\n        function calculPixel2XWidthConvert(plot){\r\n            var gridDimSize = isHorizontal ? plot.getPlaceholder().innerHeight() : plot.getPlaceholder().innerWidth();\r\n            var minMaxValues = isHorizontal ? getAxeMinMaxValues(plot.getData(),1) : getAxeMinMaxValues(plot.getData(),0);\r\n            var AxeSize = minMaxValues[1] - minMaxValues[0];\r\n            pixelInXWidthEquivalent = AxeSize / gridDimSize;\r\n        }\r\n\r\n        function getAxeMinMaxValues(series,AxeIdx){\r\n            var minMaxValues = new Array();\r\n            for(var i = 0; i < series.length; i++){\r\n                minMaxValues[0] = (series[i].data[0]) ? series[i].data[0][AxeIdx]: null;\r\n                minMaxValues[1] = (series[i].data[series[i].data.length - 1]) ? series[i].data[series[i].data.length - 1][AxeIdx]: null;\r\n            }\r\n            return minMaxValues;\r\n        }\r\n\r\n        function retrieveBarSeries(plot){\r\n            orderedBarSeries = findOthersBarsToReOrders(plot.getData());\r\n            nbOfBarsToOrder = orderedBarSeries.length;\r\n        }\r\n\r\n        function findOthersBarsToReOrders(series){\r\n            var retSeries = new Array();\r\n            var orderValuesSeen = [];\r\n\r\n            for(var i = 0; i < series.length; i++){\r\n                if(series[i].bars.order != null && series[i].bars.show &&\r\n                    orderValuesSeen.indexOf(series[i].bars.order) < 0){\r\n\r\n                    orderValuesSeen.push(series[i].bars.order);\r\n                    retSeries.push(series[i]);\r\n                }\r\n            }\r\n            return retSeries.sort(sortByOrder);\r\n        }\r\n\r\n        function sortByOrder(serie1,serie2){\r\n            var x = serie1.bars.order;\r\n            var y = serie2.bars.order;\r\n            return ((x < y) ? -1 : ((x > y) ? 1 : 0));\r\n        }\r\n\r\n        function  calculBorderAndBarWidth(serie){\r\n            borderWidth = typeof serie.bars.lineWidth !== \'undefined\' ? serie.bars.lineWidth  : 2;\r\n            borderWidthInXabsWidth = borderWidth * pixelInXWidthEquivalent;\r\n        }\r\n\r\n        function checkIfGraphIsHorizontal(serie){\r\n            if(serie.bars.horizontal){\r\n                isHorizontal = true;\r\n            }\r\n        }\r\n\r\n        function findPosition(serie){\r\n            var pos = 0\r\n            for (var i = 0; i < orderedBarSeries.length; ++i) {\r\n                if (serie == orderedBarSeries[i]){\r\n                    pos = i;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return pos+1;\r\n        }\r\n\r\n        function calculCenterBarShift(){\r\n            var width = 0;\r\n\r\n            if(nbOfBarsToOrder%2 != 0)\r\n                width = (orderedBarSeries[Math.ceil(nbOfBarsToOrder / 2)].bars.barWidth)/2;\r\n\r\n            return width;\r\n        }\r\n\r\n        function isBarAtLeftOfCenter(position){\r\n            return position <= Math.ceil(nbOfBarsToOrder / 2);\r\n        }\r\n\r\n        function sumWidth(series,start,end){\r\n            var totalWidth = 0;\r\n\r\n            for(var i = start; i <= end; i++){\r\n                totalWidth += series[i].bars.barWidth+borderWidthInXabsWidth*2;\r\n            }\r\n\r\n            return totalWidth;\r\n        }\r\n\r\n        function shiftPoints(datapoints,serie,dx){\r\n            var ps = datapoints.pointsize;\r\n            var points = datapoints.points;\r\n            var j = 0;\r\n            for(var i = isHorizontal ? 1 : 0;i < points.length; i += ps){\r\n                points[i] += dx;\r\n                //Adding the new x value in the serie to be abble to display the right tooltip value,\r\n                //using the index 3 to not overide the third index.\r\n                serie.data[j][3] = points[i];\r\n                j++;\r\n            }\r\n\r\n            return points;\r\n        }\r\n\r\n        plot.hooks.processDatapoints.push(reOrderBars);\r\n\r\n    }\r\n\r\n    var options = {\r\n        series : {\r\n            bars: {order: null} // or number/string\r\n        }\r\n    };\r\n\r\n    $.plot.plugins.push({\r\n        init: init,\r\n        options: options,\r\n        name: "orderBars",\r\n        version: "0.2"\r\n    });\r\n\r\n})(jQuery);'},293:/*!********************************************************************!*\
  !*** ./~/script-loader!./bower_components/Flot/jquery.flot.pie.js ***!
  \********************************************************************/
function(n,e,r){r(285)(r(294))},294:/*!*********************************************************************************!*\
  !*** ./~/script-loader/~/raw-loader!./bower_components/Flot/jquery.flot.pie.js ***!
  \*********************************************************************************/
function(n,e){n.exports='/* Flot plugin for rendering pie charts.\r\n\r\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\r\nLicensed under the MIT license.\r\n\r\nThe plugin assumes that each series has a single data value, and that each\r\nvalue is a positive integer or zero.  Negative numbers don\'t make sense for a\r\npie chart, and have unpredictable results.  The values do NOT need to be\r\npassed in as percentages; the plugin will calculate the total and per-slice\r\npercentages internally.\r\n\r\n* Created by Brian Medendorp\r\n\r\n* Updated with contributions from btburnett3, Anthony Aragues and Xavi Ivars\r\n\r\nThe plugin supports these options:\r\n\r\n	series: {\r\n		pie: {\r\n			show: true/false\r\n			radius: 0-1 for percentage of fullsize, or a specified pixel length, or \'auto\'\r\n			innerRadius: 0-1 for percentage of fullsize or a specified pixel length, for creating a donut effect\r\n			startAngle: 0-2 factor of PI used for starting angle (in radians) i.e 3/2 starts at the top, 0 and 2 have the same result\r\n			tilt: 0-1 for percentage to tilt the pie, where 1 is no tilt, and 0 is completely flat (nothing will show)\r\n			offset: {\r\n				top: integer value to move the pie up or down\r\n				left: integer value to move the pie left or right, or \'auto\'\r\n			},\r\n			stroke: {\r\n				color: any hexidecimal color value (other formats may or may not work, so best to stick with something like \'#FFF\')\r\n				width: integer pixel width of the stroke\r\n			},\r\n			label: {\r\n				show: true/false, or \'auto\'\r\n				formatter:  a user-defined function that modifies the text/style of the label text\r\n				radius: 0-1 for percentage of fullsize, or a specified pixel length\r\n				background: {\r\n					color: any hexidecimal color value (other formats may or may not work, so best to stick with something like \'#000\')\r\n					opacity: 0-1\r\n				},\r\n				threshold: 0-1 for the percentage value at which to hide labels (if they\'re too small)\r\n			},\r\n			combine: {\r\n				threshold: 0-1 for the percentage value at which to combine slices (if they\'re too small)\r\n				color: any hexidecimal color value (other formats may or may not work, so best to stick with something like \'#CCC\'), if null, the plugin will automatically use the color of the first slice to be combined\r\n				label: any text value of what the combined slice should be labeled\r\n			}\r\n			highlight: {\r\n				opacity: 0-1\r\n			}\r\n		}\r\n	}\r\n\r\nMore detail and specific examples can be found in the included HTML file.\r\n\r\n*/\r\n\r\n(function($) {\r\n\r\n	// Maximum redraw attempts when fitting labels within the plot\r\n\r\n	var REDRAW_ATTEMPTS = 10;\r\n\r\n	// Factor by which to shrink the pie when fitting labels within the plot\r\n\r\n	var REDRAW_SHRINK = 0.95;\r\n\r\n	function init(plot) {\r\n\r\n		var canvas = null,\r\n			target = null,\r\n			options = null,\r\n			maxRadius = null,\r\n			centerLeft = null,\r\n			centerTop = null,\r\n			processed = false,\r\n			ctx = null;\r\n\r\n		// interactive variables\r\n\r\n		var highlights = [];\r\n\r\n		// add hook to determine if pie plugin in enabled, and then perform necessary operations\r\n\r\n		plot.hooks.processOptions.push(function(plot, options) {\r\n			if (options.series.pie.show) {\r\n\r\n				options.grid.show = false;\r\n\r\n				// set labels.show\r\n\r\n				if (options.series.pie.label.show == "auto") {\r\n					if (options.legend.show) {\r\n						options.series.pie.label.show = false;\r\n					} else {\r\n						options.series.pie.label.show = true;\r\n					}\r\n				}\r\n\r\n				// set radius\r\n\r\n				if (options.series.pie.radius == "auto") {\r\n					if (options.series.pie.label.show) {\r\n						options.series.pie.radius = 3/4;\r\n					} else {\r\n						options.series.pie.radius = 1;\r\n					}\r\n				}\r\n\r\n				// ensure sane tilt\r\n\r\n				if (options.series.pie.tilt > 1) {\r\n					options.series.pie.tilt = 1;\r\n				} else if (options.series.pie.tilt < 0) {\r\n					options.series.pie.tilt = 0;\r\n				}\r\n			}\r\n		});\r\n\r\n		plot.hooks.bindEvents.push(function(plot, eventHolder) {\r\n			var options = plot.getOptions();\r\n			if (options.series.pie.show) {\r\n				if (options.grid.hoverable) {\r\n					eventHolder.unbind("mousemove").mousemove(onMouseMove);\r\n				}\r\n				if (options.grid.clickable) {\r\n					eventHolder.unbind("click").click(onClick);\r\n				}\r\n			}\r\n		});\r\n\r\n		plot.hooks.processDatapoints.push(function(plot, series, data, datapoints) {\r\n			var options = plot.getOptions();\r\n			if (options.series.pie.show) {\r\n				processDatapoints(plot, series, data, datapoints);\r\n			}\r\n		});\r\n\r\n		plot.hooks.drawOverlay.push(function(plot, octx) {\r\n			var options = plot.getOptions();\r\n			if (options.series.pie.show) {\r\n				drawOverlay(plot, octx);\r\n			}\r\n		});\r\n\r\n		plot.hooks.draw.push(function(plot, newCtx) {\r\n			var options = plot.getOptions();\r\n			if (options.series.pie.show) {\r\n				draw(plot, newCtx);\r\n			}\r\n		});\r\n\r\n		function processDatapoints(plot, series, datapoints) {\r\n			if (!processed)	{\r\n				processed = true;\r\n				canvas = plot.getCanvas();\r\n				target = $(canvas).parent();\r\n				options = plot.getOptions();\r\n				plot.setData(combine(plot.getData()));\r\n			}\r\n		}\r\n\r\n		function combine(data) {\r\n\r\n			var total = 0,\r\n				combined = 0,\r\n				numCombined = 0,\r\n				color = options.series.pie.combine.color,\r\n				newdata = [];\r\n\r\n			// Fix up the raw data from Flot, ensuring the data is numeric\r\n\r\n			for (var i = 0; i < data.length; ++i) {\r\n\r\n				var value = data[i].data;\r\n\r\n				// If the data is an array, we\'ll assume that it\'s a standard\r\n				// Flot x-y pair, and are concerned only with the second value.\r\n\r\n				// Note how we use the original array, rather than creating a\r\n				// new one; this is more efficient and preserves any extra data\r\n				// that the user may have stored in higher indexes.\r\n\r\n				if ($.isArray(value) && value.length == 1) {\r\n    				value = value[0];\r\n				}\r\n\r\n				if ($.isArray(value)) {\r\n					// Equivalent to $.isNumeric() but compatible with jQuery < 1.7\r\n					if (!isNaN(parseFloat(value[1])) && isFinite(value[1])) {\r\n						value[1] = +value[1];\r\n					} else {\r\n						value[1] = 0;\r\n					}\r\n				} else if (!isNaN(parseFloat(value)) && isFinite(value)) {\r\n					value = [1, +value];\r\n				} else {\r\n					value = [1, 0];\r\n				}\r\n\r\n				data[i].data = [value];\r\n			}\r\n\r\n			// Sum up all the slices, so we can calculate percentages for each\r\n\r\n			for (var i = 0; i < data.length; ++i) {\r\n				total += data[i].data[0][1];\r\n			}\r\n\r\n			// Count the number of slices with percentages below the combine\r\n			// threshold; if it turns out to be just one, we won\'t combine.\r\n\r\n			for (var i = 0; i < data.length; ++i) {\r\n				var value = data[i].data[0][1];\r\n				if (value / total <= options.series.pie.combine.threshold) {\r\n					combined += value;\r\n					numCombined++;\r\n					if (!color) {\r\n						color = data[i].color;\r\n					}\r\n				}\r\n			}\r\n\r\n			for (var i = 0; i < data.length; ++i) {\r\n				var value = data[i].data[0][1];\r\n				if (numCombined < 2 || value / total > options.series.pie.combine.threshold) {\r\n					newdata.push(\r\n						$.extend(data[i], {     /* extend to allow keeping all other original data values\r\n						                           and using them e.g. in labelFormatter. */\r\n							data: [[1, value]],\r\n							color: data[i].color,\r\n							label: data[i].label,\r\n							angle: value * Math.PI * 2 / total,\r\n							percent: value / (total / 100)\r\n						})\r\n					);\r\n				}\r\n			}\r\n\r\n			if (numCombined > 1) {\r\n				newdata.push({\r\n					data: [[1, combined]],\r\n					color: color,\r\n					label: options.series.pie.combine.label,\r\n					angle: combined * Math.PI * 2 / total,\r\n					percent: combined / (total / 100)\r\n				});\r\n			}\r\n\r\n			return newdata;\r\n		}\r\n\r\n		function draw(plot, newCtx) {\r\n\r\n			if (!target) {\r\n				return; // if no series were passed\r\n			}\r\n\r\n			var canvasWidth = plot.getPlaceholder().width(),\r\n				canvasHeight = plot.getPlaceholder().height(),\r\n				legendWidth = target.children().filter(".legend").children().width() || 0;\r\n\r\n			ctx = newCtx;\r\n\r\n			// WARNING: HACK! REWRITE THIS CODE AS SOON AS POSSIBLE!\r\n\r\n			// When combining smaller slices into an \'other\' slice, we need to\r\n			// add a new series.  Since Flot gives plugins no way to modify the\r\n			// list of series, the pie plugin uses a hack where the first call\r\n			// to processDatapoints results in a call to setData with the new\r\n			// list of series, then subsequent processDatapoints do nothing.\r\n\r\n			// The plugin-global \'processed\' flag is used to control this hack;\r\n			// it starts out false, and is set to true after the first call to\r\n			// processDatapoints.\r\n\r\n			// Unfortunately this turns future setData calls into no-ops; they\r\n			// call processDatapoints, the flag is true, and nothing happens.\r\n\r\n			// To fix this we\'ll set the flag back to false here in draw, when\r\n			// all series have been processed, so the next sequence of calls to\r\n			// processDatapoints once again starts out with a slice-combine.\r\n			// This is really a hack; in 0.9 we need to give plugins a proper\r\n			// way to modify series before any processing begins.\r\n\r\n			processed = false;\r\n\r\n			// calculate maximum radius and center point\r\n\r\n			maxRadius =  Math.min(canvasWidth, canvasHeight / options.series.pie.tilt) / 2;\r\n			centerTop = canvasHeight / 2 + options.series.pie.offset.top;\r\n			centerLeft = canvasWidth / 2;\r\n\r\n			if (options.series.pie.offset.left == "auto") {\r\n				if (options.legend.position.match("w")) {\r\n					centerLeft += legendWidth / 2;\r\n				} else {\r\n					centerLeft -= legendWidth / 2;\r\n				}\r\n				if (centerLeft < maxRadius) {\r\n					centerLeft = maxRadius;\r\n				} else if (centerLeft > canvasWidth - maxRadius) {\r\n					centerLeft = canvasWidth - maxRadius;\r\n				}\r\n			} else {\r\n				centerLeft += options.series.pie.offset.left;\r\n			}\r\n\r\n			var slices = plot.getData(),\r\n				attempts = 0;\r\n\r\n			// Keep shrinking the pie\'s radius until drawPie returns true,\r\n			// indicating that all the labels fit, or we try too many times.\r\n\r\n			do {\r\n				if (attempts > 0) {\r\n					maxRadius *= REDRAW_SHRINK;\r\n				}\r\n				attempts += 1;\r\n				clear();\r\n				if (options.series.pie.tilt <= 0.8) {\r\n					drawShadow();\r\n				}\r\n			} while (!drawPie() && attempts < REDRAW_ATTEMPTS)\r\n\r\n			if (attempts >= REDRAW_ATTEMPTS) {\r\n				clear();\r\n				target.prepend("<div class=\'error\'>Could not draw pie with labels contained inside canvas</div>");\r\n			}\r\n\r\n			if (plot.setSeries && plot.insertLegend) {\r\n				plot.setSeries(slices);\r\n				plot.insertLegend();\r\n			}\r\n\r\n			// we\'re actually done at this point, just defining internal functions at this point\r\n\r\n			function clear() {\r\n				ctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n				target.children().filter(".pieLabel, .pieLabelBackground").remove();\r\n			}\r\n\r\n			function drawShadow() {\r\n\r\n				var shadowLeft = options.series.pie.shadow.left;\r\n				var shadowTop = options.series.pie.shadow.top;\r\n				var edge = 10;\r\n				var alpha = options.series.pie.shadow.alpha;\r\n				var radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius;\r\n\r\n				if (radius >= canvasWidth / 2 - shadowLeft || radius * options.series.pie.tilt >= canvasHeight / 2 - shadowTop || radius <= edge) {\r\n					return;	// shadow would be outside canvas, so don\'t draw it\r\n				}\r\n\r\n				ctx.save();\r\n				ctx.translate(shadowLeft,shadowTop);\r\n				ctx.globalAlpha = alpha;\r\n				ctx.fillStyle = "#000";\r\n\r\n				// center and rotate to starting position\r\n\r\n				ctx.translate(centerLeft,centerTop);\r\n				ctx.scale(1, options.series.pie.tilt);\r\n\r\n				//radius -= edge;\r\n\r\n				for (var i = 1; i <= edge; i++) {\r\n					ctx.beginPath();\r\n					ctx.arc(0, 0, radius, 0, Math.PI * 2, false);\r\n					ctx.fill();\r\n					radius -= i;\r\n				}\r\n\r\n				ctx.restore();\r\n			}\r\n\r\n			function drawPie() {\r\n\r\n				var startAngle = Math.PI * options.series.pie.startAngle;\r\n				var radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius;\r\n\r\n				// center and rotate to starting position\r\n\r\n				ctx.save();\r\n				ctx.translate(centerLeft,centerTop);\r\n				ctx.scale(1, options.series.pie.tilt);\r\n				//ctx.rotate(startAngle); // start at top; -- This doesn\'t work properly in Opera\r\n\r\n				// draw slices\r\n\r\n				ctx.save();\r\n				var currentAngle = startAngle;\r\n				for (var i = 0; i < slices.length; ++i) {\r\n					slices[i].startAngle = currentAngle;\r\n					drawSlice(slices[i].angle, slices[i].color, true);\r\n				}\r\n				ctx.restore();\r\n\r\n				// draw slice outlines\r\n\r\n				if (options.series.pie.stroke.width > 0) {\r\n					ctx.save();\r\n					ctx.lineWidth = options.series.pie.stroke.width;\r\n					currentAngle = startAngle;\r\n					for (var i = 0; i < slices.length; ++i) {\r\n						drawSlice(slices[i].angle, options.series.pie.stroke.color, false);\r\n					}\r\n					ctx.restore();\r\n				}\r\n\r\n				// draw donut hole\r\n\r\n				drawDonutHole(ctx);\r\n\r\n				ctx.restore();\r\n\r\n				// Draw the labels, returning true if they fit within the plot\r\n\r\n				if (options.series.pie.label.show) {\r\n					return drawLabels();\r\n				} else return true;\r\n\r\n				function drawSlice(angle, color, fill) {\r\n\r\n					if (angle <= 0 || isNaN(angle)) {\r\n						return;\r\n					}\r\n\r\n					if (fill) {\r\n						ctx.fillStyle = color;\r\n					} else {\r\n						ctx.strokeStyle = color;\r\n						ctx.lineJoin = "round";\r\n					}\r\n\r\n					ctx.beginPath();\r\n					if (Math.abs(angle - Math.PI * 2) > 0.000000001) {\r\n						ctx.moveTo(0, 0); // Center of the pie\r\n					}\r\n\r\n					//ctx.arc(0, 0, radius, 0, angle, false); // This doesn\'t work properly in Opera\r\n					ctx.arc(0, 0, radius,currentAngle, currentAngle + angle / 2, false);\r\n					ctx.arc(0, 0, radius,currentAngle + angle / 2, currentAngle + angle, false);\r\n					ctx.closePath();\r\n					//ctx.rotate(angle); // This doesn\'t work properly in Opera\r\n					currentAngle += angle;\r\n\r\n					if (fill) {\r\n						ctx.fill();\r\n					} else {\r\n						ctx.stroke();\r\n					}\r\n				}\r\n\r\n				function drawLabels() {\r\n\r\n					var currentAngle = startAngle;\r\n					var radius = options.series.pie.label.radius > 1 ? options.series.pie.label.radius : maxRadius * options.series.pie.label.radius;\r\n\r\n					for (var i = 0; i < slices.length; ++i) {\r\n						if (slices[i].percent >= options.series.pie.label.threshold * 100) {\r\n							if (!drawLabel(slices[i], currentAngle, i)) {\r\n								return false;\r\n							}\r\n						}\r\n						currentAngle += slices[i].angle;\r\n					}\r\n\r\n					return true;\r\n\r\n					function drawLabel(slice, startAngle, index) {\r\n\r\n						if (slice.data[0][1] == 0) {\r\n							return true;\r\n						}\r\n\r\n						// format label text\r\n\r\n						var lf = options.legend.labelFormatter, text, plf = options.series.pie.label.formatter;\r\n\r\n						if (lf) {\r\n							text = lf(slice.label, slice);\r\n						} else {\r\n							text = slice.label;\r\n						}\r\n\r\n						if (plf) {\r\n							text = plf(text, slice);\r\n						}\r\n\r\n						var halfAngle = ((startAngle + slice.angle) + startAngle) / 2;\r\n						var x = centerLeft + Math.round(Math.cos(halfAngle) * radius);\r\n						var y = centerTop + Math.round(Math.sin(halfAngle) * radius) * options.series.pie.tilt;\r\n\r\n						var html = "<span class=\'pieLabel\' id=\'pieLabel" + index + "\' style=\'position:absolute;top:" + y + "px;left:" + x + "px;\'>" + text + "</span>";\r\n						target.append(html);\r\n\r\n						var label = target.children("#pieLabel" + index);\r\n						var labelTop = (y - label.height() / 2);\r\n						var labelLeft = (x - label.width() / 2);\r\n\r\n						label.css("top", labelTop);\r\n						label.css("left", labelLeft);\r\n\r\n						// check to make sure that the label is not outside the canvas\r\n\r\n						if (0 - labelTop > 0 || 0 - labelLeft > 0 || canvasHeight - (labelTop + label.height()) < 0 || canvasWidth - (labelLeft + label.width()) < 0) {\r\n							return false;\r\n						}\r\n\r\n						if (options.series.pie.label.background.opacity != 0) {\r\n\r\n							// put in the transparent background separately to avoid blended labels and label boxes\r\n\r\n							var c = options.series.pie.label.background.color;\r\n\r\n							if (c == null) {\r\n								c = slice.color;\r\n							}\r\n\r\n							var pos = "top:" + labelTop + "px;left:" + labelLeft + "px;";\r\n							$("<div class=\'pieLabelBackground\' style=\'position:absolute;width:" + label.width() + "px;height:" + label.height() + "px;" + pos + "background-color:" + c + ";\'></div>")\r\n								.css("opacity", options.series.pie.label.background.opacity)\r\n								.insertBefore(label);\r\n						}\r\n\r\n						return true;\r\n					} // end individual label function\r\n				} // end drawLabels function\r\n			} // end drawPie function\r\n		} // end draw function\r\n\r\n		// Placed here because it needs to be accessed from multiple locations\r\n\r\n		function drawDonutHole(layer) {\r\n			if (options.series.pie.innerRadius > 0) {\r\n\r\n				// subtract the center\r\n\r\n				layer.save();\r\n				var innerRadius = options.series.pie.innerRadius > 1 ? options.series.pie.innerRadius : maxRadius * options.series.pie.innerRadius;\r\n				layer.globalCompositeOperation = "destination-out"; // this does not work with excanvas, but it will fall back to using the stroke color\r\n				layer.beginPath();\r\n				layer.fillStyle = options.series.pie.stroke.color;\r\n				layer.arc(0, 0, innerRadius, 0, Math.PI * 2, false);\r\n				layer.fill();\r\n				layer.closePath();\r\n				layer.restore();\r\n\r\n				// add inner stroke\r\n\r\n				layer.save();\r\n				layer.beginPath();\r\n				layer.strokeStyle = options.series.pie.stroke.color;\r\n				layer.arc(0, 0, innerRadius, 0, Math.PI * 2, false);\r\n				layer.stroke();\r\n				layer.closePath();\r\n				layer.restore();\r\n\r\n				// TODO: add extra shadow inside hole (with a mask) if the pie is tilted.\r\n			}\r\n		}\r\n\r\n		//-- Additional Interactive related functions --\r\n\r\n		function isPointInPoly(poly, pt) {\r\n			for(var c = false, i = -1, l = poly.length, j = l - 1; ++i < l; j = i)\r\n				((poly[i][1] <= pt[1] && pt[1] < poly[j][1]) || (poly[j][1] <= pt[1] && pt[1]< poly[i][1]))\r\n				&& (pt[0] < (poly[j][0] - poly[i][0]) * (pt[1] - poly[i][1]) / (poly[j][1] - poly[i][1]) + poly[i][0])\r\n				&& (c = !c);\r\n			return c;\r\n		}\r\n\r\n		function findNearbySlice(mouseX, mouseY) {\r\n\r\n			var slices = plot.getData(),\r\n				options = plot.getOptions(),\r\n				radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius,\r\n				x, y;\r\n\r\n			for (var i = 0; i < slices.length; ++i) {\r\n\r\n				var s = slices[i];\r\n\r\n				if (s.pie.show) {\r\n\r\n					ctx.save();\r\n					ctx.beginPath();\r\n					ctx.moveTo(0, 0); // Center of the pie\r\n					//ctx.scale(1, options.series.pie.tilt);	// this actually seems to break everything when here.\r\n					ctx.arc(0, 0, radius, s.startAngle, s.startAngle + s.angle / 2, false);\r\n					ctx.arc(0, 0, radius, s.startAngle + s.angle / 2, s.startAngle + s.angle, false);\r\n					ctx.closePath();\r\n					x = mouseX - centerLeft;\r\n					y = mouseY - centerTop;\r\n\r\n					if (ctx.isPointInPath) {\r\n						if (ctx.isPointInPath(mouseX - centerLeft, mouseY - centerTop)) {\r\n							ctx.restore();\r\n							return {\r\n								datapoint: [s.percent, s.data],\r\n								dataIndex: 0,\r\n								series: s,\r\n								seriesIndex: i\r\n							};\r\n						}\r\n					} else {\r\n\r\n						// excanvas for IE doesn;t support isPointInPath, this is a workaround.\r\n\r\n						var p1X = radius * Math.cos(s.startAngle),\r\n							p1Y = radius * Math.sin(s.startAngle),\r\n							p2X = radius * Math.cos(s.startAngle + s.angle / 4),\r\n							p2Y = radius * Math.sin(s.startAngle + s.angle / 4),\r\n							p3X = radius * Math.cos(s.startAngle + s.angle / 2),\r\n							p3Y = radius * Math.sin(s.startAngle + s.angle / 2),\r\n							p4X = radius * Math.cos(s.startAngle + s.angle / 1.5),\r\n							p4Y = radius * Math.sin(s.startAngle + s.angle / 1.5),\r\n							p5X = radius * Math.cos(s.startAngle + s.angle),\r\n							p5Y = radius * Math.sin(s.startAngle + s.angle),\r\n							arrPoly = [[0, 0], [p1X, p1Y], [p2X, p2Y], [p3X, p3Y], [p4X, p4Y], [p5X, p5Y]],\r\n							arrPoint = [x, y];\r\n\r\n						// TODO: perhaps do some mathmatical trickery here with the Y-coordinate to compensate for pie tilt?\r\n\r\n						if (isPointInPoly(arrPoly, arrPoint)) {\r\n							ctx.restore();\r\n							return {\r\n								datapoint: [s.percent, s.data],\r\n								dataIndex: 0,\r\n								series: s,\r\n								seriesIndex: i\r\n							};\r\n						}\r\n					}\r\n\r\n					ctx.restore();\r\n				}\r\n			}\r\n\r\n			return null;\r\n		}\r\n\r\n		function onMouseMove(e) {\r\n			triggerClickHoverEvent("plothover", e);\r\n		}\r\n\r\n		function onClick(e) {\r\n			triggerClickHoverEvent("plotclick", e);\r\n		}\r\n\r\n		// trigger click or hover event (they send the same parameters so we share their code)\r\n\r\n		function triggerClickHoverEvent(eventname, e) {\r\n\r\n			var offset = plot.offset();\r\n			var canvasX = parseInt(e.pageX - offset.left);\r\n			var canvasY =  parseInt(e.pageY - offset.top);\r\n			var item = findNearbySlice(canvasX, canvasY);\r\n\r\n			if (options.grid.autoHighlight) {\r\n\r\n				// clear auto-highlights\r\n\r\n				for (var i = 0; i < highlights.length; ++i) {\r\n					var h = highlights[i];\r\n					if (h.auto == eventname && !(item && h.series == item.series)) {\r\n						unhighlight(h.series);\r\n					}\r\n				}\r\n			}\r\n\r\n			// highlight the slice\r\n\r\n			if (item) {\r\n				highlight(item.series, eventname);\r\n			}\r\n\r\n			// trigger any hover bind events\r\n\r\n			var pos = { pageX: e.pageX, pageY: e.pageY };\r\n			target.trigger(eventname, [pos, item]);\r\n		}\r\n\r\n		function highlight(s, auto) {\r\n			//if (typeof s == "number") {\r\n			//	s = series[s];\r\n			//}\r\n\r\n			var i = indexOfHighlight(s);\r\n\r\n			if (i == -1) {\r\n				highlights.push({ series: s, auto: auto });\r\n				plot.triggerRedrawOverlay();\r\n			} else if (!auto) {\r\n				highlights[i].auto = false;\r\n			}\r\n		}\r\n\r\n		function unhighlight(s) {\r\n			if (s == null) {\r\n				highlights = [];\r\n				plot.triggerRedrawOverlay();\r\n			}\r\n\r\n			//if (typeof s == "number") {\r\n			//	s = series[s];\r\n			//}\r\n\r\n			var i = indexOfHighlight(s);\r\n\r\n			if (i != -1) {\r\n				highlights.splice(i, 1);\r\n				plot.triggerRedrawOverlay();\r\n			}\r\n		}\r\n\r\n		function indexOfHighlight(s) {\r\n			for (var i = 0; i < highlights.length; ++i) {\r\n				var h = highlights[i];\r\n				if (h.series == s)\r\n					return i;\r\n			}\r\n			return -1;\r\n		}\r\n\r\n		function drawOverlay(plot, octx) {\r\n\r\n			var options = plot.getOptions();\r\n\r\n			var radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius;\r\n\r\n			octx.save();\r\n			octx.translate(centerLeft, centerTop);\r\n			octx.scale(1, options.series.pie.tilt);\r\n\r\n			for (var i = 0; i < highlights.length; ++i) {\r\n				drawHighlight(highlights[i].series);\r\n			}\r\n\r\n			drawDonutHole(octx);\r\n\r\n			octx.restore();\r\n\r\n			function drawHighlight(series) {\r\n\r\n				if (series.angle <= 0 || isNaN(series.angle)) {\r\n					return;\r\n				}\r\n\r\n				//octx.fillStyle = parseColor(options.series.pie.highlight.color).scale(null, null, null, options.series.pie.highlight.opacity).toString();\r\n				octx.fillStyle = "rgba(255, 255, 255, " + options.series.pie.highlight.opacity + ")"; // this is temporary until we have access to parseColor\r\n				octx.beginPath();\r\n				if (Math.abs(series.angle - Math.PI * 2) > 0.000000001) {\r\n					octx.moveTo(0, 0); // Center of the pie\r\n				}\r\n				octx.arc(0, 0, radius, series.startAngle, series.startAngle + series.angle / 2, false);\r\n				octx.arc(0, 0, radius, series.startAngle + series.angle / 2, series.startAngle + series.angle, false);\r\n				octx.closePath();\r\n				octx.fill();\r\n			}\r\n		}\r\n	} // end init (plugin body)\r\n\r\n	// define pie specific options and their default values\r\n\r\n	var options = {\r\n		series: {\r\n			pie: {\r\n				show: false,\r\n				radius: "auto",	// actual radius of the visible pie (based on full calculated radius if <=1, or hard pixel value)\r\n				innerRadius: 0, /* for donut */\r\n				startAngle: 3/2,\r\n				tilt: 1,\r\n				shadow: {\r\n					left: 5,	// shadow left offset\r\n					top: 15,	// shadow top offset\r\n					alpha: 0.02	// shadow alpha\r\n				},\r\n				offset: {\r\n					top: 0,\r\n					left: "auto"\r\n				},\r\n				stroke: {\r\n					color: "#fff",\r\n					width: 1\r\n				},\r\n				label: {\r\n					show: "auto",\r\n					formatter: function(label, slice) {\r\n						return "<div style=\'font-size:x-small;text-align:center;padding:2px;color:" + slice.color + ";\'>" + label + "<br/>" + Math.round(slice.percent) + "%</div>";\r\n					},	// formatter function\r\n					radius: 1,	// radius at which to place the labels (based on full calculated radius if <=1, or hard pixel value)\r\n					background: {\r\n						color: null,\r\n						opacity: 0\r\n					},\r\n					threshold: 0	// percentage at which to hide the label (i.e. the slice is too narrow)\r\n				},\r\n				combine: {\r\n					threshold: -1,	// percentage at which to combine little slices into one larger slice\r\n					color: null,	// color to give the new slice (auto-generated if null)\r\n					label: "Other"	// label to give the new slice\r\n				},\r\n				highlight: {\r\n					//color: "#fff",		// will add this functionality once parseColor is available\r\n					opacity: 0.5\r\n				}\r\n			}\r\n		}\r\n	};\r\n\r\n	$.plot.plugins.push({\r\n		init: init,\r\n		options: options,\r\n		name: "pie",\r\n		version: "1.1"\r\n	});\r\n\r\n})(jQuery);\r\n'},295:/*!*********************************************************************!*\
  !*** ./~/script-loader!./bower_components/Flot/jquery.flot.time.js ***!
  \*********************************************************************/
function(n,e,r){r(285)(r(296))},296:/*!**********************************************************************************!*\
  !*** ./~/script-loader/~/raw-loader!./bower_components/Flot/jquery.flot.time.js ***!
  \**********************************************************************************/
function(n,e){n.exports='/* Pretty handling of time axes.\r\n\r\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\r\nLicensed under the MIT license.\r\n\r\nSet axis.mode to "time" to enable. See the section "Time series data" in\r\nAPI.txt for details.\r\n\r\n*/\r\n\r\n(function($) {\r\n\r\n	var options = {\r\n		xaxis: {\r\n			timezone: null,		// "browser" for local to the client or timezone for timezone-js\r\n			timeformat: null,	// format string to use\r\n			twelveHourClock: false,	// 12 or 24 time in time mode\r\n			monthNames: null	// list of names of months\r\n		}\r\n	};\r\n\r\n	// round to nearby lower multiple of base\r\n\r\n	function floorInBase(n, base) {\r\n		return base * Math.floor(n / base);\r\n	}\r\n\r\n	// Returns a string with the date d formatted according to fmt.\r\n	// A subset of the Open Group\'s strftime format is supported.\r\n\r\n	function formatDate(d, fmt, monthNames, dayNames) {\r\n\r\n		if (typeof d.strftime == "function") {\r\n			return d.strftime(fmt);\r\n		}\r\n\r\n		var leftPad = function(n, pad) {\r\n			n = "" + n;\r\n			pad = "" + (pad == null ? "0" : pad);\r\n			return n.length == 1 ? pad + n : n;\r\n		};\r\n\r\n		var r = [];\r\n		var escape = false;\r\n		var hours = d.getHours();\r\n		var isAM = hours < 12;\r\n\r\n		if (monthNames == null) {\r\n			monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];\r\n		}\r\n\r\n		if (dayNames == null) {\r\n			dayNames = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];\r\n		}\r\n\r\n		var hours12;\r\n\r\n		if (hours > 12) {\r\n			hours12 = hours - 12;\r\n		} else if (hours == 0) {\r\n			hours12 = 12;\r\n		} else {\r\n			hours12 = hours;\r\n		}\r\n\r\n		for (var i = 0; i < fmt.length; ++i) {\r\n\r\n			var c = fmt.charAt(i);\r\n\r\n			if (escape) {\r\n				switch (c) {\r\n					case \'a\': c = "" + dayNames[d.getDay()]; break;\r\n					case \'b\': c = "" + monthNames[d.getMonth()]; break;\r\n					case \'d\': c = leftPad(d.getDate()); break;\r\n					case \'e\': c = leftPad(d.getDate(), " "); break;\r\n					case \'h\':	// For back-compat with 0.7; remove in 1.0\r\n					case \'H\': c = leftPad(hours); break;\r\n					case \'I\': c = leftPad(hours12); break;\r\n					case \'l\': c = leftPad(hours12, " "); break;\r\n					case \'m\': c = leftPad(d.getMonth() + 1); break;\r\n					case \'M\': c = leftPad(d.getMinutes()); break;\r\n					// quarters not in Open Group\'s strftime specification\r\n					case \'q\':\r\n						c = "" + (Math.floor(d.getMonth() / 3) + 1); break;\r\n					case \'S\': c = leftPad(d.getSeconds()); break;\r\n					case \'y\': c = leftPad(d.getFullYear() % 100); break;\r\n					case \'Y\': c = "" + d.getFullYear(); break;\r\n					case \'p\': c = (isAM) ? ("" + "am") : ("" + "pm"); break;\r\n					case \'P\': c = (isAM) ? ("" + "AM") : ("" + "PM"); break;\r\n					case \'w\': c = "" + d.getDay(); break;\r\n				}\r\n				r.push(c);\r\n				escape = false;\r\n			} else {\r\n				if (c == "%") {\r\n					escape = true;\r\n				} else {\r\n					r.push(c);\r\n				}\r\n			}\r\n		}\r\n\r\n		return r.join("");\r\n	}\r\n\r\n	// To have a consistent view of time-based data independent of which time\r\n	// zone the client happens to be in we need a date-like object independent\r\n	// of time zones.  This is done through a wrapper that only calls the UTC\r\n	// versions of the accessor methods.\r\n\r\n	function makeUtcWrapper(d) {\r\n\r\n		function addProxyMethod(sourceObj, sourceMethod, targetObj, targetMethod) {\r\n			sourceObj[sourceMethod] = function() {\r\n				return targetObj[targetMethod].apply(targetObj, arguments);\r\n			};\r\n		};\r\n\r\n		var utc = {\r\n			date: d\r\n		};\r\n\r\n		// support strftime, if found\r\n\r\n		if (d.strftime != undefined) {\r\n			addProxyMethod(utc, "strftime", d, "strftime");\r\n		}\r\n\r\n		addProxyMethod(utc, "getTime", d, "getTime");\r\n		addProxyMethod(utc, "setTime", d, "setTime");\r\n\r\n		var props = ["Date", "Day", "FullYear", "Hours", "Milliseconds", "Minutes", "Month", "Seconds"];\r\n\r\n		for (var p = 0; p < props.length; p++) {\r\n			addProxyMethod(utc, "get" + props[p], d, "getUTC" + props[p]);\r\n			addProxyMethod(utc, "set" + props[p], d, "setUTC" + props[p]);\r\n		}\r\n\r\n		return utc;\r\n	};\r\n\r\n	// select time zone strategy.  This returns a date-like object tied to the\r\n	// desired timezone\r\n\r\n	function dateGenerator(ts, opts) {\r\n		if (opts.timezone == "browser") {\r\n			return new Date(ts);\r\n		} else if (!opts.timezone || opts.timezone == "utc") {\r\n			return makeUtcWrapper(new Date(ts));\r\n		} else if (typeof timezoneJS != "undefined" && typeof timezoneJS.Date != "undefined") {\r\n			var d = new timezoneJS.Date();\r\n			// timezone-js is fickle, so be sure to set the time zone before\r\n			// setting the time.\r\n			d.setTimezone(opts.timezone);\r\n			d.setTime(ts);\r\n			return d;\r\n		} else {\r\n			return makeUtcWrapper(new Date(ts));\r\n		}\r\n	}\r\n	\r\n	// map of app. size of time units in milliseconds\r\n\r\n	var timeUnitSize = {\r\n		"second": 1000,\r\n		"minute": 60 * 1000,\r\n		"hour": 60 * 60 * 1000,\r\n		"day": 24 * 60 * 60 * 1000,\r\n		"month": 30 * 24 * 60 * 60 * 1000,\r\n		"quarter": 3 * 30 * 24 * 60 * 60 * 1000,\r\n		"year": 365.2425 * 24 * 60 * 60 * 1000\r\n	};\r\n\r\n	// the allowed tick sizes, after 1 year we use\r\n	// an integer algorithm\r\n\r\n	var baseSpec = [\r\n		[1, "second"], [2, "second"], [5, "second"], [10, "second"],\r\n		[30, "second"], \r\n		[1, "minute"], [2, "minute"], [5, "minute"], [10, "minute"],\r\n		[30, "minute"], \r\n		[1, "hour"], [2, "hour"], [4, "hour"],\r\n		[8, "hour"], [12, "hour"],\r\n		[1, "day"], [2, "day"], [3, "day"],\r\n		[0.25, "month"], [0.5, "month"], [1, "month"],\r\n		[2, "month"]\r\n	];\r\n\r\n	// we don\'t know which variant(s) we\'ll need yet, but generating both is\r\n	// cheap\r\n\r\n	var specMonths = baseSpec.concat([[3, "month"], [6, "month"],\r\n		[1, "year"]]);\r\n	var specQuarters = baseSpec.concat([[1, "quarter"], [2, "quarter"],\r\n		[1, "year"]]);\r\n\r\n	function init(plot) {\r\n		plot.hooks.processOptions.push(function (plot, options) {\r\n			$.each(plot.getAxes(), function(axisName, axis) {\r\n\r\n				var opts = axis.options;\r\n\r\n				if (opts.mode == "time") {\r\n					axis.tickGenerator = function(axis) {\r\n\r\n						var ticks = [];\r\n						var d = dateGenerator(axis.min, opts);\r\n						var minSize = 0;\r\n\r\n						// make quarter use a possibility if quarters are\r\n						// mentioned in either of these options\r\n\r\n						var spec = (opts.tickSize && opts.tickSize[1] ===\r\n							"quarter") ||\r\n							(opts.minTickSize && opts.minTickSize[1] ===\r\n							"quarter") ? specQuarters : specMonths;\r\n\r\n						if (opts.minTickSize != null) {\r\n							if (typeof opts.tickSize == "number") {\r\n								minSize = opts.tickSize;\r\n							} else {\r\n								minSize = opts.minTickSize[0] * timeUnitSize[opts.minTickSize[1]];\r\n							}\r\n						}\r\n\r\n						for (var i = 0; i < spec.length - 1; ++i) {\r\n							if (axis.delta < (spec[i][0] * timeUnitSize[spec[i][1]]\r\n											  + spec[i + 1][0] * timeUnitSize[spec[i + 1][1]]) / 2\r\n								&& spec[i][0] * timeUnitSize[spec[i][1]] >= minSize) {\r\n								break;\r\n							}\r\n						}\r\n\r\n						var size = spec[i][0];\r\n						var unit = spec[i][1];\r\n\r\n						// special-case the possibility of several years\r\n\r\n						if (unit == "year") {\r\n\r\n							// if given a minTickSize in years, just use it,\r\n							// ensuring that it\'s an integer\r\n\r\n							if (opts.minTickSize != null && opts.minTickSize[1] == "year") {\r\n								size = Math.floor(opts.minTickSize[0]);\r\n							} else {\r\n\r\n								var magn = Math.pow(10, Math.floor(Math.log(axis.delta / timeUnitSize.year) / Math.LN10));\r\n								var norm = (axis.delta / timeUnitSize.year) / magn;\r\n\r\n								if (norm < 1.5) {\r\n									size = 1;\r\n								} else if (norm < 3) {\r\n									size = 2;\r\n								} else if (norm < 7.5) {\r\n									size = 5;\r\n								} else {\r\n									size = 10;\r\n								}\r\n\r\n								size *= magn;\r\n							}\r\n\r\n							// minimum size for years is 1\r\n\r\n							if (size < 1) {\r\n								size = 1;\r\n							}\r\n						}\r\n\r\n						axis.tickSize = opts.tickSize || [size, unit];\r\n						var tickSize = axis.tickSize[0];\r\n						unit = axis.tickSize[1];\r\n\r\n						var step = tickSize * timeUnitSize[unit];\r\n\r\n						if (unit == "second") {\r\n							d.setSeconds(floorInBase(d.getSeconds(), tickSize));\r\n						} else if (unit == "minute") {\r\n							d.setMinutes(floorInBase(d.getMinutes(), tickSize));\r\n						} else if (unit == "hour") {\r\n							d.setHours(floorInBase(d.getHours(), tickSize));\r\n						} else if (unit == "month") {\r\n							d.setMonth(floorInBase(d.getMonth(), tickSize));\r\n						} else if (unit == "quarter") {\r\n							d.setMonth(3 * floorInBase(d.getMonth() / 3,\r\n								tickSize));\r\n						} else if (unit == "year") {\r\n							d.setFullYear(floorInBase(d.getFullYear(), tickSize));\r\n						}\r\n\r\n						// reset smaller components\r\n\r\n						d.setMilliseconds(0);\r\n\r\n						if (step >= timeUnitSize.minute) {\r\n							d.setSeconds(0);\r\n						}\r\n						if (step >= timeUnitSize.hour) {\r\n							d.setMinutes(0);\r\n						}\r\n						if (step >= timeUnitSize.day) {\r\n							d.setHours(0);\r\n						}\r\n						if (step >= timeUnitSize.day * 4) {\r\n							d.setDate(1);\r\n						}\r\n						if (step >= timeUnitSize.month * 2) {\r\n							d.setMonth(floorInBase(d.getMonth(), 3));\r\n						}\r\n						if (step >= timeUnitSize.quarter * 2) {\r\n							d.setMonth(floorInBase(d.getMonth(), 6));\r\n						}\r\n						if (step >= timeUnitSize.year) {\r\n							d.setMonth(0);\r\n						}\r\n\r\n						var carry = 0;\r\n						var v = Number.NaN;\r\n						var prev;\r\n\r\n						do {\r\n\r\n							prev = v;\r\n							v = d.getTime();\r\n							ticks.push(v);\r\n\r\n							if (unit == "month" || unit == "quarter") {\r\n								if (tickSize < 1) {\r\n\r\n									// a bit complicated - we\'ll divide the\r\n									// month/quarter up but we need to take\r\n									// care of fractions so we don\'t end up in\r\n									// the middle of a day\r\n\r\n									d.setDate(1);\r\n									var start = d.getTime();\r\n									d.setMonth(d.getMonth() +\r\n										(unit == "quarter" ? 3 : 1));\r\n									var end = d.getTime();\r\n									d.setTime(v + carry * timeUnitSize.hour + (end - start) * tickSize);\r\n									carry = d.getHours();\r\n									d.setHours(0);\r\n								} else {\r\n									d.setMonth(d.getMonth() +\r\n										tickSize * (unit == "quarter" ? 3 : 1));\r\n								}\r\n							} else if (unit == "year") {\r\n								d.setFullYear(d.getFullYear() + tickSize);\r\n							} else {\r\n								d.setTime(v + step);\r\n							}\r\n						} while (v < axis.max && v != prev);\r\n\r\n						return ticks;\r\n					};\r\n\r\n					axis.tickFormatter = function (v, axis) {\r\n\r\n						var d = dateGenerator(v, axis.options);\r\n\r\n						// first check global format\r\n\r\n						if (opts.timeformat != null) {\r\n							return formatDate(d, opts.timeformat, opts.monthNames, opts.dayNames);\r\n						}\r\n\r\n						// possibly use quarters if quarters are mentioned in\r\n						// any of these places\r\n\r\n						var useQuarters = (axis.options.tickSize &&\r\n								axis.options.tickSize[1] == "quarter") ||\r\n							(axis.options.minTickSize &&\r\n								axis.options.minTickSize[1] == "quarter");\r\n\r\n						var t = axis.tickSize[0] * timeUnitSize[axis.tickSize[1]];\r\n						var span = axis.max - axis.min;\r\n						var suffix = (opts.twelveHourClock) ? " %p" : "";\r\n						var hourCode = (opts.twelveHourClock) ? "%I" : "%H";\r\n						var fmt;\r\n\r\n						if (t < timeUnitSize.minute) {\r\n							fmt = hourCode + ":%M:%S" + suffix;\r\n						} else if (t < timeUnitSize.day) {\r\n							if (span < 2 * timeUnitSize.day) {\r\n								fmt = hourCode + ":%M" + suffix;\r\n							} else {\r\n								fmt = "%b %d " + hourCode + ":%M" + suffix;\r\n							}\r\n						} else if (t < timeUnitSize.month) {\r\n							fmt = "%b %d";\r\n						} else if ((useQuarters && t < timeUnitSize.quarter) ||\r\n							(!useQuarters && t < timeUnitSize.year)) {\r\n							if (span < timeUnitSize.year) {\r\n								fmt = "%b";\r\n							} else {\r\n								fmt = "%b %Y";\r\n							}\r\n						} else if (useQuarters && t < timeUnitSize.year) {\r\n							if (span < timeUnitSize.year) {\r\n								fmt = "Q%q";\r\n							} else {\r\n								fmt = "Q%q %Y";\r\n							}\r\n						} else {\r\n							fmt = "%Y";\r\n						}\r\n\r\n						var rt = formatDate(d, fmt, opts.monthNames, opts.dayNames);\r\n\r\n						return rt;\r\n					};\r\n				}\r\n			});\r\n		});\r\n	}\r\n\r\n	$.plot.plugins.push({\r\n		init: init,\r\n		options: options,\r\n		name: \'time\',\r\n		version: \'1.0\'\r\n	});\r\n\r\n	// Time-axis support used to be in Flot core, which exposed the\r\n	// formatDate function on the plot object.  Various plugins depend\r\n	// on the function, so we need to re-expose it here.\r\n\r\n	$.plot.formatDate = formatDate;\r\n	$.plot.dateGenerator = dateGenerator;\r\n\r\n})(jQuery);\r\n'},297:/*!***************************************************************************************!*\
  !*** ./~/script-loader!./bower_components/flot.tooltip/js/jquery.flot.tooltip.min.js ***!
  \***************************************************************************************/
function(n,e,r){r(285)(r(298))},298:/*!****************************************************************************************************!*\
  !*** ./~/script-loader/~/raw-loader!./bower_components/flot.tooltip/js/jquery.flot.tooltip.min.js ***!
  \****************************************************************************************************/
function(n,e){n.exports='/*\r\n * jquery.flot.tooltip\r\n * \r\n * description: easy-to-use tooltips for Flot charts\r\n * version: 0.8.7\r\n * authors: Krzysztof Urbas @krzysu [myviews.pl],Evan Steinkerchner @Roundaround\r\n * website: https://github.com/krzysu/flot.tooltip\r\n * \r\n * build on 2016-03-15\r\n * released under MIT License, 2012\r\n*/ \r\n!function(a){var b={tooltip:{show:!1,cssClass:"flotTip",content:"%s | X: %x | Y: %y",xDateFormat:null,yDateFormat:null,monthNames:null,dayNames:null,shifts:{x:10,y:20},defaultTheme:!0,snap:!0,lines:!1,clickTips:!1,onHover:function(a,b){},$compat:!1}};b.tooltipOpts=b.tooltip;var c=function(a){this.tipPosition={x:0,y:0},this.init(a)};c.prototype.init=function(b){function c(a){var c={};c.x=a.pageX,c.y=a.pageY,b.setTooltipPosition(c)}function d(c,d,g){f.clickmode?(a(b.getPlaceholder()).bind("plothover",e),b.hideTooltip(),f.clickmode=!1):(e(c,d,g),f.getDomElement().is(":visible")&&(a(b.getPlaceholder()).unbind("plothover",e),f.clickmode=!0))}function e(c,d,e){var g=function(a,b,c,d){return Math.sqrt((c-a)*(c-a)+(d-b)*(d-b))},h=function(a,b,c,d,e,f,h){if(!h||(h=function(a,b,c,d,e,f){if("undefined"!=typeof c)return{x:c,y:b};if("undefined"!=typeof d)return{x:a,y:d};var g,h=-1/((f-d)/(e-c));return{x:g=(e*(a*h-b+d)+c*(a*-h+b-f))/(h*(e-c)+d-f),y:h*g-h*a+b}}(a,b,c,d,e,f),h.x>=Math.min(c,e)&&h.x<=Math.max(c,e)&&h.y>=Math.min(d,f)&&h.y<=Math.max(d,f))){var i=d-f,j=e-c,k=c*f-d*e;return Math.abs(i*a+j*b+k)/Math.sqrt(i*i+j*j)}var l=g(a,b,c,d),m=g(a,b,e,f);return l>m?m:l};if(e)b.showTooltip(e,f.tooltipOptions.snap?e:d);else if(f.plotOptions.series.lines.show&&f.tooltipOptions.lines===!0){var i=f.plotOptions.grid.mouseActiveRadius,j={distance:i+1},k=d;a.each(b.getData(),function(a,c){for(var e=0,i=-1,l=1;l<c.data.length;l++)c.data[l-1][0]<=d.x&&c.data[l][0]>=d.x&&(e=l-1,i=l);if(-1===i)return void b.hideTooltip();var m={x:c.data[e][0],y:c.data[e][1]},n={x:c.data[i][0],y:c.data[i][1]},o=h(c.xaxis.p2c(d.x),c.yaxis.p2c(d.y),c.xaxis.p2c(m.x),c.yaxis.p2c(m.y),c.xaxis.p2c(n.x),c.yaxis.p2c(n.y),!1);if(o<j.distance){var p=g(m.x,m.y,d.x,d.y)<g(d.x,d.y,n.x,n.y)?e:i,q=(c.datapoints.pointsize,[d.x,m.y+(n.y-m.y)*((d.x-m.x)/(n.x-m.x))]),r={datapoint:q,dataIndex:p,series:c,seriesIndex:a};j={distance:o,item:r},f.tooltipOptions.snap&&(k={pageX:c.xaxis.p2c(q[0]),pageY:c.yaxis.p2c(q[1])})}}),j.distance<i+1?b.showTooltip(j.item,k):b.hideTooltip()}else b.hideTooltip()}var f=this,g=a.plot.plugins.length;if(this.plotPlugins=[],g)for(var h=0;g>h;h++)this.plotPlugins.push(a.plot.plugins[h].name);b.hooks.bindEvents.push(function(b,g){if(f.plotOptions=b.getOptions(),"boolean"==typeof f.plotOptions.tooltip&&(f.plotOptions.tooltipOpts.show=f.plotOptions.tooltip,f.plotOptions.tooltip=f.plotOptions.tooltipOpts,delete f.plotOptions.tooltipOpts),f.plotOptions.tooltip.show!==!1&&"undefined"!=typeof f.plotOptions.tooltip.show){f.tooltipOptions=f.plotOptions.tooltip,f.tooltipOptions.$compat?(f.wfunc="width",f.hfunc="height"):(f.wfunc="innerWidth",f.hfunc="innerHeight");f.getDomElement();a(b.getPlaceholder()).bind("plothover",e),f.tooltipOptions.clickTips&&a(b.getPlaceholder()).bind("plotclick",d),f.clickmode=!1,a(g).bind("mousemove",c)}}),b.hooks.shutdown.push(function(b,f){a(b.getPlaceholder()).unbind("plothover",e),a(b.getPlaceholder()).unbind("plotclick",d),b.removeTooltip(),a(f).unbind("mousemove",c)}),b.setTooltipPosition=function(b){var c=f.getDomElement(),d=c.outerWidth()+f.tooltipOptions.shifts.x,e=c.outerHeight()+f.tooltipOptions.shifts.y;b.x-a(window).scrollLeft()>a(window)[f.wfunc]()-d&&(b.x-=d),b.y-a(window).scrollTop()>a(window)[f.hfunc]()-e&&(b.y-=e),isNaN(b.x)?f.tipPosition.x=f.tipPosition.xPrev:(f.tipPosition.x=b.x,f.tipPosition.xPrev=b.x),isNaN(b.y)?f.tipPosition.y=f.tipPosition.yPrev:(f.tipPosition.y=b.y,f.tipPosition.yPrev=b.y)},b.showTooltip=function(a,c,d){var e=f.getDomElement(),g=f.stringFormat(f.tooltipOptions.content,a);""!==g&&(e.html(g),b.setTooltipPosition({x:c.pageX,y:c.pageY}),e.css({left:f.tipPosition.x+f.tooltipOptions.shifts.x,top:f.tipPosition.y+f.tooltipOptions.shifts.y}).show(),"function"==typeof f.tooltipOptions.onHover&&f.tooltipOptions.onHover(a,e))},b.hideTooltip=function(){f.getDomElement().hide().html("")},b.removeTooltip=function(){f.getDomElement().remove()}},c.prototype.getDomElement=function(){var b=a("<div>");return this.tooltipOptions&&this.tooltipOptions.cssClass&&(b=a("."+this.tooltipOptions.cssClass),0===b.length&&(b=a("<div />").addClass(this.tooltipOptions.cssClass),b.appendTo("body").hide().css({position:"absolute"}),this.tooltipOptions.defaultTheme&&b.css({background:"#fff","z-index":"1040",padding:"0.4em 0.6em","border-radius":"0.5em","font-size":"0.8em",border:"1px solid #111",display:"none","white-space":"nowrap"}))),b},c.prototype.stringFormat=function(a,b){var c,d,e,f,g,h=/%p\\.{0,1}(\\d{0,})/,i=/%s/,j=/%c/,k=/%lx/,l=/%ly/,m=/%x\\.{0,1}(\\d{0,})/,n=/%y\\.{0,1}(\\d{0,})/,o="%x",p="%y",q="%ct",r="%n";if("undefined"!=typeof b.series.threshold?(c=b.datapoint[0],d=b.datapoint[1],e=b.datapoint[2]):"undefined"!=typeof b.series.curvedLines?(c=b.datapoint[0],d=b.datapoint[1]):"undefined"!=typeof b.series.lines&&b.series.lines.steps?(c=b.series.datapoints.points[2*b.dataIndex],d=b.series.datapoints.points[2*b.dataIndex+1],e=""):(c=b.series.data[b.dataIndex][0],d=b.series.data[b.dataIndex][1],e=b.series.data[b.dataIndex][2]),null===b.series.label&&b.series.originSeries&&(b.series.label=b.series.originSeries.label),"function"==typeof a&&(a=a(b.series.label,c,d,b)),"boolean"==typeof a&&!a)return"";if(e&&(a=a.replace(q,e)),"undefined"!=typeof b.series.percent?f=b.series.percent:"undefined"!=typeof b.series.percents&&(f=b.series.percents[b.dataIndex]),"number"==typeof f&&(a=this.adjustValPrecision(h,a,f)),b.series.hasOwnProperty("pie")&&(g=b.series.data[0][1]),"number"==typeof g&&(a=a.replace(r,g)),a="undefined"!=typeof b.series.label?a.replace(i,b.series.label):a.replace(i,""),a="undefined"!=typeof b.series.color?a.replace(j,b.series.color):a.replace(j,""),a=this.hasAxisLabel("xaxis",b)?a.replace(k,b.series.xaxis.options.axisLabel):a.replace(k,""),a=this.hasAxisLabel("yaxis",b)?a.replace(l,b.series.yaxis.options.axisLabel):a.replace(l,""),this.isTimeMode("xaxis",b)&&this.isXDateFormat(b)&&(a=a.replace(m,this.timestampToDate(c,this.tooltipOptions.xDateFormat,b.series.xaxis.options))),this.isTimeMode("yaxis",b)&&this.isYDateFormat(b)&&(a=a.replace(n,this.timestampToDate(d,this.tooltipOptions.yDateFormat,b.series.yaxis.options))),"number"==typeof c&&(a=this.adjustValPrecision(m,a,c)),"number"==typeof d&&(a=this.adjustValPrecision(n,a,d)),"undefined"!=typeof b.series.xaxis.ticks){var s;s=this.hasRotatedXAxisTicks(b)?"rotatedTicks":"ticks";var t=b.dataIndex+b.seriesIndex;for(var u in b.series.xaxis[s])if(b.series.xaxis[s].hasOwnProperty(t)&&!this.isTimeMode("xaxis",b)){var v=this.isCategoriesMode("xaxis",b)?b.series.xaxis[s][t].label:b.series.xaxis[s][t].v;v===c&&(a=a.replace(m,b.series.xaxis[s][t].label.replace(/\\$/g,"$$$$")))}}if("undefined"!=typeof b.series.yaxis.ticks)for(var w in b.series.yaxis.ticks)if(b.series.yaxis.ticks.hasOwnProperty(w)){var x=this.isCategoriesMode("yaxis",b)?b.series.yaxis.ticks[w].label:b.series.yaxis.ticks[w].v;x===d&&(a=a.replace(n,b.series.yaxis.ticks[w].label.replace(/\\$/g,"$$$$")))}return"undefined"!=typeof b.series.xaxis.tickFormatter&&(a=a.replace(o,b.series.xaxis.tickFormatter(c,b.series.xaxis).replace(/\\$/g,"$$"))),"undefined"!=typeof b.series.yaxis.tickFormatter&&(a=a.replace(p,b.series.yaxis.tickFormatter(d,b.series.yaxis).replace(/\\$/g,"$$"))),a},c.prototype.isTimeMode=function(a,b){return"undefined"!=typeof b.series[a].options.mode&&"time"===b.series[a].options.mode},c.prototype.isXDateFormat=function(a){return"undefined"!=typeof this.tooltipOptions.xDateFormat&&null!==this.tooltipOptions.xDateFormat},c.prototype.isYDateFormat=function(a){return"undefined"!=typeof this.tooltipOptions.yDateFormat&&null!==this.tooltipOptions.yDateFormat},c.prototype.isCategoriesMode=function(a,b){return"undefined"!=typeof b.series[a].options.mode&&"categories"===b.series[a].options.mode},c.prototype.timestampToDate=function(b,c,d){var e=a.plot.dateGenerator(b,d);return a.plot.formatDate(e,c,this.tooltipOptions.monthNames,this.tooltipOptions.dayNames)},c.prototype.adjustValPrecision=function(a,b,c){var d,e=b.match(a);return null!==e&&""!==RegExp.$1&&(d=RegExp.$1,c=c.toFixed(d),b=b.replace(a,c)),b},c.prototype.hasAxisLabel=function(b,c){return-1!==a.inArray("axisLabels",this.plotPlugins)&&"undefined"!=typeof c.series[b].options.axisLabel&&c.series[b].options.axisLabel.length>0},c.prototype.hasRotatedXAxisTicks=function(b){return-1!==a.inArray("tickRotor",this.plotPlugins)&&"undefined"!=typeof b.series.xaxis.rotatedTicks};var d=function(a){new c(a)};a.plot.plugins.push({init:d,options:b,name:"tooltip",version:"0.8.5"})}(jQuery);'},328:/*!*********************************************!*\
  !*** ./src/app/pages/graphs/FlotCharts.jsx ***!
  \*********************************************/
function(n,e,r){"use strict";function t(n){return n&&n.__esModule?n:{"default":n}}Object.defineProperty(e,"__esModule",{value:!0});var i=r(19),a=t(i),o=r(56),s=t(o),l=r(267),c=t(l),d=r(275),p=t(d),f=r(271),h=t(f),u=r(274),x=t(u),m=r(283),g=t(m),b=s["default"].createActions({init:{asyncResult:!0}});b.init.listen(function(){$.getJSON("api/graphs/flot.json").then(this.completed,this.failed)});var y=s["default"].createStore({listenables:b,onInitCompleted:function(n){this.trigger(n)}}),v=a["default"].createClass({displayName:"FlotCharts",mixins:[s["default"].connect(y)],componentWillMount:function(){b.init()},getInitialState:function(){return{updatingData:[]}},tick:function(){this.setState({updatingData:[j.getRandomData()]})},componentDidMount:function(){this.interval=setInterval(this.tick,1e3)},componentWillUnmount:function(){clearInterval(this.interval)},render:function(){return a["default"].createElement("div",{id:"content"},a["default"].createElement("div",{className:"row"},a["default"].createElement(p["default"],{className:"col-xs-12 col-sm-7 col-md-7 col-lg-4"}),a["default"].createElement(c["default"],null)),a["default"].createElement(h["default"],null,a["default"].createElement("div",{className:"row"},a["default"].createElement("article",{className:"col-sm-12 col-md-12 col-lg-12"},a["default"].createElement(x["default"],{editbutton:!1},a["default"].createElement("header",null,a["default"].createElement("span",{className:"widget-icon"}," ",a["default"].createElement("i",{className:"fa fa-bar-chart-o"})," "),a["default"].createElement("h2",null,"Bar Chart")),a["default"].createElement("div",null,a["default"].createElement("div",{className:"widget-body no-padding"},a["default"].createElement("flot-bar-chart",{data:"barChartData"}),a["default"].createElement(g["default"],{data:this.state.barChartData,options:k})))),a["default"].createElement(x["default"],{editbutton:!1},a["default"].createElement("header",null,a["default"].createElement("span",{className:"widget-icon"}," ",a["default"].createElement("i",{className:"fa fa-bar-chart-o"})," "),a["default"].createElement("h2",null,"Sin Chart")),a["default"].createElement("div",null,a["default"].createElement("div",{className:"widget-body no-padding"},a["default"].createElement(g["default"],{data:this.state.sinChartData,options:C}))))),a["default"].createElement("article",{className:"col-xs-12 col-sm-6 col-md-6 col-lg-6"},a["default"].createElement(x["default"],{editbutton:!1},a["default"].createElement("header",null,a["default"].createElement("span",{className:"widget-icon"}," ",a["default"].createElement("i",{className:"fa fa-bar-chart-o"})," "),a["default"].createElement("h2",null,"Auto Updating Chart")),a["default"].createElement("div",null,a["default"].createElement("div",{className:"widget-body no-padding"},a["default"].createElement(g["default"],{data:this.state.updatingData,options:z}))))),a["default"].createElement("article",{className:"col-xs-12 col-sm-6 col-md-6 col-lg-6"},a["default"].createElement(x["default"],{editbutton:!1},a["default"].createElement("header",null,a["default"].createElement("span",{className:"widget-icon"}," ",a["default"].createElement("i",{className:"fa fa-bar-chart-o"})," "),a["default"].createElement("h2",null,"Horizontal Bar Chart")),a["default"].createElement("div",null,a["default"].createElement("div",{className:"widget-body no-padding"},a["default"].createElement(g["default"],{data:this.state.horizontalBarChartData,options:S}))))),a["default"].createElement("article",{className:"col-sm-12 col-md-12 col-lg-12"},a["default"].createElement(x["default"],{editbutton:!1},a["default"].createElement("header",null,a["default"].createElement("span",{className:"widget-icon"}," ",a["default"].createElement("i",{className:"fa fa-bar-chart-o"})," "),a["default"].createElement("h2",null,"Sales Chart")),a["default"].createElement("div",null,a["default"].createElement("div",{className:"widget-body no-padding"},a["default"].createElement(g["default"],{data:this.state.salesChartData,options:O}))))),a["default"].createElement("article",{className:"col-xs-12 col-sm-8 col-md-7 col-lg-7"},a["default"].createElement(x["default"],{editbutton:!1},a["default"].createElement("header",null,a["default"].createElement("span",{className:"widget-icon"}," ",a["default"].createElement("i",{className:"fa fa-bar-chart-o"})," "),a["default"].createElement("h2",null,"Plot Percentiles")),a["default"].createElement("div",null,a["default"].createElement("div",{className:"widget-body no-padding"},a["default"].createElement(g["default"],{data:this.state.fillChartData,options:M}))))),a["default"].createElement("article",{className:"col-xs-12 col-sm-4 col-md-5 col-lg-5"},a["default"].createElement(x["default"],{editbutton:!1},a["default"].createElement("header",null,a["default"].createElement("span",{className:"widget-icon"}," ",a["default"].createElement("i",{className:"fa fa-bar-chart-o"})," "),a["default"].createElement("h2",null,"Pie Chart")),a["default"].createElement("div",null,a["default"].createElement("div",{className:"widget-body no-padding"},a["default"].createElement(g["default"],{data:this.state.pieChartData,options:T}))))),a["default"].createElement("article",{className:"col-xs-12"},a["default"].createElement(x["default"],{editbutton:!1},a["default"].createElement("header",null,a["default"].createElement("span",{className:"widget-icon"}," ",a["default"].createElement("i",{className:"fa fa-bar-chart-o"})," "),a["default"].createElement("h2",null,"Site Stats Chart")),a["default"].createElement("div",null,a["default"].createElement("div",{className:"widget-body no-padding"},a["default"].createElement(g["default"],{data:this.state.siteStatsData,options:A}))))))))}}),w={chartBorderColor:"#efefef",chartGridColor:"#DDD",charMain:"#E24913",chartSecond:"#6595b4",chartThird:"#FF9F01",chartFourth:"#7e9d3a",chartFifth:"#BD362F",chartMono:"#000"},k={colors:[w.chartSecond,w.chartFourth,"#666","#BBB"],grid:{show:!0,hoverable:!0,clickable:!0,tickColor:w.chartBorderColor,borderWidth:0,borderColor:w.chartBorderColor},legend:!0,tooltip:!0,tooltipOpts:{content:"<b>%x</b> = <span>%y</span>",defaultTheme:!1}},C={series:{lines:{show:!0},points:{show:!0}},grid:{hoverable:!0,clickable:!0,tickColor:w.chartBorderColor,borderWidth:0,borderColor:w.chartBorderColor},tooltip:!0,tooltipOpts:{defaultTheme:!1},colors:[w.chartSecond,w.chartFourth],yaxis:{min:-1.1,max:1.1},xaxis:{min:0,max:15}},S={colors:[w.chartSecond,w.chartFourth,"#666","#BBB"],grid:{show:!0,hoverable:!0,clickable:!0,tickColor:w.chartBorderColor,borderWidth:0,borderColor:w.chartBorderColor},legend:!0,tooltip:!0,tooltipOpts:{content:"<b>%x</b> = <span>%y</span>",defaultTheme:!1}},O={xaxis:{mode:"time",tickLength:5},series:{lines:{show:!0,lineWidth:1,fill:!0,fillColor:{colors:[{opacity:.1},{opacity:.15}]}},shadowSize:0},selection:{mode:"x"},grid:{hoverable:!0,clickable:!0,tickColor:w.chartBorderColor,borderWidth:0,borderColor:w.chartBorderColor},tooltip:!0,tooltipOpts:{content:"Your sales for <b>%x</b> was <span>$%y</span>",dateFormat:"%y-%0m-%0d",defaultTheme:!1},colors:[w.chartSecond]},M={xaxis:{tickDecimals:0},yaxis:{tickFormatter:function(n){return n+" cm"}}},T={series:{pie:{show:!0,innerRadius:.5,radius:1,label:{show:!1,radius:2/3,formatter:function(n,e){return'<div style="font-size:11px;text-align:center;padding:4px;color:white;">'+n+"<br/>"+Math.round(e.percent)+"%</div>"},threshold:.1}}},legend:{show:!0,noColumns:1,labelFormatter:null,labelBoxBorderColor:"#000",container:null,position:"ne",margin:[5,10],backgroundColor:"#efefef",backgroundOpacity:1},grid:{hoverable:!0,clickable:!0}},A={series:{lines:{show:!0,lineWidth:1,fill:!0,fillColor:{colors:[{opacity:.1},{opacity:.15}]}},points:{show:!0},shadowSize:0},yaxes:[{min:20,tickLength:5}],grid:{hoverable:!0,clickable:!0,tickColor:w.chartBorderColor,borderWidth:0,borderColor:w.chartBorderColor},tooltip:!0,tooltipOpts:{content:"%s for <b>%x:00 hrs</b> was %y",dateFormat:"%y-%0m-%0d",defaultTheme:!1},colors:[w.charMain,w.chartSecond],xaxis:{mode:"time",tickLength:10,ticks:15,tickDecimals:2},yaxis:{ticks:15,tickDecimals:0}},z={yaxis:{min:0,max:100},xaxis:{min:0,max:100},colors:[w.chartFourth],series:{lines:{lineWidth:1,fill:!0,fillColor:{colors:[{opacity:.4},{opacity:0}]},steps:!1}}},j={data:[],total:200,getRandomData:function(){for(this.data.length>0&&(this.data=this.data.slice(1));this.data.length<this.total;){var n=this.data.length>0?this.data[this.data.length-1]:50,e=n+10*Math.random()-5;0>e&&(e=0),e>100&&(e=100),this.data.push(e)}for(var r=[],t=0;t<this.data.length;++t)r.push([t,this.data[t]]);return r}};e["default"]=v}});